<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ST0new Blog</title>
  
  <subtitle>博观而约取，厚积而薄发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-30T04:08:44.760Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ST0new</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>攻防世界-RememberOther</title>
    <link href="http://yoursite.com/2020/05/30/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/RememberOther/"/>
    <id>http://yoursite.com/2020/05/30/CTF/攻防世界/RememberOther/</id>
    <published>2020-05-30T03:26:48.000Z</published>
    <updated>2020-05-30T04:08:44.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RememberOther"><a href="#RememberOther" class="headerlink" title="RememberOther"></a>RememberOther</h1><h2 id="附件下载"><a href="#附件下载" class="headerlink" title="附件下载"></a>附件下载</h2><p><a href="https://adworld.xctf.org.cn/media/task/attachments/476d9022bb0449c09c0b1e24f0686b66.zip" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/476d9022bb0449c09c0b1e24f0686b66.zip</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先安装 然后看看逻辑</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530112854.png" alt></p><p>额 这个不就是注册机吗，这个做过，方法比较多， 直接看jadx 反编译出的代码，看看flag在哪</p><p>看到有个判断，应该是需要注册成功后返回</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530114236.png" alt></p><p>那么打开Androidkiller 修改if 判断处的逻辑，然而 我没找到if 判断，那就只能改checkSN方法了</p><p><img src="D:%5CBlog%5CST0new.github.io%5Csource_posts%5CCTF%5C%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%5Cphoto%5C20200530115843.png" alt></p><p>然后安装 点击注册</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530115913.png" alt></p><p>直接输出flag</p><p>同样 ，在返回值中，返回的是R.string.unsuccessed ，这是一个静态的字符串，strings.xml 中可以找到具体的值</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530120407.png" alt></p><p>md5:b3241668ecbeb19921fdac5ac1aafa69</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530120448.png" alt></p><p>解出 md5 值</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530120600.png" alt></p><p>然后 这个是个半段，还有半段在word文档中，这是个坑，看了wp后才知道</p><p>所以最后的flag ： YOU_KNOW_ANDROID</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RememberOther&quot;&gt;&lt;a href=&quot;#RememberOther&quot; class=&quot;headerlink&quot; title=&quot;RememberOther&quot;&gt;&lt;/a&gt;RememberOther&lt;/h1&gt;&lt;h2 id=&quot;附件下载&quot;&gt;&lt;a href=&quot;#附件下载&quot;
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-Ph0en1x-100</title>
    <link href="http://yoursite.com/2020/05/29/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/Ph0nen1x-100/"/>
    <id>http://yoursite.com/2020/05/29/CTF/攻防世界/Ph0nen1x-100/</id>
    <published>2020-05-29T08:11:37.000Z</published>
    <updated>2020-05-30T03:24:23.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ph0en1x-100"><a href="#Ph0en1x-100" class="headerlink" title="Ph0en1x-100"></a>Ph0en1x-100</h1><h2 id="附件下载"><a href="#附件下载" class="headerlink" title="附件下载"></a>附件下载</h2><p><a href="https://adworld.xctf.org.cn/media/task/attachments/f6adc401d0eb472892a4ac4481f76a85.apk" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/f6adc401d0eb472892a4ac4481f76a85.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>上手第一步还是看app逻辑， 可以看的出来 输入flag 判断正确与否，又是一个算法题。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529162137.png" alt></p><p>打开<code>jadx</code> 找到<code>MainActivity</code>,很明显就可以看到<code>Success</code>，</p><p>目标：输入正确的flag 让if 判断成立 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先对输入的字符串进行了一次encrypt， 之后在进行一次getSecret ，然后和getFlag() 做了一次判断是否相等</span><br><span class="line">getSecret(getFlag()).equals(getSecret(encrypt(this.etFlag.getText().toString())))</span><br></pre></td></tr></table></figure><h3 id="分析encrypt-函数"><a href="#分析encrypt-函数" class="headerlink" title="分析encrypt 函数"></a>分析encrypt 函数</h3><p>在jadx中查看函数声明，居然是so里面的，分析吧 </p><p>搜索字符串 关键字<code>Java_</code> 直接找到加密方法，进去看看调用逻辑，并不是很难。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529163739.png" alt></p><p>然后看看伪代码</p><p>a1 是传入进去的字符串，然后 i 是v2的第一个字符，对i的值进行减一   那他这里就是一个位移加密了。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529164307.png" alt></p><h3 id="分析getFlag"><a href="#分析getFlag" class="headerlink" title="分析getFlag()"></a>分析getFlag()</h3><p>分析了半天，感觉静态分析很难，然后看了下别人的思路，我是着实没想到，把这个方法运行一下就得到了flag</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529171947.png" alt></p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529172050.png" alt></p><p>得到字符串后编写脚本拿到flag</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag = &quot;ek`fz@q2^x/t^fn0mF^6/^rb`qanqntfg^E`hq|&quot;</span><br><span class="line">result = &quot;&quot;</span><br><span class="line"></span><br><span class="line">for i in flag:</span><br><span class="line">    result += chr((ord(i)+1))</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>result:flag{Ar3_y0u_go1nG_70_scarborough_Fair}</p><h2 id="其他解"><a href="#其他解" class="headerlink" title="其他解"></a>其他解</h2><p>之后我看了下网上的解法，很多，这里用一个frida hook 拿到getflag 和动态调试拿到flag来演示</p><h3 id="frida-hook-getFlag"><a href="#frida-hook-getFlag" class="headerlink" title="frida hook getFlag"></a>frida hook getFlag</h3><p>编写脚本 hook代码</p><p>命令： <code>frida -U com.ph0en1x.android_crackme -l Hook.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function hookphone100() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var getFlag = Module.findExportByName(&quot;libphcm.so&quot;,&quot;Java_com_ph0en1x_android_1crackme_MainActivity_getFlag&quot;);</span><br><span class="line">        console.log(getFlag);</span><br><span class="line">        if (getFlag != NULL)&#123;</span><br><span class="line">            Interceptor.attach(getFlag,&#123;</span><br><span class="line">                onEnter:function (args) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                onLeave:function (retval) &#123;</span><br><span class="line">                    var String_java = Java.use(&apos;java.lang.String&apos;);</span><br><span class="line">                    var args_4 = Java.cast(retval, String_java)</span><br><span class="line">                    console.log(retval);</span><br><span class="line">                    console.log(retval.toInt32());</span><br><span class="line">                    console.log(&quot;getFlag()==&gt;&quot;+args_4)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        hookphone100();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529180529.png" alt></p><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>动态调试 看了西米露表姐的wp ，我也尝试使用jeb 进行动态调试。</p><p>先以调试模式启动待调试apk，多下点准没错 然后在如图位置 得到了getFlag（）的值。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530112352.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ph0en1x-100&quot;&gt;&lt;a href=&quot;#Ph0en1x-100&quot; class=&quot;headerlink&quot; title=&quot;Ph0en1x-100&quot;&gt;&lt;/a&gt;Ph0en1x-100&lt;/h1&gt;&lt;h2 id=&quot;附件下载&quot;&gt;&lt;a href=&quot;#附件下载&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>新氧医美登录协议分析</title>
    <link href="http://yoursite.com/2020/05/29/%E9%80%86%E5%90%91/%E7%A0%B4%E8%A7%A3/%E6%96%B0%E6%B0%A7xx%E7%99%BB%E5%BD%95%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/05/29/逆向/破解/新氧xx登录协议分析/</id>
    <published>2020-05-29T08:02:00.000Z</published>
    <updated>2020-05-29T08:03:57.728Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5fba91cdb161c5a180f635513a9236b54a367988f6523ab7a3b3ee9d61601615"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="破解" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-app1</title>
    <link href="http://yoursite.com/2020/05/28/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/app1/"/>
    <id>http://yoursite.com/2020/05/28/CTF/攻防世界/app1/</id>
    <published>2020-05-28T09:23:50.000Z</published>
    <updated>2020-05-30T05:38:30.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="App1"><a href="#App1" class="headerlink" title="App1"></a>App1</h1><h2 id="附件下载"><a href="#附件下载" class="headerlink" title="附件下载"></a>附件下载</h2><p><a href="https://adworld.xctf.org.cn/media/task/attachments/b9af8dfef6b749d2819ef5be16c26a0d.apk" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/b9af8dfef6b749d2819ef5be16c26a0d.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看看逻辑 输入字符串判断</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530121617.png" alt></p><p>打开jadx 查看代码</p><p>输入字符串应该为versionCode.charAt(i) ^ versionName ，</p><p>看来要满足的条件是：</p><p>​    str = versionCode.charAt(i) ^ versionName</p><p>​    str.length = versionCode.length</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530122044.png" alt></p><p>动态调试一下，拿到这两个值<code>versionCode</code> 和 <code>versionName</code> 在操作中用jeb 一直附加失败（之后发现是自己的ddms 开着。）</p><p>附上一张jeb 动态调试拿到的结果</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530133755.png" alt></p><p>后来找到了定义 原来这里不是获取的系统内容</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530132107.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">versionCode = 15</span><br><span class="line">versionName = X&lt;cP[?PHNB&lt;P?aj</span><br></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>之前浪费了点时间在无意义的地方，最后发现都是一些简单的逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">versionCode = 15</span><br><span class="line">versionName = &quot;X&lt;cP[?PHNB&lt;P?aj&quot;</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line"></span><br><span class="line">for i in range(0,versionCode):</span><br><span class="line">    flag += chr(ord(versionName[i]) ^versionCode)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>flag: W3l_T0_GAM3_0ne</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;App1&quot;&gt;&lt;a href=&quot;#App1&quot; class=&quot;headerlink&quot; title=&quot;App1&quot;&gt;&lt;/a&gt;App1&lt;/h1&gt;&lt;h2 id=&quot;附件下载&quot;&gt;&lt;a href=&quot;#附件下载&quot; class=&quot;headerlink&quot; title=&quot;附件下载&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-app2</title>
    <link href="http://yoursite.com/2020/05/28/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/app2/"/>
    <id>http://yoursite.com/2020/05/28/CTF/攻防世界/app2/</id>
    <published>2020-05-28T09:23:50.000Z</published>
    <updated>2020-05-29T02:08:56.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="app2"><a href="#app2" class="headerlink" title="app2"></a>app2</h1><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>附件地址：<a href="https://adworld.xctf.org.cn/media/task/attachments/2554cf208cfb4cdf9218a840fa9bf237.apk" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/2554cf208cfb4cdf9218a840fa9bf237.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先看逻辑，打开app 是一个登录界面，难道是sql注入，</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200528172841.png" alt></p><p>点击登录后返回<code>Waiting fot you</code></p><p>打开jadx看看， 先搜索一下点击登录返回的字符串，没有找到结果</p><p>打开ddms 看看，在log输出了用户名和密码，然后追踪到具体的log位置</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200528173942.png" alt></p><p>之后<code>Intent intent = new Intent(this, SecondActivity.class);</code>,看看<code>SecondActivity</code>这个方法干了什么</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200528174644.png" alt></p><p>看起来 判断了用户名+密码加密后的值</p><p>那么进doRawData 看看</p><p> <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200528174928.png" alt></p><p>打开ida 找到doRawData 方法， 可以判断出 这里做了一个AES_128_ECB_PKCS5Padding_Encrypt的加密。 这里注意，我当时打开x86 文件夹下的so分析时 没有提示key，而amei-v7a下面的分析时，key是提示出来的 不需要在动态调试。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529094907.png" alt></p><p>放到在线的aes 解密工具中解密</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200528181035.png" alt></p><p>将拿到的字符串分隔成两 去尝试登录 用户名：tencent 密码 aimage ，输入后直接闪退。看看源码做做了什么（ps 啥都没找到）</p><p>到这里 基本已经做完了，没有头绪，去看了下wp 发现flag 在<code>FileDataActivity</code>下</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529100134.png" alt></p><p>然后 解密 得到flag：Cas3_0f_A_CAK3</p><p>在看 wp时发现还有另一种做法</p><p>因为<code>FileDataActivity</code> 属于界面 可以通过 <code>adb shell am start com.tencent.testvuln/.FileDataActivity</code> 这种方式直接调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;app2&quot;&gt;&lt;a href=&quot;#app2&quot; class=&quot;headerlink&quot; title=&quot;app2&quot;&gt;&lt;/a&gt;app2&lt;/h1&gt;&lt;h2 id=&quot;附件&quot;&gt;&lt;a href=&quot;#附件&quot; class=&quot;headerlink&quot; title=&quot;附件&quot;&gt;&lt;/a&gt;附件&lt;/h
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-eaasy-so</title>
    <link href="http://yoursite.com/2020/05/26/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/easy-so/"/>
    <id>http://yoursite.com/2020/05/26/CTF/攻防世界/easy-so/</id>
    <published>2020-05-26T02:06:10.000Z</published>
    <updated>2020-05-27T02:19:02.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easy-so"><a href="#easy-so" class="headerlink" title="easy-so"></a>easy-so</h1><p>附件地址：</p><p><a href="https://adworld.xctf.org.cn/media/task/attachments/456c1dab04b24036ba1d6e32a08dc882.apk" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/456c1dab04b24036ba1d6e32a08dc882.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>安装apk文件，梳理逻辑，寻找flag隐藏方式，ddms 随时监听</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526101345.png" alt></p><p>打开jadx 查看<code>验证失败</code> 是怎么出现的</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526101514.png" alt></p><p>定位CheckString 函数，很明显 这是个so层的方法，那目的明确了 去so层找这个方法</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526102651.png" alt></p><p>分析so层 搜索<code>Java_</code>关键字，找到checkstring ，跟进</p><p>有个判断相等就返回1，那么回推v4 = f72c5a36569418a20907b55be5bf95ad</p><p><code>if ( !strcmp(v4, &quot;f72c5a36569418a20907b55be5bf95ad&quot;) )</code></p><p>v4进行了一次<code>j_TestDec</code> ，那么可以判断</p><p>跟进j_TestDec, 在TestDec 中有两个判断，第一个判断内做了一次前16位和后16位交换，第二个判断是两两之间做了一次交换。</p><p>那逆推也就简单了。 和前面分析的几个题大致类似</p><p>单独把TestDec拿出来 看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">v1 = (char *)a1;</span><br><span class="line"># 这里做了一个前16位和后16位的交换</span><br><span class="line">if ( strlen(a1) &gt;= 2 )</span><br><span class="line">&#123;</span><br><span class="line">  v2 = 0;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (int)&amp;v1[v2];  v3 记录地址</span><br><span class="line">    v4 = v1[v2];v4 记录值</span><br><span class="line">    v1[v2] = v1[v2 + 16];  然后 str[0] = str[16] 此后 每次都是 str[v2] = str[v2+16]</span><br><span class="line">    ++v2; </span><br><span class="line">    *(_BYTE *)(v3 + 16) = v4;   str[v2+16] = v4</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v2 &lt; strlen(v1) &gt;&gt; 1 );</span><br><span class="line">&#125;</span><br><span class="line">result = (unsigned __int8)*v1;</span><br><span class="line"># 这里做了一个两两交换</span><br><span class="line">if ( *v1 )</span><br><span class="line">&#123;</span><br><span class="line">  *v1 = v1[1];   </span><br><span class="line">  v1[1] = result;</span><br><span class="line">  result = strlen(v1);</span><br><span class="line">  if ( result &gt;= 3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = 0;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = (int)&amp;v1[v6];   这里替换成熟悉的变量    </span><br><span class="line">      v8 = v1[v6 + 2];v8 用tmp表示tmp = v1[2]</span><br><span class="line">      *(_BYTE *)(v7 + 2) = v1[v6 + 3]; v1[2] = v1[3]</span><br><span class="line">      *(_BYTE *)(v7 + 3) = v8;v[3] = tmp</span><br><span class="line">      result = strlen(v1);</span><br><span class="line">      v9 = v6 + 4;</span><br><span class="line">      v6 += 2;</span><br><span class="line">    &#125;</span><br><span class="line">    while ( v9 &lt; result );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">str = list(&quot;f72c5a36569418a20907b55be5bf95ad&quot;)</span><br><span class="line"></span><br><span class="line"># 反推</span><br><span class="line"># 做一次两两交换</span><br><span class="line">for i in range(0, len(str), 2):</span><br><span class="line">    str[i], str[i + 1] = str[i + 1], str[i]</span><br><span class="line">print(&quot;&quot;.join(str))</span><br><span class="line"># 在做一次前16位和后16位的交换</span><br><span class="line">for i in range(len(str) // 2):</span><br><span class="line">    str[i], str[i + 16] = str[i + 16], str[i]</span><br><span class="line">print(&quot;&quot;.join(str))</span><br><span class="line"># 记得加上flag&#123;&#125; 格式</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;easy-so&quot;&gt;&lt;a href=&quot;#easy-so&quot; class=&quot;headerlink&quot; title=&quot;easy-so&quot;&gt;&lt;/a&gt;easy-so&lt;/h1&gt;&lt;p&gt;附件地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://adworld.xctf.org.cn/
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ctfhub-彩蛋</title>
    <link href="http://yoursite.com/2020/05/26/CTF/ctfhub/%E5%BD%A9%E8%9B%8B/"/>
    <id>http://yoursite.com/2020/05/26/CTF/ctfhub/彩蛋/</id>
    <published>2020-05-26T00:30:54.000Z</published>
    <updated>2020-05-26T02:00:50.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526083224.png" alt></p><p><code>*.ctfhub.com</code> 不确定是那个域名的首页，那么先搜索一下子域名瞧瞧 </p><p>使用工具：Turbolist3r</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[-] Total Unique Subdomains Found: 4</span><br><span class="line">api.ctfhub.com</span><br><span class="line">ctfhub.com&lt;BR&gt;www.ctfhub.com</span><br><span class="line">static.ctfhub.com</span><br><span class="line">writeup.ctfhub.com</span><br></pre></td></tr></table></figure><p>第一个就命中了，ctrl+u 查看源代码，找到flag</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526083437.png" alt></p><h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526084053.png" alt></p><p>看来不得不关注一波了</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526083746.png" alt></p><p>每一位CTF选手都是在为flag冲击</p><h2 id="题目入口"><a href="#题目入口" class="headerlink" title="题目入口"></a>题目入口</h2><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526084116.png" alt></p><p>那就找找题目的入口看看， 哈哈，找了个web题，</p><p>打开正常 ，不存在flag， 然后经过。。。。。时间后，猜测可能报错会存在flag</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526084927.png" alt></p><p>删除域名其中的字符使其报错，拿到<code>flag</code></p><h2 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h2><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526085510.png" alt></p><p>那就去writeup中找找，翻了好几个wp都没找到，还学习了很多知识，你确定是让我找flag，到处点点，最后在搜索处，以<code>flag</code>找到了flag</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526085647.png" alt></p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526085706.png" alt></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526085859.png" alt></p><p>在工具中翻一翻，没有什么本站链接，然后灵机一动，翻到最后一页，拿到flag</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526090010.png" alt></p><p>奇怪打开是404， 试了好几遍，发现了猫腻，居然会跳转到404 ，手速要快，还有可以F12查找</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526090121.png" alt></p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526090229.png" alt></p><h2 id="赛事"><a href="#赛事" class="headerlink" title="赛事"></a>赛事</h2><p>有没有做到后面得心应手的感觉，那都是幻觉 醒醒</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526090333.png" alt></p><p>和工具类似，直接翻到最后一页，拿到flag</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526090419.png" alt></p><h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h2><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526090506.png" alt></p><p>直接翻到最后一页，没有啥大的变化了</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526090537.png" alt></p><h2 id="投稿提交"><a href="#投稿提交" class="headerlink" title="投稿提交"></a>投稿提交</h2><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526090812.png" alt></p><p>来到writeup投稿，拿到前半段 flag[6:12] = “{029e0”</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526090742.png" alt></p><p>然后在题目提交处，拿到感觉是中间一部分flag[12:18] = “2eb3a1”</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526090909.png" alt></p><p>在wp投稿 源代码中找到最后一串flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZyU1QjE4JTNBMjQlNUQlMjAlM0QlMjAlMjJlOGM0OWIlMjI=、</span><br><span class="line">base64 -&gt; urldecode 后</span><br><span class="line">flag[18:24] = &quot;e8c49b&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526091326.png" alt></p><p>长记性了，再去题目提交出看看再次拿到一串字符串，这是16进制，转成字符串后得到24-30位的flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">666c61675b32343a33305d203d202231313332623522</span><br><span class="line">16进制转字符串</span><br><span class="line">flag[24:30] = &quot;1132b5&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526091642.png" alt></p><p>发现 flag长度还是不够，接下来继续翻</p><p>在题目提交中图片中找到一串flag ： flag[36:42] = “a5f3a8”</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526091952.png" alt></p><p>在wp提交中图片中找到flag：flag[30:36] = “15b652”</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526092049.png" alt></p><p>在下载demo中找到最后的flag</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526092234.png" alt></p><p>6位字母混合是 26^6次方啊，爆破到啥时候了，百度了下，密码是ctfhub，那我也不写脚本爆破了，直接拿来获得正解。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200526094003.png" alt></p><p>最后的flag是：ctfhub{029e02eb3a1e8c49b}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;彩蛋&quot;&gt;&lt;a href=&quot;#彩蛋&quot; class=&quot;headerlink&quot; title=&quot;彩蛋&quot;&gt;&lt;/a&gt;彩蛋&lt;/h1&gt;&lt;h2 id=&quot;首页&quot;&gt;&lt;a href=&quot;#首页&quot; class=&quot;headerlink&quot; title=&quot;首页&quot;&gt;&lt;/a&gt;首页&lt;/h2&gt;&lt;p&gt;&lt;im
      
    
    </summary>
    
    
      <category term="Misc" scheme="http://yoursite.com/categories/Misc/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-easyjni</title>
    <link href="http://yoursite.com/2020/05/25/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/easyjni/"/>
    <id>http://yoursite.com/2020/05/25/CTF/攻防世界/easyjni/</id>
    <published>2020-05-25T09:55:46.000Z</published>
    <updated>2020-05-26T00:30:22.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easyjni"><a href="#easyjni" class="headerlink" title="easyjni"></a>easyjni</h1><p>下载附件地址：<a href="https://adworld.xctf.org.cn/media/task/attachments/eb760e6a10ea4dcab700a6b7db948488.apk" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/eb760e6a10ea4dcab700a6b7db948488.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>安装apk，先看看逻辑，打开后发现输入字符串，然后系统判断正确与否，那么就要自己去啃算法了</p><p>打开jadx ，定位到oncrete处，<code>if</code>判断决定了是正确还是失败，跟进其中的方法查看</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200525180305.png" alt></p><p>在a方法中，当<code>ncheck(new a().a(str.getBytes()))</code> 才能返回正确，那么继续跟进，看何时返回<code>True</code></p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200525180459.png" alt></p><p>先分析一个<code>new a().a(str.getBytes())</code> 获得了什么</p><p>输入一个a </p><p>a.getBytes(): [B@1540e19d</p><p>输出 23==</p><p>做了一个类似base64编码的算法</p><p>下来看ncheck </p><p>定位到如下，看来居然是在so层进行的判断。那么打开ida 查看，so文件在lib下</p><p><code>private native boolean ncheck(String str);</code></p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200525183450.png" alt></p><p>搜索Java下划线开头的方法，只有一个，那么就查看他了，进去后tab一下，查看伪代码</p><p>从后往前分析， return=1  时  v12 为空，那么 memcmp 方法中s1 ==MbT3sQgX039i3g==AQOoMQFPskB1Bsc7</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200525184022.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">v5 = (env-&gt;functions-&gt;GetStringUTFChars)(env, str, 0);</span><br><span class="line">  if ( strlen(v5) == 32 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = 0;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = &amp;s1[v6];</span><br><span class="line">      s1[v6] = v5[v6 + 16];</span><br><span class="line">      v8 = v5[v6++];</span><br><span class="line">      v7[16] = v8;</span><br><span class="line">    &#125;// 前16位和后16位 交换</span><br><span class="line">    while ( v6 != 16 );</span><br><span class="line">    (env_1-&gt;functions-&gt;ReleaseStringUTFChars)(env_1, v4, v5);</span><br><span class="line">    v9 = 0;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = __OFSUB__(v9, 30);</span><br><span class="line">      v10 = v9 - 30 &lt; 0;</span><br><span class="line">      v15 = s1[v9];</span><br><span class="line">      s1[v9] = s1[v9 + 1];</span><br><span class="line">      s1[v9 + 1] = v15;</span><br><span class="line">      v9 += 2; </span><br><span class="line">    &#125; // 两两之间交换</span><br><span class="line">    while ( v10 ^ v11 );</span><br><span class="line">    v12 = memcmp(s1, &quot;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&quot;, &apos; &apos;);</span><br></pre></td></tr></table></figure><p>所以解密的方式也就清晰了，先解决so层，得到传入so层的值，然后解决java层 得到flag</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>脚本分为两个部分 so（）是解决so里面的两个加密， 一个是两两交换，一个是前16和后16交换，之后是java层的加密，是一个替换了base64表的加密，只需要更换base64 表，重新接码即可，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">def so():</span><br><span class="line">    str = list(&quot;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&quot;)</span><br><span class="line">    print(len(str))</span><br><span class="line">    # 先两两交换</span><br><span class="line">    for i in range(0,len(str),2):</span><br><span class="line">        str[i],str[i+1] = str[i+1],str[i]</span><br><span class="line">    print(&quot;&quot;.join(str))</span><br><span class="line">    # 然后将str 的前16位和后16位交换</span><br><span class="line">    for i in  range(len(str)//2):</span><br><span class="line">        str[i],str[i+16] = str[i+16],str[i]</span><br><span class="line">    print(&quot;&quot;.join(str))</span><br><span class="line">    return &quot;&quot;.join(str)</span><br><span class="line"># 之后就是java层的，和解码base64类似</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def unbase(string:str)-&gt;str:</span><br><span class="line">    oldstr = &apos;&apos;</span><br><span class="line">    unbase = &apos;&apos;</span><br><span class="line">    base64_list = [&apos;i&apos;, &apos;5&apos;, &apos;j&apos;, &apos;L&apos;, &apos;W&apos;, &apos;7&apos;, &apos;S&apos;, &apos;0&apos;, &apos;G&apos;, &apos;X&apos;, &apos;6&apos;,</span><br><span class="line">                    &apos;u&apos;, &apos;f&apos;, &apos;1&apos;, &apos;c&apos;, &apos;v&apos;, &apos;3&apos;, &apos;n&apos;, &apos;y&apos;, &apos;4&apos;, &apos;q&apos;, &apos;8&apos;,</span><br><span class="line">                    &apos;e&apos;, &apos;s&apos;, &apos;2&apos;, &apos;Q&apos;, &apos;+&apos;, &apos;b&apos;, &apos;d&apos;, &apos;k&apos;, &apos;Y&apos;, &apos;g&apos;, &apos;K&apos;,</span><br><span class="line">                    &apos;O&apos;, &apos;I&apos;, &apos;T&apos;, &apos;/&apos;, &apos;t&apos;, &apos;A&apos;, &apos;x&apos;, &apos;U&apos;, &apos;r&apos;, &apos;F&apos;, &apos;l&apos;,</span><br><span class="line">                    &apos;V&apos;, &apos;P&apos;, &apos;z&apos;, &apos;h&apos;, &apos;m&apos;, &apos;o&apos;, &apos;w&apos;, &apos;9&apos;, &apos;B&apos;, &apos;H&apos;, &apos;C&apos;,</span><br><span class="line">                    &apos;M&apos;, &apos;D&apos;, &apos;p&apos;, &apos;E&apos;, &apos;a&apos;, &apos;J&apos;, &apos;R&apos;, &apos;Z&apos;, &apos;N&apos;]</span><br><span class="line">    for i in string.replace(&apos;=&apos;,&apos;&apos;):</span><br><span class="line">        oldstr += &apos;&#123;:06&#125;&apos;.format(int(bin(base64_list.index(i)).replace(&apos;0b&apos;, &apos;&apos;)))</span><br><span class="line">    newstr = [&apos;&#123;&#125;&apos;.format(oldstr[j:j + 8]) for j in range(0, len(oldstr), 8)]</span><br><span class="line">    for l in range(len(newstr)):</span><br><span class="line">        unbase += chr(int(newstr[l], 2))</span><br><span class="line"></span><br><span class="line">    print(unbase)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    unbase(so())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 参考 ： https://blog.csdn.net/Leeeey/article/details/89517254 找到一个base64 解码的python脚本</span><br><span class="line"></span><br><span class="line">结果：flag&#123;just_ANot#er_@p3&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;easyjni&quot;&gt;&lt;a href=&quot;#easyjni&quot; class=&quot;headerlink&quot; title=&quot;easyjni&quot;&gt;&lt;/a&gt;easyjni&lt;/h1&gt;&lt;p&gt;下载附件地址：&lt;a href=&quot;https://adworld.xctf.org.cn/media/
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-easyjava</title>
    <link href="http://yoursite.com/2020/05/25/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/easyjava/"/>
    <id>http://yoursite.com/2020/05/25/CTF/攻防世界/easyjava/</id>
    <published>2020-05-25T02:41:20.000Z</published>
    <updated>2020-05-26T02:05:57.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="攻防世界题解easyjava"><a href="#攻防世界题解easyjava" class="headerlink" title="攻防世界题解easyjava"></a>攻防世界题解easyjava</h2><p>好无聊啊，找个CTF做做，攻防世界有一栏Mobile的 正好适合</p><p>下载文件地址： </p><p><a href="https://adworld.xctf.org.cn/media/task/attachments/3f06e60ded5e44e3b0f4c47020cbcb3c.apk" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/3f06e60ded5e44e3b0f4c47020cbcb3c.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>使用<code>jadx</code>工具 反编译查看代码，先看看App 的oncreate方法</p><p>有一个<code>if</code>判断，判断正确 返回<code>You are right</code> 否则 返回 <code>Your are wrong! Bye~</code></p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200523155923.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivity.b(((EditText) ((MainActivity) this).findViewById(R.id.edit)).getText().toString()).booleanValue()</span><br></pre></td></tr></table></figure><p>大致意思是 传入了一个值，然后在b方法中调用 ，返回的结果转为bool类型，那么就是说这里的返回值要求为1 才能进入<code>if</code>判断</p><p>看一下b方法 中的逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static Boolean b(String str) &#123; // 传入一个String类型</span><br><span class="line">        if (!str.startsWith(&quot;flag&#123;&quot;)) &#123; // 判断是否以flag&#123; 开始  </span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!str.endsWith(&quot;&#125;&quot;)) &#123; // 判断是否以&#125; 结尾</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        String substring = str.substring(5, str.length() - 1); // 去除 flag&#123; 和&#125; 之后的结果保存到substring中</span><br><span class="line">        b bVar = new b(2); // 这里我单独拉出来了 运行了一下，得到了结果</span><br><span class="line">        a aVar = new a(3);</span><br><span class="line">        // 这里就讲bvar 和aVar 写成明文</span><br><span class="line">        String bVar = &quot;ctf.demo.b@1540e19d&quot;;</span><br><span class="line">        String aVar = &quot;ctf.demo.a@1540e19d&quot;;</span><br><span class="line">        // 分析for循环</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        int i = 0;</span><br><span class="line">        for (int i2 = 0; i2 &lt; substring.length(); i2++) &#123;</span><br><span class="line">            sb.append(a(substring.charAt(i2) + &quot;&quot;, bVar, aVar));</span><br><span class="line">            Integer valueOf = Integer.valueOf(bVar.b().intValue() / 25);</span><br><span class="line">            if (valueOf.intValue() &gt; i &amp;&amp; valueOf.intValue() &gt;= 1) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return Boolean.valueOf(sb.toString().equals(&quot;wigwrkaugala&quot;));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>bVar: ctf.demo.b@1540e19d</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200523162216.png" alt></p><p>aVar: ctf.demo.a@1540e19d</p><p>通过加注释获得了了解到整个流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;zdgd&#125;</span><br><span class="line">-----------------------</span><br><span class="line">b-&gt;abcdefghijklmnopqrstuvwxyz</span><br><span class="line">b.a(String str) -&gt;z</span><br><span class="line">Integer.valueOf(b.indexOf(str))-&gt;25</span><br><span class="line">a-&gt;[17, 23, 7, 22, 1, 16, 6, 9, 21, 0, 15, 5, 10, 18, 2, 24, 4, 11, 3, 14, 19, 12, 20, 13, 8, 25]  因为每次判断都是长度减一  所以当判断25次就结束了 第一次给z 循环判断失败。i等于0</span><br><span class="line">b: i -&gt;0</span><br><span class="line">a.a a(Integer num)-&gt;0 将i 传入 aVar.a(i)</span><br><span class="line">a: a(Integer num) -&gt; [21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16] 寻找0的位置 在第16次找到</span><br><span class="line">a:a -&gt;[21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16]</span><br><span class="line">num2 -&gt;16 a类中的b 是个固定的。所以最后得到的第16位就是q</span><br><span class="line">b-&gt;abcdefghijklmnopqrstuvwxyz</span><br><span class="line">b.charAt(num2.intValue())-&gt;q</span><br><span class="line">-----------------------</span><br><span class="line">b-&gt;bcdefghijklmnopqrstuvwxyza</span><br><span class="line">b.a(String str) -&gt;d</span><br><span class="line">Integer.valueOf(b.indexOf(str))2</span><br><span class="line">a-&gt;[23, 7, 22, 1, 16, 6, 9, 21, 0, 15, 5, 10, 18, 2, 24, 4, 11, 3, 14, 19, 12, 20, 13, 8, 25, 17]</span><br><span class="line">a.get(i2)-&gt;13</span><br><span class="line">b: i -&gt;13</span><br><span class="line">a.a a(Integer num)-&gt;13</span><br><span class="line">a: a(Integer num) -&gt; [21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16]</span><br><span class="line">a:a -&gt;[21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16]</span><br><span class="line">num2 -&gt;10</span><br><span class="line">b-&gt;abcdefghijklmnopqrstuvwxyz</span><br><span class="line">b.charAt(num2.intValue())-&gt;k</span><br><span class="line">-----------------------</span><br><span class="line">b-&gt;cdefghijklmnopqrstuvwxyzab</span><br><span class="line">b.a(String str) -&gt;g</span><br><span class="line">Integer.valueOf(b.indexOf(str))4</span><br><span class="line">a-&gt;[7, 22, 1, 16, 6, 9, 21, 0, 15, 5, 10, 18, 2, 24, 4, 11, 3, 14, 19, 12, 20, 13, 8, 25, 17, 23]</span><br><span class="line">a.get(i2)-&gt;14</span><br><span class="line">b: i -&gt;14</span><br><span class="line">a.a a(Integer num)-&gt;14</span><br><span class="line">a: a(Integer num) -&gt; [21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16]</span><br><span class="line">a:a -&gt;[21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16]</span><br><span class="line">num2 -&gt;24</span><br><span class="line">b-&gt;abcdefghijklmnopqrstuvwxyz</span><br><span class="line">b.charAt(num2.intValue())-&gt;y</span><br><span class="line">-----------------------</span><br><span class="line">b-&gt;defghijklmnopqrstuvwxyzabc</span><br><span class="line">b.a(String str) -&gt;d</span><br><span class="line">Integer.valueOf(b.indexOf(str))0</span><br><span class="line">a-&gt;[22, 1, 16, 6, 9, 21, 0, 15, 5, 10, 18, 2, 24, 4, 11, 3, 14, 19, 12, 20, 13, 8, 25, 17, 23, 7]</span><br><span class="line">a.get(i2)-&gt;6</span><br><span class="line">b: i -&gt;6</span><br><span class="line">a.a a(Integer num)-&gt;6</span><br><span class="line">a: a(Integer num) -&gt; [21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16]</span><br><span class="line">a:a -&gt;[21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16]</span><br><span class="line">num2 -&gt;9</span><br><span class="line">b-&gt;abcdefghijklmnopqrstuvwxyz</span><br><span class="line">b.charAt(num2.intValue())-&gt;j</span><br><span class="line">qkyj</span><br></pre></td></tr></table></figure><p>所以逆推的方式：</p><p>​    第一次 b = “abcdefghijklmnopqrstuvwxyz”；    之后每次都会做一次循环左移操作</p><p>​    第一次b 对应的序列[17, 23, 7, 22, 1, 16, 6, 9, 21, 0, 15, 5, 10, 18, 2, 24, 4, 11, 3, 14, 19, 12, 20, 13, 8, 25]  之后每次进行一次循环左移</p><ol><li><p>获得<code>wigwrkaugala</code>每一位在字母表中的位置</p><p>比如 w 在字符表中的位置是22， </p></li><li><p>然后在a类中的a函数获取每一位位置对应的数num</p><p>然后在[21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16] 找到22对应的数，  为8</p></li><li><p>之后将获得的数num找到a序列中第num位对应的数字</p><p>8 找到对应的数为 21</p><p>[17, 23, 7, 22, 1, 16, 6, 9, 21, 0, 15, 5, 10, 18, 2, 24, 4, 11, 3, 14, 19, 12, 20, 13, 8, 25]</p></li><li><p>将拿到后的数字在b字符串中寻找对应的数，</p><p>然后在 abcdefghijklmnopqrstuvwxyz 找到21 对应的数字为 v</p></li></ol><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>逻辑理清了 接下来写脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">b = &quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line">result = &quot;wigwrkaugala&quot;</span><br><span class="line">La = [21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16]</span><br><span class="line">Lb = [17, 23, 7, 22, 1, 16, 6, 9, 21, 0, 15, 5, 10, 18, 2, 24, 4, 11, 3, 14, 19, 12, 20, 13, 8, 25]</span><br><span class="line"></span><br><span class="line">str1 = []</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">for i in result:</span><br><span class="line">    str1.append(La[b.index(i)])</span><br><span class="line"></span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line">for i in str1:</span><br><span class="line">    str2 = Lb[i]</span><br><span class="line">    flag += b[str2]</span><br><span class="line">    b = b[1:]+ b[:1]</span><br><span class="line">    Lb.insert(len(Lb), Lb[0])</span><br><span class="line">    Lb.remove(Lb[0])</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>[8, 17, 15, 8, 22, 13, 21, 23, 15, 21, 3, 21]<br>venividivkcr</p><p>备注： 脚本 参考 西瓜西米露表姐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;攻防世界题解easyjava&quot;&gt;&lt;a href=&quot;#攻防世界题解easyjava&quot; class=&quot;headerlink&quot; title=&quot;攻防世界题解easyjava&quot;&gt;&lt;/a&gt;攻防世界题解easyjava&lt;/h2&gt;&lt;p&gt;好无聊啊，找个CTF做做，攻防世界有一栏Mo
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>小白学习--dalvik指令集</title>
    <link href="http://yoursite.com/2020/05/23/%E9%80%86%E5%90%91/%E5%9F%BA%E7%A1%80/dalvik%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <id>http://yoursite.com/2020/05/23/逆向/基础/dalvik指令集/</id>
    <published>2020-05-23T02:49:47.000Z</published>
    <updated>2020-05-23T07:44:12.021Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要写这个， 因为看的太枯燥了，自己手打一遍 加深记忆。</p><h1 id="1-dalvik-字节码"><a href="#1-dalvik-字节码" class="headerlink" title="1 dalvik 字节码"></a>1 dalvik 字节码</h1><p>在说指令集前 先简单的回忆一下dalvik字节码的相关知识。</p><h2 id="1-1-Dalvik-寄存器"><a href="#1-1-Dalvik-寄存器" class="headerlink" title="1.1 Dalvik 寄存器"></a>1.1 Dalvik 寄存器</h2><p><code>Dalvik</code>寄存器分为32位和64位，小于等于32位的使用一个寄存器标识，64位使用两个相邻寄存器标识，</p><h2 id="1-2-寄存器的命名法"><a href="#1-2-寄存器的命名法" class="headerlink" title="1.2 寄存器的命名法"></a>1.2 寄存器的命名法</h2><p>寄存器有两种命名方式：v命名法和p命名法</p><p><strong>v命名法</strong></p><p>局部变量寄存器 v0-vn 表示，参数寄存器从vn - v(n+m)</p><p>比如 在下图中，使用了v1,v2,v3,v4,v5,其中 v0,v1,v2 是局部变量，v3 和v4 是参数。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200523110407.png" alt></p><p><strong>p命名法</strong></p><p>变量寄存器 v0-vn  参数寄存器 p0-pn</p><p>p命名法比v命名法容易辨识,参数和变量采用不同的字母表示，但两者表示的含义都是一样的，没有什么区别。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200523110815.png" alt></p><h2 id="1-3-了解dex反编译工具"><a href="#1-3-了解dex反编译工具" class="headerlink" title="1.3 了解dex反编译工具"></a>1.3 了解dex反编译工具</h2><p><strong>java 文件到smali文件的过程</strong></p><p><code>.java</code>编译成<code>.class</code>在线编译成<code>.dex</code>，最后反编译成<code>smali</code>文件 </p><p><strong>class 文件打包成dex</strong></p><blockquote><p>dx –dex –output=Decrypt.dex com/xiaomutou/demo/Decrypt.class</p></blockquote><p><strong>dex文件反编译成samli文件</strong></p><blockquote><p>java -jar baksmali.jar -o smali_out/ classex.dex</p></blockquote><p><strong>smali 打包成dex</strong></p><blockquote><p>java -jar smali.jar smali_out/ -o classes.dex</p></blockquote><h2 id="1-4-Dalvik-字节码类型"><a href="#1-4-Dalvik-字节码类型" class="headerlink" title="1.4 Dalvik 字节码类型"></a>1.4 Dalvik 字节码类型</h2><p>在Dalvik中有一种描述类型的方式和Java对应，下面给出具体规则</p><table><thead><tr><th>Dalvik</th><th>Java</th></tr></thead><tbody><tr><td>B</td><td>byte</td></tr><tr><td>C</td><td>char</td></tr><tr><td>S</td><td>short</td></tr><tr><td>I</td><td>int</td></tr><tr><td>J</td><td>long</td></tr><tr><td>F</td><td>float</td></tr><tr><td>D</td><td>double</td></tr><tr><td>Z</td><td>boolean</td></tr><tr><td>V</td><td>void</td></tr><tr><td>L</td><td>Java类类型</td></tr><tr><td>[</td><td>数组类型</td></tr></tbody></table><h2 id="1-5-字段"><a href="#1-5-字段" class="headerlink" title="1.5 字段"></a>1.5 字段</h2><p>Lpackage/name/ObjectName;-&gt;FieldName:Ljava/lang/String;</p><p><strong>字段格式：类型（包名＋类名）-&gt;<em>字段名称 :**</em></strong>字段类型**</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Dalvik: </span><br><span class="line">Lcom/alipay/sdk/app/H5PayActivity;-&gt;b:Ljava/lang/String;</span><br><span class="line">Java:</span><br><span class="line">    import com.alipay.sdk.app;</span><br><span class="line"></span><br><span class="line">    public class H5PayActivity &#123;</span><br><span class="line"></span><br><span class="line">        String b;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Dalvik:</span><br><span class="line">Lcom/auth/third/accountlink/ui/WebViewActivity;-&gt;a:Z</span><br><span class="line">Java:</span><br><span class="line">import com.auth.third.accoutlink.ui;</span><br><span class="line">public class WebViewActivity&#123;</span><br><span class="line">boolean a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Dalvik:</span><br><span class="line"> Lcom/alipay/sdk/authjs/a;-&gt;m:Lorg/json/JSONObject;</span><br><span class="line">Java:</span><br><span class="line">import com.alipay.sdk.authjs;</span><br><span class="line">import org.json.JSONObject;</span><br><span class="line">public class a&#123;</span><br><span class="line">JSONObject m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子解析不知道对不对， 如果有表哥看到了欢迎指正</p><h2 id="1-6-方法"><a href="#1-6-方法" class="headerlink" title="1.6 方法"></a>1.6 方法</h2><p><strong>Lpackage/name/ObjectName;-&gt;MethodName (III) Z</strong></p><p> <strong>(III) Z:</strong>这部分表示的是方法的签名信息</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Dalvik:</span><br><span class="line">Landroid/app/Activity;-&gt;&lt;init&gt;()V</span><br><span class="line">Java:</span><br><span class="line">package andorid.app.Activity;</span><br><span class="line"></span><br><span class="line">public class Activity&#123;</span><br><span class="line">public void &lt;init&gt;()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dalvik:</span><br><span class="line">Lcom/alipay/sdk/j/h;-&gt;b()Z</span><br><span class="line">Java:</span><br><span class="line">import com.alipay.sdk.j;</span><br><span class="line">public class h&#123;</span><br><span class="line">public boolean b()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dalvik:</span><br><span class="line">Landroid/content/Intent;-&gt;getExtras()Landroid/os/Bundle;</span><br><span class="line">Java:</span><br><span class="line">import andorid.content</span><br><span class="line">public class Intent&#123;</span><br><span class="line">public Bundle getExtras()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dalvik:</span><br><span class="line">Lorg/cocos2dx/lua/LoadingAct;-&gt;setContentView(I)V</span><br><span class="line">Java:</span><br><span class="line">import org.cocos2dx.lua;</span><br><span class="line">public class LoadingAct&#123;</span><br><span class="line">public void setContentView(int p1)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子解析不知道对不对， 如果有表哥看到了欢迎指正</p><h1 id="2-Dalvik-指令集"><a href="#2-Dalvik-指令集" class="headerlink" title="2 Dalvik 指令集"></a>2 Dalvik 指令集</h1><h2 id="2-1-Dalvik-指令格式"><a href="#2-1-Dalvik-指令格式" class="headerlink" title="2.1 Dalvik 指令格式"></a>2.1 Dalvik 指令格式</h2><p>推荐一篇文章：<a href="https://www.zhihu.com/column/c_1115022200100511744" target="_blank" rel="noopener">Android 逆向笔记</a></p><p><strong>基础字节码 - 名称后缀/字节码后缀 目的寄存器</strong> <strong>源寄存</strong></p><p>move-wide/from16 vAA,vBBBB</p><p>move 为基础字节码，即opcode</p><p>wide 为名称后缀，标识指令操作的数据宽度为64位</p><p>from16 为字节码后缀 ，标识源为一个16位的寄存器引用变量</p><p>vAA 为目的寄存器，它始终在源寄存器的前面 一个A代表4位 两个A为8位 取值范围为V0-V(2^8)</p><p>vBBBB 为源寄存器， 取值 v0 - v 65535</p><h2 id="常见Dalvik-指令的使用"><a href="#常见Dalvik-指令的使用" class="headerlink" title="常见Dalvik 指令的使用"></a>常见Dalvik 指令的使用</h2><ol><li><p>空操作指令</p><p>nop  值为00 通常被用来做代码对齐，无实际操作</p></li><li><p>数据操作指令</p><p>move 作用：将源寄存器的值赋值给目的寄存器</p><p>move vA,vB ：将vB寄存器的值赋给vA寄存器，源寄存器与目的寄存器都为4位</p><p>move/form16 vAA,vBBBB：将vBBBB寄存器的值赋给vAA寄存器，源寄存器为16位，目的寄存器为8位。</p><p>move-wide vA, vB：为4位的寄存器对赋值。源寄存器与目的寄存器都为4位</p><p>move-object vA, vB：object是对象的意思，出现这个词即为对象。那这里就是为对象赋值。源寄存器与目的寄存器都为4位。</p><p>move-object/from16 vAA, vBBBB：为对象赋值。源寄存器为16位，目的寄存器为8位。</p><p>move-object/16 vAA, vBBBB：为对象赋值。源寄存器与目的寄存器都为16位。</p><p>move-result vAA：将上一个invoke类型指令操作的单字非对象结果赋给vAA寄存器。</p><p>move-result-wide vAA：将上一个invoke类型指令操作的双字非对象结果赋给vAA寄存器。</p><p>move-result-object vAA：将上一个invoke类型指令操作的对象结果赋给vAA寄存器。</p><p>move-exception vAA：保存运行时发生的异常到vAA寄存器。</p><p>move作用：</p><ol><li>赋值操作</li><li>move-result 接收方法返回值操作</li><li>处理异常的操作</li></ol></li><li><p>返回指令</p><p><strong>return</strong>就是返回的意思，大家根据这个英文就可以理解啦。</p></li></ol><p>   return-void：表示函数从一个void方法返回，返回值为空。</p><pre><code>return vAA：表示函数返回一个32位**非对象**类型的值，返回值寄存器为8位的寄存器vAA。return-wide vAA：表示函数返回一个64位**非对象**类型的值，返回值为8位的寄存器对vAA。return-object vAA：这里面出现了object,表示函数返回一个**对象**类型的值。返回值为8位的寄存器vAA。</code></pre><ol start="4"><li><p>数据定义指令</p><p><strong>数据定义指令用来定义程序中用到的常量，字符串，类等数据。</strong></p></li></ol><p>   const/4 vA, #+B：将数值符号扩展为32位后赋给寄存器vA。</p><p>   “const/16 vAA, #+BBBB：将数据符号扩展为32位后赋给寄存器vAA。这里的#+BBBB表示 0x12344等</p><p>   const vAA, #+BBBBBBBB：将数值赋给寄存器vAA。</p><p>   const/high16 vAA, #+BBBB0000“：将数值右边零扩展为32位后赋给寄存器vAA。</p><p>   const-wide/16 vAA, #+BBBB：将数值符号扩展为64位后赋给寄存器对vAA。 </p><p>   const-wide/32 vAA, #+BBBBBBBB：将数值符号扩展为64位后赋给寄存器vAA。</p><pre><code>const-wide vAA, #+BBBBBBBBBBBBBBBB：将数值赋给寄存器vAA。const-wide/high16 vAA, #+BBBB000000000000：将数值右边零扩展为64位后赋给寄存器vAA。</code></pre><p>   const-string vAA, string@BBBB：通过字符串索引构造一个字符串并赋给寄存器vAA。</p><pre><code>const-string/jumbo vAA, string@BBBBBBBB：通过字符串索引（较大）构造一个字符串并赋给寄存器vAA。const-class vAA, type@BBBB：通过类型索引获取一个类引用并赋给寄存器vAA。const-class/jumbo vAAAA, type@BBBBBBBB：通过给定的类型索引获取一个类引用并赋给寄存器vAAAA。</code></pre><p>   这条指令占用两个字节，值为0xooff（Android4.0中新增的指令）。</p><ol start="5"><li><p>实例操作指令</p><p>“check-cast vAA, type@BBBB”：check-cast v0 ,</p><p>将vAA寄存器中的对象引用转换成指定的类型。如果失败会报出ClassCastException异常。</p><p>如果类型B指定的是基本类型，对于非基本类型的A来说，运行时始终会失败。</p></li></ol><p>   “instance-of vA, vB, ”：</p><p>   判断vB寄存器中的对象引用是否可以转换成指定的类型。如果可以vA寄存器赋值为1，否则vA寄存器赋值为0。</p><p>   “new-instance vAA, type@BBBB”：</p><p>   构造一个指定类型对象的新实例，并将对象引用赋值给vAA寄存器。类型符type指定的类型不能是数组类。</p><ol start="6"><li><p>数组操作指令</p><p>数组操作包括获取数组长度，新建数组，数组赋值，数组元素取值与赋值等操作。</p></li></ol><p>   “array-length vA, vB”：</p><p>   获取给定vB寄存器中数组的长度并将值赋给vA寄存器。</p><p>   数组长度指的是数组的条目个数。</p><p>   “new-array vA, vB, type@CCCC”：</p><p>   构造指定类型（type@CCCC）与大小（vB）的数组，并将值赋给vA寄存器。</p><pre><code>“filled-new-array {vC, vD, vE, vF, vG},type@BBBB”： </code></pre><p>   构造指定类型（type@BBBB）与大小（vA）的数组并填充数组内容。vA寄存器是隐含使用的，除指定数组的大小外还指定了参数的个数，vC~vG是使用到的参数寄存序列。</p><pre><code>“filled-new-array/range {vCCCC ..vNNNN}, type@BBBB”：</code></pre><p>   指令功能与“filled-new-array {vC,vD,vE,vF,vG},type@BBBB”相同，只是参数寄存器使用range字节码后缀指定了取值范围 ，vC是第一个参数寄存器，N = A +C -1。</p><p>   fill-array-data vAA, +BBBBBBBB：</p><p>   用指定的数据来填充数组，vAA寄存器为数组引用，引用必须为基础类型的数组，在指令后面会紧跟一个数据表。</p><ol start="7"><li><p><em>异常指令</em></p><p>“throw vAA” : 抛出vAA寄存器中指定类型的异常。</p></li><li><p><strong>跳转指令(重点)</strong></p><p>跳转指令用于从当前地址跳转到指定的偏移处。</p><p><strong>Dalvik**</strong>指令集中有三种跳转指令**：</p><ol><li><p>goto：无条件跳转</p></li><li><p>switch：分支跳转</p><p>​    packed-switch：有规律跳转</p><p>​    sparse-switch: 无规律跳转</p><ol start="3"><li>if：条件跳转    </li></ol></li></ol><p>​    if-eq：等于<strong>/</strong>if-ne：不等于</p><p>​    if-lt：小于<strong>/</strong>if-le：小于等于</p><p>​    if-gt：大于<strong>/</strong>if-ge：大于等于</p><p>​    if-eqz：等于0<strong>/</strong>if-nez：不等于0</p><p>​    if-ltz：小于0<strong>/</strong>if-lez：小于等于0</p><p>​    if-gtz：大于0<strong>/</strong>if-gez：大于等于0</p></li><li><p>比较指令(cmp)</p><p> <strong>比较指令用于对两个寄存器的值（浮点型或长整型）进行比较。</strong></p><p> <strong>大于(1)/等于(0)/小于(-1)=&gt;cmpg、cmp</strong></p><p> <strong>大于(-1)/等于(0)/小于(1)=&gt;cmpl</strong></p></li></ol><pre><code>例如：cmp-long vAA, vBB, vCC</code></pre><p>   ​    比较两个长整型数。如果vBB寄存器大于vCC寄存器，则结果为1，相等则结果为0，小则结果为-1。</p><pre><code>例如：cmpl-float vAA, vBB, vCC</code></pre><p>   ​      比较两个单精度浮点数。如果vBB寄存器大于vCC寄存器，结果为-1，相等则结果为0，小于的话结果为1。</p><pre><code>例如：cmpl-double vAA, vBB, vCC</code></pre><p>   ​    比较两个单精度浮点数。如果vBB寄存器大于vCC寄存器，结果为-1，相等则结果为0，小于的话结果为1。</p><pre><code>例如：cmpg-float vAA, vBB, vCC  比较两个单精度浮点数。如果vBB寄存器大于vCC寄存器，结果为-1，相等则结果为0，小于的话结果为1。</code></pre><p>   例如：cmpg-double vAA, vBB, vCC</p><p>   ​    比较两个单精度浮点数。如果vBB寄存器大于vCC寄存器，结果为-1，相等则结果为0，小于的话结果为1。</p><ol start="10"><li><p>字段操作指令</p><p> 普通字段 =&gt; iget读 / iput 写</p><p> 静态字段 =&gt; sget读 / sput 写</p></li><li><p>方法调用指令(重点)</p><p><strong>根据方法类型不同，共有5条方法调用指令</strong></p></li></ol><pre><code>invoke-virtual ：调用实例的虚方法invoke-super ：调用实例的父类/基类方法invoke-direct ：调用实例的直接方法invoke-static ：调用实例的静态方法invoke-interface ：调用实例的接口方法</code></pre><ol start="12"><li><p>数据转换指令</p><p><strong>数据转换指令用于将一种类型的数值转换成另一种类型。</strong></p><p><strong>它的格式为“opcode vA, vB”，vB寄存器存放需要转换的数据，转换后的结果保存在vA寄存器中。</strong></p></li></ol><pre><code>neg-数据类型 **=&gt;** 求补not-数据类型 **=&gt;** 求反数据类型1-to-数据类型2 **=&gt;** 将数据类型1转换为数据类型2</code></pre><ol start="13"><li><p>数据运算指令</p><p> add/sub/mul/div/rem  加/减/乘/除/模</p><p> and/or/xor 与/或/异或</p><p> shl/shr/ushr  有符号左移/有符号右移/无符号右移</p></li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/dd864140130/article/details/52076515" target="_blank" rel="noopener">深入理解Dalvik字节码指令及Smali文件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为什么要写这个， 因为看的太枯燥了，自己手打一遍 加深记忆。&lt;/p&gt;
&lt;h1 id=&quot;1-dalvik-字节码&quot;&gt;&lt;a href=&quot;#1-dalvik-字节码&quot; class=&quot;headerlink&quot; title=&quot;1 dalvik 字节码&quot;&gt;&lt;/a&gt;1 dalvik 字节码
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>人人登录协议分析</title>
    <link href="http://yoursite.com/2020/05/18/%E9%80%86%E5%90%91/%E5%8D%8F%E8%AE%AE/%E4%BA%BA%E4%BA%BA%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/05/18/逆向/协议/人人协议/</id>
    <published>2020-05-18T03:50:05.000Z</published>
    <updated>2020-05-18T04:01:53.682Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0efc73316eb7c057cc7358d58a17abbb25126771122162f5d1506b26185b107b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>shuqi小说去除签名校验</title>
    <link href="http://yoursite.com/2020/05/02/%E9%80%86%E5%90%91/%E7%A0%B4%E8%A7%A3/xx%E5%B0%8F%E8%AF%B4%E5%8E%BB%E9%99%A4%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C/"/>
    <id>http://yoursite.com/2020/05/02/逆向/破解/xx小说去除签名校验/</id>
    <published>2020-05-02T04:40:21.000Z</published>
    <updated>2020-05-02T04:46:27.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="书旗小说去除签名校验"><a href="#书旗小说去除签名校验" class="headerlink" title="书旗小说去除签名校验"></a>书旗小说去除签名校验</h1><h1 id="shuqi小说去除签名校验"><a href="#shuqi小说去除签名校验" class="headerlink" title="shuqi小说去除签名校验"></a>shuqi小说去除签名校验</h1><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>andorid killer 、 jadx 、雷电模拟器</p><h2 id="去除过程"><a href="#去除过程" class="headerlink" title="去除过程"></a>去除过程</h2><ol><li><p>老规矩，重签名打包 顺便打开ddms 随时关注报错信息</p><p>发现打开了activity 之后就自动关闭了，这里呢就考虑到了入口页面和入口点， apk进行到了入口页面处了，之后才关闭，那就不需要动态调试了，定位到oncreate处</p></li><li><p>关键字搜索（尝试新方法搜索）</p><p>先换个思路，这里试试关键字搜索，看能找到有用的信息不：方法是逐个加log输出，看看那个调用后就崩溃了</p><p>打开android killer 搜索Signatures，然后逐个加log ，很多明显不是自己的可以忽略</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200502095534676.png" alt></p></li><li><p>之后编译 安装，ddms捕获消息</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200502104723497.png" alt></p></li><li><p>回到andoridkiller中搜索这个字符串</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200502104737122.png" alt></p></li><li><p>看到了签名三兄弟出没，那么这块肯定有签名了，</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200502104944334.png" alt></p></li><li><p>这里就很明显了，看到了killprocess，绕过方式： 使得if判断为真，将eq改为ne 成功绕过</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200502105402616.png" alt></p></li><li><p>成功绕过签名校验</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;书旗小说去除签名校验&quot;&gt;&lt;a href=&quot;#书旗小说去除签名校验&quot; class=&quot;headerlink&quot; title=&quot;书旗小说去除签名校验&quot;&gt;&lt;/a&gt;书旗小说去除签名校验&lt;/h1&gt;&lt;h1 id=&quot;shuqi小说去除签名校验&quot;&gt;&lt;a href=&quot;#shuqi小说去
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="破解" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>霸哥磁力搜索去签名校验</title>
    <link href="http://yoursite.com/2020/05/01/%E9%80%86%E5%90%91/%E7%A0%B4%E8%A7%A3/%E9%9C%B8%E5%93%A5%E7%A3%81%E5%8A%9B%E6%90%9C%E7%B4%A2%E5%8E%BB%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C/"/>
    <id>http://yoursite.com/2020/05/01/逆向/破解/霸哥磁力搜索去签名校验/</id>
    <published>2020-05-01T12:49:25.000Z</published>
    <updated>2020-05-01T13:12:45.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="案例1-霸哥磁力搜索"><a href="#案例1-霸哥磁力搜索" class="headerlink" title="案例1 霸哥磁力搜索"></a>案例1 霸哥磁力搜索</h2><p>首先 签名校验不止一个，所以会经历无数次安装， </p><ol><li><p>重签名打包，安装查看是否有签名校验（这里可以通过启动界面返回的信息查看）</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501192911937.png" alt></p></li></ol><p>   安装 如果有检测 进入第二步</p><p>   比如 下面的情况</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501193008226.png" alt></p><ol start="2"><li><p>检测是否有加固 </p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501193159772.png" alt></p><p>有加固进入第三步</p><p>没有加固进入第四步</p></li><li><p>有加固 ，先脱壳修复</p></li><li><p>查看处理的地方，干掉存在签名校验的地方</p><p>ok 接下来分析他在哪校验的</p><p>工具的话： andorid killer 、 jadx 、ida、ddms</p></li></ol><p>   先看看刚才程序崩溃是什么情况导致的</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501193504305.png" alt></p><p>   使用android killer 加载apk，同时使用jadx 加载，配合查看函数</p><p>   根据崩溃原因，判断检测应该是在刚开始打开apk就执行的，所以第一步找到MainActivity.smail</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501193941917.png" alt></p><p>   接下来逐个阅读逻辑，配合jadx 查看方法是否有检测校验，（存在getPackageManager、PackageManager、getPackageInfo称为签名三兄弟，如果出现这三个函数就肯定有签名校验 ）</p><p>   发现存在方法</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501194338764.png" alt></p><p>   在qian()方法中找到熟悉的内容 刚刚我提到的签名三兄弟</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501194550120.png" alt></p><p>   绕过方法： 注释</p><p>   回到刚才调用的位置 </p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501194636111.png" alt></p><p>   打包签名安装，之后测试（记得 保存）</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501194832345.png" alt></p><p>   发现崩溃在了JNI_onload处  调用了libbug.so 那么猜测这里可能存在so层的校验,找一下是否有这个调用so的操作</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501195203094.png" alt></p><p>   继续往下看的时候发现有个调用bug()的方法，找不到bug方法的函数</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501195231400.png" alt></p><p>   看到这个就知道方法定义在so层，将so文件拖入ida中，先看看jni_onload 发现没有，那么就是静态注册了，</p><p>   找找Java下划线开头的方法，只有一个Java_ xxx _bug 那么肯定就是这个了</p><p>   大概意思就是在搜索前会获取一个sign值，之后返回结果，跟进getSignHashCode 看看</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501195549371.png" alt></p><p>   这个是getSignHashCode  方法的内容， 看到了三兄弟那就没跑了，这里还存在一个校验。最后会判断一个result的值，然后如果判断成功 也就是result 不等于226776851 就会exit(0) 退出</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501195758064.png" alt></p><p>   绕过方法： 使得判断为假，或者使得exit（0）不执行 将判断改成不等于</p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501201706668.png" alt></p><p>   之后保存即可 保存方式：edit-&gt;patch program-&gt; apply patches to input file…    </p><p>   ok 修改成功。                             </p><p>   <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/image-20200501203303590.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;案例1-霸哥磁力搜索&quot;&gt;&lt;a href=&quot;#案例1-霸哥磁力搜索&quot; class=&quot;headerlink&quot; title=&quot;案例1 霸哥磁力搜索&quot;&gt;&lt;/a&gt;案例1 霸哥磁力搜索&lt;/h2&gt;&lt;p&gt;首先 签名校验不止一个，所以会经历无数次安装， &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="破解" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>去某游戏app广告</title>
    <link href="http://yoursite.com/2020/03/31/%E9%80%86%E5%90%91/%E7%A0%B4%E8%A7%A3/%E5%8E%BB%E6%9F%90app%E5%B9%BF%E5%91%8A/"/>
    <id>http://yoursite.com/2020/03/31/逆向/破解/去某app广告/</id>
    <published>2020-03-31T09:26:02.000Z</published>
    <updated>2020-03-31T09:26:30.877Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8a49624645a5cb3a88b7490e76249b72d6169278a32a2507d3688eeeccd9b063"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="破解" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Android-androideasy</title>
    <link href="http://yoursite.com/2020/03/25/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/androideasy/"/>
    <id>http://yoursite.com/2020/03/25/CTF/攻防世界/androideasy/</id>
    <published>2020-03-25T08:35:34.000Z</published>
    <updated>2020-05-28T09:23:36.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目：androideasy"><a href="#题目：androideasy" class="headerlink" title="题目：androideasy"></a>题目：androideasy</h1><p>最近刚学了点逆向技能，找一些简单的ctf 题目来验证一下效果</p><p>下载地址：<a href="https://github.com/ThunderJie/CTF-Practice/tree/master/CTF-Andorid%20Reverse/androideasy" target="_blank" rel="noopener">androideasy</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先拿到的是个zip文件，打开是个普通的apk目录</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/2/image-20200325160159860.png" alt></p><p>也不知道做逆向的和做安全的看到他的感觉是否一样，</p><p>修改后缀为<code>apk</code> 后扔到jadx中，然后在往模拟器中扔一份</p><p>模拟器中可以看到 很简单的功能，输入字符 。点击check 判断是否输入正确</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/2/image-20200325160654280.png" alt></p><p>之后查看jadx</p><p>大概确定一下，就是需要输入一个字符串在check判断通过即可</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/2/image-20200325160744208.png" alt></p><p>定位到check，输入的字符串必须让if判断为真，也就是进入到check的true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private byte[] f21s = &#123;113, 123, 118, 112, 108, 94, 99, 72, 38, 68, 72, 87, 89, 72, 36, 118, 100, 78, 72, 87, 121, 83, 101, 39, 62, 94, 62, 38, 107, 115, 106&#125;;</span><br><span class="line"></span><br><span class="line">public boolean check() &#123;</span><br><span class="line">        byte[] chars = this.editText.getText().toString().getBytes();</span><br><span class="line">        if (chars.length != this.f21s.length) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int i = 0;</span><br><span class="line">        while (i &lt; this.f21s.length &amp;&amp; i &lt; chars.length) &#123;</span><br><span class="line">            if (this.f21s[i] != (chars[i] ^ 23)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来写firda 代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function flag() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var flag1 = Java.use(&quot;com.a.sample.androidtest.MainActivity&quot;);</span><br><span class="line">        flag1.check.implementation = function () &#123;</span><br><span class="line">             var retval = this.check();</span><br><span class="line">             console.log(retval)</span><br><span class="line">             return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function main() &#123;</span><br><span class="line">    flag()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p>这样就可以保证返回为真了</p><p>回到正题，前台返回为真对flag没有帮助，</p><p>所以还是得得到<code>f21s</code> ,写个脚本 获得下面的字符串</p><p><code>private byte[] f21s = {113, 123, 118, 112, 108, 94, 99, 72, 38, 68, 72, 87, 89, 72, 36, 118, 100, 78, 72, 87, 121, 83, 101, 39, 62, 94, 62, 38, 107, 115, 106};</code></p><p>最后的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f21s = [<span class="number">113</span>, <span class="number">123</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">108</span>, <span class="number">94</span>, <span class="number">99</span>, <span class="number">72</span>, <span class="number">38</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">87</span>, <span class="number">89</span>, <span class="number">72</span>, <span class="number">36</span>, <span class="number">118</span>, <span class="number">100</span>, <span class="number">78</span>, <span class="number">72</span>, <span class="number">87</span>, <span class="number">121</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">39</span>, <span class="number">62</span>, <span class="number">94</span>, <span class="number">62</span>, <span class="number">38</span>, <span class="number">107</span>, <span class="number">115</span>, <span class="number">106</span>]</span><br><span class="line">print(len(f21s))</span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> range(<span class="number">0</span>,len(f21s)):  <span class="comment"># 判断每一位，一共判断f21s 长度次</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">if</span> (f21s[i] == (j ^ <span class="number">23</span>)):</span><br><span class="line">            flag += chr(j)</span><br><span class="line"></span><br><span class="line">print(flag)py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">31</span><br><span class="line">flag&#123;It_1S_@N_3asY_@nDr0)I)1|d&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目：androideasy&quot;&gt;&lt;a href=&quot;#题目：androideasy&quot; class=&quot;headerlink&quot; title=&quot;题目：androideasy&quot;&gt;&lt;/a&gt;题目：androideasy&lt;/h1&gt;&lt;p&gt;最近刚学了点逆向技能，找一些简单的ctf 题
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/03/24/%E9%80%86%E5%90%91/XposedFridaHook%E7%B3%BB%E5%88%97/Hook%E5%BC%80%E5%A7%8B/"/>
    <id>http://yoursite.com/2020/03/24/逆向/XposedFridaHook系列/Hook开始/</id>
    <published>2020-03-24T12:19:59.397Z</published>
    <updated>2020-03-30T06:30:40.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hook-通杀"><a href="#Hook-通杀" class="headerlink" title="Hook 通杀"></a>Hook 通杀</h1><h2 id="Hook-普通方法和修改函数参数返回值"><a href="#Hook-普通方法和修改函数参数返回值" class="headerlink" title="Hook 普通方法和修改函数参数返回值"></a>Hook 普通方法和修改函数参数返回值</h2><p>fradaserver 是手机端的，</p><ol><li>android低版本 frida 尽量低版本</li><li>fridaserver版本要与frida库版本一致</li><li>不同平台用不同fridaserver</li><li>不要和xposed装一起，新疆模拟器，刷机</li></ol><p>设备要求:</p><p>​    root</p><pre><code>调试</code></pre><p>下载frida-server push到手机中 (注意查看手机是86的还是64的)</p><p><code>adb push .\frida-server-12.8.14-android-x86 /data/local/tmp/fsx86</code></p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200319214805400.png" alt="image-20200319214805400"></p><p>之后cd到tmp目录下</p><p>先给fsx86 赋权  <code>chmod 777 fsx86</code></p><p>之后执行即可。 <code>./fsx86</code></p><p>执行后有一个报错，这里是版本出现的问题，会有一些小bug ，不影响使用，最好还是在真机中调试</p><p><code>WARNING: linker: ./fsx86: unused DT entry: type 0x6ffffef5 arg 0x1c24</code></p><h2 id="插入一个学习"><a href="#插入一个学习" class="headerlink" title="插入一个学习"></a>插入一个学习</h2><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200320103048870.png" alt="image-20200320103048870"></p><p>Hook 构造方法</p><p>​    绕过一些验证</p><p>​    构造方法</p><p>​    <code>money.$init.implementation = function(){}</code></p><p>Hook 重载方法</p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200320105658343.png" alt="image-20200320105658343"></p><p>Hook 重载方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function hooktest2() &#123;</span><br><span class="line">    //Error: test(): has more than one overload, use .overload(&lt;signature&gt;)</span><br><span class="line">    var utils = Java.use(&quot;com.xiaojianbang.app.Utils&quot;);</span><br><span class="line">    utils.test.overload(&apos;int&apos;).implementation = function (a) &#123;</span><br><span class="line">        a = 888;</span><br><span class="line">        var retval = this.test();</span><br><span class="line">        console.log(a, retval);</span><br><span class="line">        return retval;</span><br><span class="line">    &#125;;</span><br><span class="line">    utils.test.overload().implementation = function () &#123;</span><br><span class="line">        var retval = this.test();</span><br><span class="line">        console.log(retval);</span><br><span class="line">        return retval;</span><br><span class="line">    &#125;;</span><br><span class="line">    utils.test.overload(&apos;com.xiaojianbang.app.Money&apos;).implementation = function (a) &#123;</span><br><span class="line">        var retval = this.test(a);</span><br><span class="line">        console.log(retval);</span><br><span class="line">        return retval;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hook 所有重载方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function hookTest3() &#123;</span><br><span class="line">    // hook 方法的所有重载</span><br><span class="line">    var utils = Java.use(&quot;com.xiaojianbang.app.Utils&quot;);</span><br><span class="line">    console.log(utils.test.overloads.length);</span><br><span class="line">    for (var i = 0; i &lt; utils.test.overloads.length; i++) &#123;</span><br><span class="line">        utils.test.overloads[i].implementation = function () &#123;</span><br><span class="line">            // console.log(JSON.stringify(arguments));</span><br><span class="line"></span><br><span class="line">            if (arguments.length == 0) &#123;</span><br><span class="line">                return &quot;调用没有参数的&quot;;</span><br><span class="line">            &#125; else if (arguments.length == 1)&#123;</span><br><span class="line">                if (JSON.stringify(arguments).indexOf(&quot;Money&quot;) != -1)&#123;</span><br><span class="line">                    return &quot;调用了Money参数的&quot;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    return &quot;调用了Int 类型的&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">                arguments[0] = 1000;</span><br><span class="line">            // console.log(arguments.length);</span><br><span class="line">            // apply 改变所属</span><br><span class="line">            return this.test.apply(this, arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hook 构造参数与对象实例化</p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200321172539738.png" alt="image-20200321172539738"></p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200321173626852.png" alt="image-20200321173626852"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function hooktest2() &#123;</span><br><span class="line">    //Error: test(): has more than one overload, use .overload(&lt;signature&gt;)</span><br><span class="line">    var utils = Java.use(&quot;com.xiaojianbang.app.Utils&quot;);</span><br><span class="line">    var money = Java.use(&quot;com.xiaojianbang.app.Money&quot;);</span><br><span class="line"></span><br><span class="line">    utils.test.overload(&apos;int&apos;).implementation = function (a) &#123;</span><br><span class="line">        a = 888;</span><br><span class="line">        var retval = this.test(money.$new(&quot;日元&quot;, 1000000)); // 对象实例化</span><br><span class="line">        console.log(a, retval);</span><br><span class="line">        return retval;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>hook 实例化</p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200321174929718.png" alt="image-20200321174929718"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function hookTest5() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        //静态字段的修改</span><br><span class="line">        var money = Java.use(&quot;com.xiaojianbang.app.Money&quot;);</span><br><span class="line">        //send(JSON.stringify(money.flag));</span><br><span class="line">        money.flag.value = &quot;ceshi&quot;;</span><br><span class="line">        console.log(&apos;log&apos;, money.flag.value);</span><br><span class="line">        // 非静态字段的修改</span><br><span class="line">        Java.choose(&quot;com.xiaojianbang.app.Money&quot;, &#123;</span><br><span class="line">            onMatch: function (obj) &#123;</span><br><span class="line">                obj._name.value = &quot;ouyuan&quot;; // 字段与函数名相同， 前面加下划线</span><br><span class="line">                obj.num.value = 15254131;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 获取所有的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function hookTest7() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch:function (name,handle) &#123;</span><br><span class="line">                if (name.indexOf(&quot;com.xiaojianbang.app&quot;) != -1)&#123;</span><br><span class="line">                    console.log(name);</span><br><span class="line">                    var clazz = Java.use(name);</span><br><span class="line">                    var methods = clazz.class.getDeclaredMethods();</span><br><span class="line">                    console.log(methods)</span><br><span class="line">                    for (var i = 0 ; i&lt; methods.length;i++)&#123;</span><br><span class="line">                        console.log(methods[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete:function () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var classes = Java.enumerateLoadedClassesSync();</span><br><span class="line">for (var i = 0 ; i &lt; classes.length ; i++)&#123;</span><br><span class="line">    if (classes[i].indexOf(&quot;com.xiaojianbang.app&quot;) != -1)&#123;</span><br><span class="line">        console.log(classes[i]);</span><br><span class="line">        var clazz = Java.use(classes[i]);</span><br><span class="line">        var methods = clazz.class.getDeclaredMethods();</span><br><span class="line">        for (var j = 0 ;j &lt; methods.length ;j++)&#123;</span><br><span class="line">            console.log(methods[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-回笼重造"><a href="#Hook-回笼重造" class="headerlink" title="Hook 回笼重造"></a>Hook 回笼重造</h1><img src="E:\博客\andorid逆向\Frida学习\Hook开始.assets\image-20200324171350015.png" alt="image-20200324171350015" style="zoom:50%;"><blockquote><p>xposed 框架替换了很多文件，如果要从xposed转frida 需要刷机</p></blockquote><p>修改debuggable 参考：<a href="https://www.bodkin.ren/index.php/archives/533/" target="_blank" rel="noopener">https://www.bodkin.ren/index.php/archives/533/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[Go0s]: ~/Security/_Tools/Android/mprop/armeabi-v7a ✗ master*</span><br><span class="line">➜  adb push mprop /data/local/tmp              </span><br><span class="line">mprop: 1 file pushed. 1.6 MB/s (17712 bytes in 0.011s)</span><br><span class="line">[Go0s]: ~ </span><br><span class="line">➜  adb shell</span><br><span class="line">shell@hammerhead:/ $ cat default.prop | grep debug                             </span><br><span class="line">ro.debuggable=0</span><br><span class="line">shell@hammerhead:/ $ getprop ro.debuggable</span><br><span class="line">0</span><br><span class="line">shell@hammerhead:/ $ cd /data/local/tmp</span><br><span class="line">shell@hammerhead:/data/local/tmp $ su</span><br><span class="line">root@hammerhead:/data/local/tmp # ./mprop ro.debuggable 1   </span><br><span class="line">properties map area: b6f7a000-b6f9a000</span><br><span class="line">00000000  08 8d 00 00 19 01 00 00 50 52 4f 50 ab d0 6e fc  ........PROP??n?</span><br><span class="line">00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">……</span><br><span class="line">root@hammerhead:/ # cat default.prop | grep debug                              </span><br><span class="line">ro.debuggable=0</span><br><span class="line">root@hammerhead:/ # getprop ro.debuggable                                      </span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>版本太高导致的问题，问题不会大</p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200324192712444.png" alt="image-20200324192712444"></p><p>配置代码提示</p><figure class="highlight plain"><figcaption><span>i @types/frida-gum```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook步骤</span><br><span class="line"></span><br><span class="line">1. 进入手机终端 启动 fsx86</span><br><span class="line">2. 端口转发</span><br><span class="line">3. 使用命令开始hook吧 `frida -U 包名 -l hook代码`</span><br><span class="line"></span><br><span class="line">### 逻辑分析</span><br><span class="line"></span><br><span class="line">要hook getCalc 方法，定位到函数声明</span><br><span class="line"></span><br><span class="line">![image-20200324201846328](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324201846328.png)</span><br><span class="line"></span><br><span class="line">定位到getCalc  方法有两个参数 a,b </span><br><span class="line"></span><br><span class="line">![image-20200324201919870](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324201919870.png)</span><br><span class="line"></span><br><span class="line">### Hook普通方法</span><br><span class="line"></span><br><span class="line">接下来根据这个函数开始hook</span><br><span class="line"></span><br><span class="line">​`var utils = Java.use(&quot;com.xiaojianbang.app.Utils&quot;);` 定位函数</span><br><span class="line"></span><br><span class="line">​重写方法 implementation</span><br></pre></td></tr></table></figure><p>var utils = Java.use(“com.xiaojianbang.app.Utils”);<br>utils.getCalc.implementation = function (a,b) { // implementation 是重写方法， js中不需要函数类型<br>    // 先打印一下a,b 参数和返回的参数<br>    var retval = this.getCalc(a,b); </p><pre><code>console.log(a,b,retval);return retval;</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​点击普通方法，即可在frida中看到获取的参数</span><br><span class="line"></span><br><span class="line">![image-20200324202244461](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324202244461.png)</span><br><span class="line"></span><br><span class="line">之后修改a ，b 参数</span><br></pre></td></tr></table></figure><p>var utils = Java.use(“com.xiaojianbang.app.Utils”);<br>utils.getCalc.implementation = function (a,b) { // implementation 是重写方法， js中不需要函数类型<br>    a = 123;<br>    b = 345;</p><pre><code>var retval = this.getCalc(a,b);console.log(a,b,retval);return retval;</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20200324203353529](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324203353529.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Hook 重载方法和重载方法的Hook</span><br><span class="line"></span><br><span class="line">重载方法和一般普通方法区别不大</span><br><span class="line"></span><br><span class="line">![image-20200324205305292](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324205305292.png)</span><br><span class="line"></span><br><span class="line">当使用之前的方法 去hook重载方法</span><br><span class="line"></span><br><span class="line">![image-20200324205229878](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324205229878.png)</span><br><span class="line"></span><br><span class="line">需要使用overload 去指定参数</span><br></pre></td></tr></table></figure><pre><code>utils.test.overload(&apos;int&apos;).implementation = function (a, b) { // implementation 是重写方法， js中不需要函数类型</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">最后hook所有的重载方法</span><br><span class="line"></span><br><span class="line">只要符合返回值，可以随意改的，即使调用其他的重载函数也是可以执行</span><br></pre></td></tr></table></figure><p>utils.test.overload(‘int’).implementation = function (a) { // implementation 是重写方法， js中不需要函数类型<br>    a = 888888888;<br>    var retval = this.test(a);<br>    console.log(a, retval);<br>    return retval;<br>};<br>utils.test.overload().implementation = function () {<br>    var retval = this.test();<br>    console.log(“无参：”,retval);<br>    return retval;<br>};<br>utils.test.overload(“com.xiaojianbang.app.Money”).implementation = function (a) {<br>    var retval = this.test(a);<br>    console.log(a,retval);<br>    return retval;<br>};</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Hook所有重载函数</span><br></pre></td></tr></table></figure><p>for (var i = 0 ;i &lt; utils.test.overloads.length;i++){ // 通过for 循环去获取每一个<br>    utils.test.overloads[i].implementation = function () {<br>        console.log(arguments); // arguments 是一个数组<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通过apply 可以避免每次返回需要改变返回参数的问题</span><br></pre></td></tr></table></figure><p>this.test.apply(this,arguments) // apply 是改变函数所属</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;  在frida 中，在同位置下多个钩子 最后一个会生效，因为他的代码会覆盖之前的代码。</span><br><span class="line"></span><br><span class="line">返回hook每个重载函数 参数长度</span><br></pre></td></tr></table></figure><p>function hookTest3() {<br>    // hook方法的所有重载<br>    var utils = Java.use(“com.xiaojianbang.app.Utils”);<br>    console.log(utils.test.overloads.length)<br>    // 之后遍历参数<br>    for (var i = 0 ;i &lt; utils.test.overloads.length;i++){<br>        utils.test.overloads[i].implementation = function () {<br>            //console.log(arguments);</p><pre><code>        return this.test.apply(this,arguments) // apply 是改变函数所属    }}</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">返回结果</span><br><span class="line"></span><br><span class="line">![](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324213234513.png)</span><br><span class="line"></span><br><span class="line">如果需要修改其中的某个重载函数 则需要在这里做一个判断</span><br></pre></td></tr></table></figure><p>if (arguments.length == 0){<br>    return “xiaojianbang”;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook 完整代码</span><br></pre></td></tr></table></figure><p>function hookTest3() {<br>    // hook方法的所有重载<br>    var utils = Java.use(“com.xiaojianbang.app.Utils”);<br>    console.log(utils.test.overloads.length)<br>    // 之后遍历参数<br>    for (var i = 0 ;i &lt; utils.test.overloads.length;i++){<br>        utils.test.overloads[i].implementation = function () {<br>            //console.log(arguments);<br>            if (arguments.length == 0){<br>                return “xiaojianbang”;<br>            }else if (arguments.length ==  1){<br>                if (JSON.stringify(arguments).indexOf(“Money”) != -1 ){<br>                    return “调用了Money参数”;<br>                } else{<br>                    return “ 调用了int参数的”;<br>                }<br>            }<br>            return this.test.apply(this,arguments) // apply 是改变函数所属<br>        }<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Hook 构造函数与对象实例化</span><br><span class="line"></span><br><span class="line">这里的`Money` 是我们的构造函数 函数与类型一致 </span><br><span class="line"></span><br><span class="line">![image-20200324215249350](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324215249350.png)</span><br><span class="line"></span><br><span class="line">也需要指明</span><br><span class="line"></span><br><span class="line">![image-20200324215639928](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324215639928.png)</span><br><span class="line"></span><br><span class="line">构造函数和重载只是多了个 $init</span><br></pre></td></tr></table></figure><p>function hookTest4() {<br>    var money = Java.use(“com.xiaojianbang.app.Money”);<br>    // 函数名与方法名一致<br>    money.$init.overload(‘java.lang.String’,’int’).implementation = function (str,num) {<br>        console.log(str,num);<br>        this.$init(str,num);<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在上一节重载函数，我们调用了money ，但是当我们要修改其中的值时 需要调用money的包</span><br><span class="line"></span><br><span class="line">![image-20200324220110549](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324220110549.png)</span><br><span class="line"></span><br><span class="line">在函数开始位置添加</span><br><span class="line"></span><br><span class="line">![image-20200324220151168](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324220151168.png)</span><br><span class="line"></span><br><span class="line">这就完成了一个实例化</span><br><span class="line"></span><br><span class="line">![image-20200324220241983](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324220241983.png)</span><br><span class="line"></span><br><span class="line">## 修改类的字段</span><br><span class="line"></span><br><span class="line">先尝试hook一下静态资源</span><br></pre></td></tr></table></figure><p>var money = Java.use(“com.xiaojianbang.app.Money”);<br>//send(money.flag)<br>console.log(JSON.stringify(money.flag.value));</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 多个对象就会有多个字段，所以要修改 必须找到对应的字段</span><br><span class="line"></span><br><span class="line">修改字段</span><br></pre></td></tr></table></figure><p>// 静态字段<br>var money = Java.use(“com.xiaojianbang.app.Money”);<br>//send(money.flag)<br>money.flag.value = “xiaojianbang”;</p><p>console.log(JSON.stringify(money.flag.value));</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hook 修改非静态字段</span><br><span class="line"></span><br><span class="line">&gt; 正常的每次修改都会new一个对象，所以看不到返回的值</span><br><span class="line"></span><br><span class="line">![image-20200324222948009](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324222948009.png)</span><br></pre></td></tr></table></figure><p>Java.choose(“com.xiaojianbang.app.Money”, {<br>    onMatch: function (obj) { // 每次遍历对象都会调用一次onMatch<br>        // 修改对象参数，如果修改单个 价格判断即可<br>        obj._name.value = “ouyuan”; // 这块注意字段名与函数名是否相同<br>        obj.num.value = 15000000;<br>    },<br>    onComplete: function () {</p><pre><code>}</code></pre><p>});  // cakkbacks指的是对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 这块注意 当字段名与函数名相同 要加`_`来区分</span><br><span class="line"></span><br><span class="line">## hook 内部类和匿名类</span><br><span class="line"></span><br><span class="line">当hook 类下的类 hook方法</span><br><span class="line"></span><br><span class="line">可以通过jeb smail 去看 </span><br><span class="line"></span><br><span class="line">![image-20200324230631123](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324230631123.png)</span><br><span class="line"></span><br><span class="line">money 只是一个父类，匿名类是getInfo 这里实现了一次， 匿名类一般都是$1 这种形式</span><br><span class="line"></span><br><span class="line">![image-20200324231541211](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324231541211.png)</span><br><span class="line"></span><br><span class="line">## 枚举所有的类和所有的方法</span><br></pre></td></tr></table></figure><p>Java.enumerateLoadedClasses() //枚举类 只能加载 已经被加载的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java反射获取方法</span><br></pre></td></tr></table></figure><p>var methods = clazz.class.getDeclaredMethods();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">获取所有的类</span><br></pre></td></tr></table></figure><p>Java.enumerateLoadedClasses({<br>    onMatch:function (name,handle) { // 代码都是写在这里的<br>        if (name.indexOf(“com.xiaojianbang.app”) != -1){<br>            console.log(name)<br>        }<br>    },<br>    onComplete:function () { // 这里只会使用一次</p><pre><code>}</code></pre><p>})</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">获取类下的方法</span><br></pre></td></tr></table></figure><p> Java.enumerateLoadedClasses({<br>            onMatch:function (name,handle) { // 代码都是写在这里的<br>                if (name.indexOf(“com.xiaojianbang.app”) != -1){<br>                    console.log(name) // 类和地址  打印好多系统类，这里就要做个过滤<br>                    // 遍历类下的所有的方法 java 反射 有个getDeclaredMethods<br>                    var clazz = Java.use(name);<br>                    console.log(clazz);<br>                    var methods = clazz.class.getDeclaredMethods(); // 得到的是一个对象，这里要通过class转<br>                    //console.log(methods);  // 直接打印输出较乱 做一个整理</p><pre><code>            if (var i = 0; i &lt; methods[i].length;i++){                console.log(methods[i]);            }            console.log()        }    },    onComplete:function () { // 这里只会使用一次    }})</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">异步方式获取类和类的方法</span><br></pre></td></tr></table></figure><p>var classes = Java.enumerateLoadedClassesSync();<br>for (var i = 0; i &lt; classes.length; i++) {<br>    if (classes[i].indexOf(“com.xiaojianbang.app”) != -1) {<br>        console.log(classes[i]);<br>        var clazz = Java.use(classes[i]);<br>        var methods = clazz.class.getDeclaredMethods();<br>        for (var j = 0; j &lt; methods.length; j++) {<br>            console.log(methods[j]);<br>        }<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## hook类的所有方法</span><br><span class="line"></span><br><span class="line">首先确定hook那个类， 比如md5，之后通过java反射 获取类下的方法</span><br></pre></td></tr></table></figure><p>var md5 = Java.use(“com.xiaojianbang.app.MD5”);<br>var methods= md5.class.getDeclaredMethods();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">之后通过循环返回打印</span><br></pre></td></tr></table></figure><p>function hookTest8() {<br>    Java.perform(function () {<br>        var md5 = Java.use(“com.xiaojianbang.app.MD5”);<br>        var methods = md5.class.getDeclaredMethods();<br>        for (var i = 0; i &lt; methods.length; i++) {<br>            var methodName = methods[i].getName();<br>            console.log(methodName);<br>            for (var k = 0; k &lt; md5[methodName].overloads.length; k++) {<br>                md5[methodName].overloads[k].implementation = function () {<br>                    for (var j = 0; j &lt; arguments.length; j++) {<br>                        console.log(arguments[j]);<br>                    }<br>                    return this[methodName].apply(this, arguments) // 不知道返回的对象<br>                }<br>            }</p><pre><code>    }})</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 动态加载dex</span><br><span class="line"></span><br><span class="line">遇到问题： 在调用函数后，有些dex 是通过动态加载调用的，反编译并不会反编译到所有的dex</span><br><span class="line"></span><br><span class="line">一般可以通过DexClassLoader动态加载，或者通过so层 或者内存中去加载</span><br><span class="line"></span><br><span class="line">这里通过DexClassLoader去加载，文件放在apk的目录中</span><br><span class="line"></span><br><span class="line">![image-20200325214341078](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200325214341078.png)</span><br><span class="line"></span><br><span class="line">当直接调用就会报错</span><br></pre></td></tr></table></figure><p>function hookTest9() {<br>    Java.perform(function () {<br>        var dynamic = Java.use(“com.xiaojianbang.app.Dynamic”);<br>        console.log(dynamic);<br>    })<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20200325214906826](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200325214906826.png)</span><br><span class="line"></span><br><span class="line">这里就要找到对应的classloader  </span><br><span class="line"></span><br><span class="line">&gt; 注意：这个api是要在7版本以上使用，用android5 可能会报错</span><br></pre></td></tr></table></figure><p>function hookTest9(){<br>    Java.perform(function(){</p><pre><code>    Java.enumerateClassLoaders({        onMatch: function(loader){            try {                if(loader.loadClass(&quot;com.xiaojianbang.app.Dynamic&quot;)){                    Java.classFactory.loader = loader;                    var Dynamic = Java.use(&quot;com.xiaojianbang.app.Dynamic&quot;);                    console.log(Dynamic);                    Dynamic.sayHello.implementation = function(){                        return &quot;xiaojianbang&quot;;                    }                }            } catch (error) {            }        }        ,        onComplete: function(){        }    });});</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20200326091943750](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200326091943750.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; Java.classFactory.loader = loader; 这里的loader 可能会报错 不影响正确性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Java 里特殊类型的遍历与修改</span><br><span class="line"></span><br><span class="line">Hook map 或者修改其中的某些值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20200329001310423](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200329001310423.png)</span><br><span class="line"></span><br><span class="line">![image-20200329001325832](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200329001325832.png)</span><br><span class="line"></span><br><span class="line">这块可以使用show（java的代码） 去hook</span><br><span class="line"></span><br><span class="line">可以将show方法 直接copy过去，但是要注意里面的函数要遵守js的语法</span><br><span class="line"></span><br><span class="line">这块要使用迭代器去获取map</span><br></pre></td></tr></table></figure><p>不要调用伪代码的方法，而是去自写<br>function hookTest10(){<br>    Java.perform(function () {<br>        var ShufferMap = Java.use(“com.xiaojianbang.app.ShufferMap”)<br>        console.log(ShufferMap);<br>        ShufferMap.show.implementation = function (map) {<br>            console.log(JSON.stringify(map));</p><pre><code>        var key = map.keySet();        var it = key.iterator();        var result = &quot;&quot;;        while (it.hasNext()) {            var keystr = it.next();            var valuestr = map.get(keystr);            result += valuestr;        }    console.log(result);    return result;    }})</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">之后是java 特殊类型的修改</span><br></pre></td></tr></table></figure><p>function hookTest10(){<br>    Java.perform(function () {<br>        var ShufferMap = Java.use(“com.xiaojianbang.app.ShufferMap”)<br>        console.log(ShufferMap);<br>        ShufferMap.show.implementation = function (map) {<br>            console.log(JSON.stringify(map));<br>        // 2 修改特殊方法<br>            map.put(“pass”,”zygx8”);<br>            map.put(“xxxx”,”<a href="http://www.zygx8.com&quot;" target="_blank" rel="noopener">www.zygx8.com&quot;</a>);<br>            var retval = this.show(map);<br>            console.log(retval);<br>            return retval;</p><pre><code>    }})</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Java 层主动调用函数</span><br><span class="line"></span><br><span class="line">只有当函数被触发才会被执行，那么当我们需要解密一个比较复杂的算法，是可以通过主动调用函数去获取的</span><br><span class="line"></span><br><span class="line">静态主动调用</span><br></pre></td></tr></table></figure><p>调用rsa方法<br>function hookTest11() {<br>    Java.perform(function () {<br>        var rsa = Java.use(“com.xiaojianbang.app.RSA”);<br>        var str = Java.use(“java.lang.String”);<br>        var base64 = Java.use(“android.util.Base64”);<br>        var bytes = str.$new(“xioajianbang”).getBytes();<br>        console.log(bytes);<br>        var retval = rsa.encrypt(bytes);<br>        console.log(retval);<br>        var result = base64.encodeToString(retval,0);<br>        console.log(result);<br>    })<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">非静态方法的主动调用 调用getinfo</span><br></pre></td></tr></table></figure><p> Java.use(“com.xiaojianbang.Money”).$new(“欧元”,3000000).getInfo();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Java 打印函数堆栈</span><br><span class="line"></span><br><span class="line">之前使用Log.d 来打印信息</span><br><span class="line"></span><br><span class="line">![image-20200330115446399](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200330115446399.png)</span><br><span class="line"></span><br><span class="line">推荐： 使用`Log.getStack.TrachString(new Throwable())` 或``Log.getStack.TrachString(new exception())``</span><br></pre></td></tr></table></figure><p>function hookTest12() {<br>    // 写一个函数堆栈<br>    function showStacks(){<br>        console.log(Java.use(“android.util.Log”).getStackTraceString(Java.use(“java.lang.Exception”).$new()));<br>        //console.log(Java.use(“android.util.Log”).getStackTraceString(Java.use(“java.lang.Exception”).$new()));<br>    }<br>    Java.perform(function () {<br>        //Java.cast();<br>        //Java.openClassFile();<br>        var MessageDigest =  Java.use(“java.security.MessageDigest”);<br>        MessageDigest.digest.overload().implementation = function () {<br>            showStacks();<br>            return this.digest();</p><pre><code>    }})</code></pre><p>}<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hook-通杀&quot;&gt;&lt;a href=&quot;#Hook-通杀&quot; class=&quot;headerlink&quot; title=&quot;Hook 通杀&quot;&gt;&lt;/a&gt;Hook 通杀&lt;/h1&gt;&lt;h2 id=&quot;Hook-普通方法和修改函数参数返回值&quot;&gt;&lt;a href=&quot;#Hook-普通方法和修改函数
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Andorid Studio 安装报错 解决</title>
    <link href="http://yoursite.com/2020/03/10/%E9%80%86%E5%90%91/androidstudio%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2020/03/10/逆向/androidstudio安装报错/</id>
    <published>2020-03-10T12:44:24.000Z</published>
    <updated>2020-03-10T12:44:28.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Andorid-Studio-安装报错-解决"><a href="#Andorid-Studio-安装报错-解决" class="headerlink" title="Andorid Studio 安装报错 解决"></a>Andorid Studio 安装报错 解决</h1><h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p>安装了一下午的AndroidStudio 一直报错，安装不上sdk 实在头疼，查到资料改个hosts就搞定了，舒服</p><p>将这两个写入<code>c:\users\你电脑的名字\drivers\etc\hosts</code>中 即可解决 不挂代理轻松安装sdk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">203.208.43.101 dl-ssl.google.com</span><br><span class="line">203.208.43.101 dl.google.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Andorid-Studio-安装报错-解决&quot;&gt;&lt;a href=&quot;#Andorid-Studio-安装报错-解决&quot; class=&quot;headerlink&quot; title=&quot;Andorid Studio 安装报错 解决&quot;&gt;&lt;/a&gt;Andorid Studio 安装报错 
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>python第一课 数据结构和算法</title>
    <link href="http://yoursite.com/2020/02/27/%E7%BC%96%E7%A8%8B/python/python%E7%AC%AC%E4%B8%80%E8%AF%BE%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/02/27/编程/python/python第一课 数据结构和算法/</id>
    <published>2020-02-27T03:23:31.000Z</published>
    <updated>2020-02-27T03:23:35.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python第一课-数据结构和算法"><a href="#python第一课-数据结构和算法" class="headerlink" title="python第一课 数据结构和算法"></a>python第一课 数据结构和算法</h1><blockquote><p>注： 本文是对照<a href="https://python3-cookbook.readthedocs.io/" target="_blank" rel="noopener">https://python3-cookbook.readthedocs.io/</a> 学习 总结笔记 </p></blockquote><h2 id="1-1-解压序列复制给多个变量"><a href="#1-1-解压序列复制给多个变量" class="headerlink" title="1.1  解压序列复制给多个变量"></a>1.1  解压序列复制给多个变量</h2><p><strong>问题</strong></p><p>现在有一个包含 N 个元素的元组或者是序列，怎样将它里面的值解压后同时赋值给 N 个变量？</p><p><strong>解决方案</strong></p><p><strong>元组</strong>：元组使用小括号与列表非常相似，创建元组只需要 <code>tup = (1,2,3,4,5,6)</code>,通过逗隔开即可；查看当前变量是否属于元组可以通过<code>type(tup)</code> 来获取变量类型；并且 元组也可以通过 tup = “a”,”b”,”c” 这样来实现；元组只包含一个元素，需要在元素后面添加逗号，否则会被当做运算符使用。</p><p><strong>序列</strong>：python中的序列一般指 字符串，列表，元组。python在序列中可以进行索引、切片、加、乘、检查成员、确定最大最小元素，</p><p><strong>字符串</strong>： python的字符串我在介绍中也说了， 通过 变量 等于 用引号包括的值即可，例如：</p><p>var = “St0n5”</p><p><strong>列表</strong>： 和元组类似，千万不要混淆了， 通过 list = [‘ceshi1’,’ceshi2’] 来创建</p><p>接下来开始解决问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 将p赋值给变量，注意变量的数量要和序列的数量相同</span><br><span class="line"># python 可以通过多变量赋值实现 同时对多个变量的赋值</span><br><span class="line">&gt;&gt;&gt; p =(4,5)</span><br><span class="line">&gt;&gt;&gt; x,y=p</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; y</span><br><span class="line">5</span><br><span class="line"># 接下来 放一个列表试试</span><br><span class="line">&gt;&gt;&gt; data = [&apos;python&apos;,&apos;C&apos;,&apos;中国加油&apos;,52.0,(2020,2,26)]    </span><br><span class="line">&gt;&gt;&gt; code1,code2,num1,num2,data1=data    </span><br><span class="line">&gt;&gt;&gt; code1    </span><br><span class="line">&apos;python&apos;</span><br><span class="line">&gt;&gt;&gt; code2    </span><br><span class="line">&apos;C&apos;</span><br><span class="line">&gt;&gt;&gt; num1    </span><br><span class="line">&apos;中国加油&apos;</span><br><span class="line">&gt;&gt;&gt; num2    </span><br><span class="line">52.0</span><br><span class="line">&gt;&gt;&gt; data1    </span><br><span class="line">(2020, 2, 26)</span><br></pre></td></tr></table></figure><p><strong>讨论</strong></p><p>上面展示了都是序列元素和元素一样的情况，那如果只需要其中的一部分元素 应该怎么去做，</p><p>文章中提供了一种方法是使用任意变量名占位，之后丢掉就好，</p><p>还可以通过下标来输入某个元素 也可以达到解压一部分的目的。</p><h2 id="1-2-解压可迭代对象赋值给多个变量"><a href="#1-2-解压可迭代对象赋值给多个变量" class="headerlink" title="1.2 解压可迭代对象赋值给多个变量"></a>1.2 解压可迭代对象赋值给多个变量</h2><p><strong>问题</strong></p><p>如果一个可迭代对象的元素个数超过变量个数时，会抛出一个 <code>ValueError</code> 。 那么怎样才能从这个可迭代对象中解压出 N 个元素出来？</p><p><strong>解决方案</strong></p><p><strong>容器</strong>: 把多个元素组织在一起的数据结构，当它可以用来询问某个元素是否包含在其中时，就可以理解为这是一个容器</p><p><strong>迭代对象</strong>：很多容器都是可迭代对象，但凡是可以返回一个迭代器的对象都可称之为可迭代对象</p><p><strong>迭代器</strong>： 它是一种带状态的对象，通过<code>next()</code>方法调用返回容器的下一个值，迭代器就是工厂模式的对象。</p><p><strong>生成器</strong>： 生成器是一种特殊的迭代器，生成器可以用更少的中间变量些流式代码，此外，相比于其他容器，它能更节省内存和<code>cpu</code>，没有返回值，通过<code>yield</code>来返回</p><p>解决问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 解决可迭代对象的元素超过变量个数 ，可以用 * 来解决问题</span><br><span class="line">&gt;&gt;&gt; record = (&apos;xss&apos;,&apos;sql&apos;,&apos;upload&apos;,&apos;xxe&apos;,&apos;download&apos;)      </span><br><span class="line">&gt;&gt;&gt; first,*middle,last = record      </span><br><span class="line">&gt;&gt;&gt; first      </span><br><span class="line">&apos;xss&apos;</span><br><span class="line">&gt;&gt;&gt; middle      </span><br><span class="line">[&apos;sql&apos;, &apos;upload&apos;, &apos;xxe&apos;]</span><br><span class="line">&gt;&gt;&gt; last      </span><br><span class="line">&apos;download&apos;</span><br><span class="line"># middle 永远都是列表类型，元素为空也是如此， 并且 * 表达式 可以用在任何位置。</span><br></pre></td></tr></table></figure><p>扩展的迭代语法是为了解压不确定个数或者任意个数的元素的可迭代对象设计的，通常可迭代对象都是有一定规律的， 有时 <code>*</code>表达式也可以用来做字符串的分割，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; line = &apos;nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false&apos;</span><br><span class="line">&gt;&gt;&gt; uname, *fields, homedir, sh = line.split(&apos;:&apos;)</span><br><span class="line">&gt;&gt;&gt; uname</span><br><span class="line">&apos;nobody&apos;</span><br><span class="line">&gt;&gt;&gt; homedir</span><br><span class="line">&apos;/var/empty&apos;</span><br><span class="line">&gt;&gt;&gt; sh</span><br><span class="line">&apos;/usr/bin/false&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>当然，如果你想要的解压一些元素并丢弃他们，你可以用<code>*_</code>这样来表示废弃</p><p>未完待续 …</p><hr><p>参考链接：</p><p><a href="https://foofish.net/iterators-vs-generators.html" target="_blank" rel="noopener">https://foofish.net/iterators-vs-generators.html</a></p><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p02_unpack_elements_from_iterables.html" target="_blank" rel="noopener">https://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p02_unpack_elements_from_iterables.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python第一课-数据结构和算法&quot;&gt;&lt;a href=&quot;#python第一课-数据结构和算法&quot; class=&quot;headerlink&quot; title=&quot;python第一课 数据结构和算法&quot;&gt;&lt;/a&gt;python第一课 数据结构和算法&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
      <category term="Code" scheme="http://yoursite.com/categories/Code/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 入门简介</title>
    <link href="http://yoursite.com/2020/02/26/%E7%BC%96%E7%A8%8B/python/python%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2020/02/26/编程/python/python介绍/</id>
    <published>2020-02-26T11:21:55.000Z</published>
    <updated>2020-02-26T11:21:57.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-简介"><a href="#python-简介" class="headerlink" title="python 简介"></a>python 简介</h1><p>为了完成毕设 努力学习python</p><ul><li>python 是一种解释型语言</li><li>pyhton 是交互式语言</li><li>python是面向对象语言</li><li>python是初学者语言 很简单</li></ul><h2 id="0x01-python区分"><a href="#0x01-python区分" class="headerlink" title="0x01 python区分"></a>0x01 python区分</h2><p>只要有python2 和python3 之分</p><h2 id="0x02-python的特点"><a href="#0x02-python的特点" class="headerlink" title="0x02 python的特点"></a>0x02 python的特点</h2><p>这就不提了 全是优点</p><p>python大法好</p><h2 id="0x03-python-变量类型"><a href="#0x03-python-变量类型" class="headerlink" title="0x03 python 变量类型"></a>0x03 python 变量类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>一般由数字、字母、下划线组成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = &apos;xxxx&apos;</span><br></pre></td></tr></table></figure><p><strong>方法</strong></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>支持字符、数字、字符串 甚至可以包含列表（嵌套）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [ &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 ]</span><br><span class="line">tinylist = [123, &apos;john&apos;]</span><br></pre></td></tr></table></figure><p>python中支持数据类型和类型的<code>连接</code>和<code>重复</code>操作</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组用<code>()</code>标识，内部元素用逗号隔开。但是元组不能二次赋值，</p><p>元组不能通过修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple = ( &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 )</span><br><span class="line">tinytuple = (123, &apos;john&apos;)</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典也是经常要使用的数据类型之一，和列表相比，列表是有序的对象集合，字典是无需的对象集合，列表是通过偏移存取，而字典是通过键来存取的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[&apos;one&apos;] = &quot;This is one&quot;</span><br><span class="line">dict[2] = &quot;This is two&quot;</span><br><span class="line"> </span><br><span class="line">tinydict = &#123;&apos;name&apos;: &apos;john&apos;,&apos;code&apos;:6734, &apos;dept&apos;: &apos;sales&apos;&#125;</span><br></pre></td></tr></table></figure><h1 id="PythonTip"><a href="#PythonTip" class="headerlink" title="PythonTip"></a>PythonTip</h1><h2 id="每日一练"><a href="#每日一练" class="headerlink" title="每日一练"></a>每日一练</h2><p><strong>结尾为0的个数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给你一个正整数列表 L, 输出L内所有数字的乘积末尾0的个数。(提示:不要直接相乘,数字很多,相乘得到的结果可能会很大)。例如： L=[2,8,3,50],则输出：2</span><br></pre></td></tr></table></figure><p>我拿到题第以想法就是乘，但无疑会增加算法的时间复杂度，所以，接下来就是分析如何更加简洁的利用</p><p>需要的是末尾0的个数，而数字中任何可以得到末尾为0的个数的值都可以化为2x5x某个值</p><p>所以接下来只要对每一位数字化一下是否可以通过2或者 5 得到</p><p>最后求一下2和5分别有多少个，取最小的那个就可以了 因为2和5都是素数，所以不存在取得的数重复现象</p><p>总结一下：求每一个数可以得到几个2和几个5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">L =[2,8,3,50]</span><br><span class="line"></span><br><span class="line">count_2 ,count_5= 0,0</span><br><span class="line"></span><br><span class="line">def count_2_5(i,n):</span><br><span class="line">    num = 0</span><br><span class="line">    while i % n == 0:</span><br><span class="line">        i  = i / 2</span><br><span class="line">        num += 1</span><br><span class="line">    return num</span><br><span class="line"></span><br><span class="line">for i in L:</span><br><span class="line">    count_2 += count_2_5(i,2)</span><br><span class="line">    count_5 += count_2_5(i,5)</span><br><span class="line"></span><br><span class="line">print(min(count_2,count_5))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-简介&quot;&gt;&lt;a href=&quot;#python-简介&quot; class=&quot;headerlink&quot; title=&quot;python 简介&quot;&gt;&lt;/a&gt;python 简介&lt;/h1&gt;&lt;p&gt;为了完成毕设 努力学习python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python 是一种解
      
    
    </summary>
    
    
      <category term="Code" scheme="http://yoursite.com/categories/Code/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>android 安全之环境搭建（一）</title>
    <link href="http://yoursite.com/2020/02/05/%E9%80%86%E5%90%91/android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/02/05/逆向/android学习之环境搭建/</id>
    <published>2020-02-05T12:49:39.000Z</published>
    <updated>2020-03-31T06:32:02.562Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5c880b6e3b36c33eaf8222caa7467ca243ae542265b52bad0164bab916791f9a">2180d006303213985e487fd1170d435e54fb73b1db7948858c7fc5e204c5737ce8d9ad2c2a5ae0e03acdf5ddf027fc70a53b784e0dc027fab7e0870a08580a986ed21d9637624ca6b8e82fa9be90bc4de71f2ace73c117650ebbf0a2eb0aae19362fd1fb0bb702bf2ea69ddb8520fa13a2dc9eaa2299c7b7e33d6e308255a1e873ec2d2443477b05f20c40880416abcc5947913a44d56f2fdd2cbd68876e4b89ff883039b681df793c7a3f17521ddb259d7bafd83c7271a014a43bdd844016183d12013bc1e17fbc14e016fcf9345eaaf317111f53434cd306654e7fe21396fafcad93f051837cd7aa52ccc146aea72453c58178f98e967d8cdff6a773e0d19c5694ced7d63c95277d54ed619d25b60c589a57605aa5116f17ea789573a9a4c3fb46a9019bf23645db043fea5360a0f1fd88adb9ed315ed97c9fbe36b100ac72fa56c67f18ba28575c1dcdaa7d79821a4ff5bb77884747039883660db59963f50afc8747bc311027514d0b1b7e5fe1263608a30976708d0d305944d91fb7780ccf804a25c9324816c986210b60c06fddbd24fa7c491198c6b51c908f337727fb9cf3a7618cc10d4d5c8138aceb0e38b559b87acabfbc5419e018312c96281806f61f55adebc6cd70a434b786d90832d298583ac539febbcaefaad48e9e7bd85611cd2282a83cd69d601d796afd32649426097d6515ef133e2eabd9695e0c74e461d2124995d124fd9c8a7825b95f2ed96c74bb7edf9d1cf867c6db891c439c274295b060ce45ce5ec325398f37475959c309e8e20cc64c96230e7b4d8a8e16f3d5187abfcd5e3d7946b8e58f948c1b6e06267fccf1693f4b9fe0a7d6954519d41a5a1c327dc34963d0b1f343d3ca45881c943aeed6191fa7bcd7d717d614a1f601c81ae109ca6d4e6bd1915dab04e4e00e3372dfe9ce2cf3e932628fbcc5c6e08b331841ed48a4a00988db9e4e84daca00b948ebf964c17979d389c1654307ea15dc7851efd332501f38599f9a684accf7d9e4404fae3fe1072857a568c0913e389b2e60e37c0b36534271d3774007e1c6a47a32af05dfa3fa22decb043c354db24b0fb9c86b4f87e2134d59ee926e6b77bce7f0e264eee280ad9164c7159f781ad4d169b218cabc0ac9e0d94f77e923a21de4a37214cfbfcd4be15dc0e94dd8ff3eeaa3cd41cbaca6f05e3cb0bf92493dc67aec20c87e2a09bc0edaabe7ab998589a76e0593171d46e52413eed76e6e754b76fb5e1267eff319816782b7d4f93ad8109763522bd8751c82248e8fa559cb4b8110539e2cf718f32982a301ee046c331f3373b4f5661d8a165c2944217a9d2535a1ff6b858cf18fbf1777b818326361bba8ddd17a0f2ad6e2d296156ba6eba39261fa6f0338401dd2dfccc3b8d5afd65153087cb0a6d5a6d40796ea2430fdd44f87a0a287d082094f1fb6591ac433ad8e1a247f3cc289c8ff403cc5fefcb667b95f8329c82e12d46eadc53ed7a2831735b8efcc7a192199294c9565c221deb645348abd411bf7735fc57c16ffdc7b3bf827b87935703d2f3776c7765deabf53ef783f266116cf63ed7ba1b05c45b6721a90e130632828bc157cae8250ce448c21598abc5a0cbe7cf5f8b5c0776751b4d3d84e52b1aea8076fb14dcf64c5a16e13f34fdf5f9b628a37f27aec017d1b6d267bfc39f3c9d71480e2b296ff982244a46d19ba75d7aeadd3fb411fbafd86c8a57a024503a12b0d87683ef650214c083b34e988f6fe551d03fd08ff1dc280313f819efc8168d4123c01711350926fc1e1442c85de07ca15a36c29109eb4d2b020993ddde25dfce7090d717e468df372073d7e9bc8c901b7463048fdc30ca7bcd4b6f02b0463ff6e7442ce4bb286ae3f1a202368dec8f8f81d7c9cec8cbeaf6d767a4c7d1ae8ac5bf0432b1f6647092a3f596232dbfc70aff158389d2a1139d765e87862fd10bbf4c92b58d5815edc3154aa559cacba98a79c3b938af1b173dea905d5b4dcb3d1b42b2ca63206894cdbbc0ae79b68e1d7fb54685c916988c957be38f3fc5875639cf72bb7e99fe96919b0833b43b3c9d244ad6c05821bf1c89d223a6207951afdc574cc7e4583965467310be2f7a7c3826dadbc137e7957775d205a4a90779ad0c172ab4feca6a4c8d21c022122fc950e4ec5115d89d4175c20688a375f635232cd531bb7db5efac0e43636c7abfac680f3fc86ee486348973bf39cf9963dc360b1d2c16d6380aaa92c2d5ffc69f42da8bf9cf00d5e3234c230feb235f86401e11969d092ea8b54059a22a8d9292dd452eaacef45187ff1f6c1f7f15fb8e28a387ab2432fc8f4e2b0acaea1edbf19e1feb41f878e96e22bc74a9a7d69765b1887e828e1eb4e35c896bc2f56fa4062bb6115fdf39017907b0c96a1292285bf3678be09b09a564b04ff4d79ba6fe437b8238a597a42232e8d32213772d90572ec293f4c1df400fbc6eebe02fc7e8ce7f434d877e0afad69512ef5bc9263e74629d3427aec970ee288e119fc0fd9de72d122fcae1746e89181b1908bff2aafa796476690deeccdcf071c539328da7e75ae3e7228bb0f8be07f37b10a6d4f84715530abd87a4232d190244dab1b09d6b387309a254c0b1bea030fcda71cb950823a9b1150bc755f7ac00c2cb1682381af0ed416036950f5faf1f642da78e9836b6aa1fd90942fffe4e35ddc0363f7d6466bc7634b7669d44e863190caa06c6c9b5031f2db0ba60ca6a90a28a6f615766c5f7bffd24b25646959077cd4d747f7b7846fdec6d8e9233d98a395b75c49464dad830fd07f13196c18535926eb7d74e5286eb6020a6fa66a8b24d4e7f3ee826f0c73d52d2b460e4e357ff646ce8ada32f7a83ed2b472b0df0f2923f70034308b960e176863ec23d7ee12487ee5a59fa92e1c411a480499590562953fc08ffe9fb2edb431350bd8c8ad3c8d8556e684ada52bd35a86baaf27e838919980b76d9234615b0104cd82cd502ceab8735fc56da159ad3b6e0c3d343c7227b83f572540e073d5af1f7e6ffe2c132ed1afd46c991fbfc8ae6e74f99f49b3d6325b8970f7ac0dc325c1886808045070375a29177b8398945bd1736b93136dc9f6f776bf5bf5d9a8913c394a4c0544bd649815743c7895aa54534f9f6bcacec0d0c8414fc12f843169fc19b189ebb8048784e6c6811be77a994484b1d57eb3893bddac210399b0ae0032d294f83bcbff0e75f529e167a7b226c12fd68b8e60ddcbcee8ae2adb49732d7e5a12daa9c7d09169c990f4e97e03169b5489daea142c0184713bbfbb445b88eea26764ec6f56fd1fc7d95275c88f635954c48e0898ba10529942dfe0b9927b2c236cb50db8a021df65343d22a58279aaa9b4ac9f0819c310e34322ff2ba4b24326a107c89dfc0bb4f3e3d00a7366147872255a79a8b0a6f5012185d6339c866802a705e7ad458edf6cd90a310b6ad2c22d6323f2866ae893649bd6f548dba3e0af6367e25ddd10ebd29affebb57f5304ff3b9730c9a1edac41c874acda52b02d61744984582b373a476e09534b42495336c2dedaae310b49c890fe76cb6298b9108aeb3a776a5c2b89fdec56d0f58993c54d4f80a483f0663f1f81c493a103c27bdfde75c602db2e582988a97a7ed17a9a7b2a9b796f62719b45a5aa613d9d9fc3177482cdc4e03326d83844d887aa46d66ca19c09ff62e7f26f77bcf0b37c21975a9ca359aef6505efb20193de377a7465d37a0df8917c0a1c112c8d7073b5b5d6ce81971198f3ec62ea843232766c9865e488a910236ccbd2324416110da72f496162569c38e9340b2ef5fd990f81ddb3b9cb7783148d66d197f587530e9dbd79297b6e088ba1c018f516e28e3e34983d0ebf5bd598a19994a5afce21935baf0b39f49b28797554691ddcc0ec185dcb47f5878bfb2d293440cc243e133a746fd174ef9b64c3903977a9c13367f3604405b7cf3ea5fcf894ac354b01db4bce9f1b41b7d072a2f7e06b2fe29f38d737dde55bf1d83c6c299acf85901ba7a9f5ddf016a5e591e5200e633f1bb404a8181cc8574551a40763a661f7f0a4726facd0b49b73a18bbc1eac124ee953cf61e284ef042ad5de480ce7077e432436aa310a46c79dbf5b702149d95fd165e446cf43363c9b1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
</feed>
