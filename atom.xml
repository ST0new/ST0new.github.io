<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ST0new Blog</title>
  
  <subtitle>博观而约取，厚积而薄发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-06T07:02:12.338Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ST0new</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>phpstudy 默认配置解析漏洞</title>
    <link href="http://yoursite.com/2020/09/06/%E6%B8%97%E9%80%8F/web%E5%AE%89%E5%85%A8/phpstudy/phpstudy%20%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/09/06/渗透/web安全/phpstudy/phpstudy 默认配置解析漏洞复现/</id>
    <published>2020-09-06T05:37:51.000Z</published>
    <updated>2020-09-06T07:02:12.338Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="41837a3fe3adcc7e2630e6354c5d9972afc4b54a1dc1131445c11f484c794c45">2622ffcd642a056ae443fa4f88d077dd58226a5fabb07b33cf9e263953b0e52468e935ce3af91f7c82a5d8c48d38da5a2f5721bd30dab229967a10ace9407aa1c8af94a5f89a2a5fccac66e9e0da3235c829c03e7291dca18736fb6dee94fbd903255d41a8e27e5064f2ca0ec90deae2f49a51df2e3b58a1c5f6c7319729321b7fe9de497b5ce8f7bf2df1a2c93b8b2341415083e7cf8e474f6beb4bad9499f01b6598b07e36157d9b8b55aca8c47612e05d7fddb7f054f835a473720dca6e1776d48ce4e69933297c95cfd3b65cc648ab3daa54a2769cffa506f3cf9803bdf6bf5c1404c5da8b5da1fc9418468b16b640a86312bec405e79f156ad7d09667d8ec01655e07c8941348e0a12fe5a9c1fb58cfde30bf4643e88b53eff128716e012b3e7c894bfab6028aa15f5410c6f702b2f26c2008f7a2239b5cdd13ae397dc24a0beb8144bde53a204005eaacae0993acab8e855950f11dbdb19338c91d77d988852360796b0a724d1304bf189c3b6882269a7f8d542fcebc742424e99ab12dc85fd4df1123bf7f1557c9125f09c15d9b3ccd6f61f972de7ca09bf73b2dd139cfe373d7cc204818867aa877b87f739b797fdbdca0d714fe0050b500ea5f83c6dcff94186b1d49fb2dc6e5d91f54b59f750550995a3b8cf90f712ae608452fedb3dc59c14903de568c2b0ff54c4282fb55e3c49ce926788edb059eeddc94c983e8823aa4ae86252bdc4e9e6eaf0bb290299ec951392265c37c54154a6bc693e21e736f0e0b8cc63660ce3248bf82b40e1f3447620d6b43e5b06b20c31e6ce4d03dac8a51921683aaed2e4ba7cd4a5c9cc61b69c7eea51e042442ccae092596ca8d1e9048abc2d4e7d099ae8468db8f6fe4481ae9a75ae4db4345a33782acf1f32e8858dfd61cd2f96589ed9c101ed767a11d5bad80013ecd445c89720ab63c4bfa5b3fecdd11777cee51be93af90b4f3ac89eb5b1b34d3b7024b382888ef39e37afbf6a08eb95fa0d2a6080a1827b5374aeacca60b0fed85b099ed1a56e67969b076b467ea97977437e8e3022f923f4e2b7297036f1e29a00ed42304d9580e4ec58ef6c56db9cca343c6c9eef84d40c1c789748492646f51baa5bb2f15d271a8e0ce4d83beea72dd0278d728a70cc3a7deeb554af25eaab8eb17682271f89c27bdf4e5fa99f868871e476f6daca68abceef9fe7580a54d83ceda5ce97e80d5335f822df58a37f36345f88485add47c40816ca9e2210a84545d589247255a2024f4169a886af92a1a69503a4f3c10961c7317d59c7dd1c1154cbe5f96e50e5bc505fdea9a6dd12f5bd67dc488c7cd1989f6c9a58eb6cbc4f6ee85eb5487cf46cb5dc3ad6e3cad4366537f95edd585cbf8db5df9d9a9ce132abb27c1f0826b4a4ec32fbf479320831b5fff5bb63bd49316b1cda9baffe62aca0373c4b0d00a9aa50d58d749e38a7a7ef443443a7315ceacc9c571d521a06a2e1be5001a9c3562bcb85a589df77556345979d7f2c0fc50de9d09be359ad6bf8d2c88528909ecaaf9c644898d14a4ee6fd4bf2a6f9071ad5601a80126e39903094d98ba7631a73d1579c49583a3829a75dd416207ef94be5a33b98b2b462e1613fc6baeab5f4b34030a39f6610e2b3d2e677563fc463bad62557698c6ab3ed3220099ecb0f451d80cb9a243f0127bc2cc6380e25cb5fc2d97c0394d3e9499fb4bae1bb0175c2cc280644831b9d8cf5bf42ba66929005499a3e4da0db394b31c9f8fe1284b378d9ac973e231d55686b5775fe5af23f647efe41f4af17bcc5786b97242bf0f9fa9c883c1f4a45ecb4edaf7dbe3339070a36dd964eb35b14dbf976fa8d3c49a7a42bde94f2358e099f6743cc5a8eadde7819852490852290b5fe91e1ad863941875748df2b76a6b8b99289ad496c00accd317dd4ea0ff959e4c78ed6d5f96988304fbf6ea51b30d09aa19b5b9ccf7a5dff5871dc7d04ff8ae04a52e3596568e1302aad464e8bcc98008c29b00d109953d25c080eccdc761d2d1fec0d6318f63b3769f4c351a17f5634b06aa4405dbeeac50d91cf3fd42a491e857215ccb2417cfccbbadbeeadf6aa02d50089493a230ec93bd74e93d77151a43ab78785322c476f255598d7912f8af17dff89c701b343e49821d36ca84e435ca66e8301e8028635b15e87c2b5a5006369ea9b23733653881aaf013f584b96596977639164d9f473b95c9ecdbccaeba0226a2a7e47554aabfdecd08bcb460dd544ac4e44c250c0068b774b21bb8fa8cd1ea7888ab0696717a2716da57067c9e28fe3e9947b59e78ca135634b77949f20305856e71a61bd41656fc35b4e67424330b9ddb3ad8f823539b0a263d8e5a3b1de38acee561f41acaa33212769fec2adbabffc13844c3fd7f007da2fceb7b7a636a5cfa09f64076f659520e923fbf976e2d7fa82eb5877f913256d9c4e02bc3bfb251a14bb5e00fe74f093dd00102d600d02721432eac9a982846b70aae380dd2fc443bd88c4e7a1a271d8066ff96797e5e719bd71b9a2b45836ee3ee7041fbc64bbe9ece0fb5a531db9b7e88cb1cbcaaab8b64f4ce1109db2ce1ab4f3dd1a534a006ba50329d6ddf5c548f83bc598eef02b1169e002aaeb92772d05c2ffe6058b28ab7a3ca788c8767c1875079fde932f3f05648a023fd766e1a2ae084ae4c4f79de164da218339ce4049aea9051bf7b45791c97670fbb249ca82c55bd67546d6989849403bd65c554da5c0f317d89f313b745127b7f4088fff37ab6fe36b0ed4df3fff4af0ce77effdd1f85e29b16486806ec01d3630ff223c3bfe583a46db6ee1391ea0927ddb50b863b7ad54075a02e1e6d4d666a68cb494a78c73534760fc8cd56120950df1dcb32e393bb56fcee679535ff94a919fcbd462f7a417318aad343ab842f1ccba9bac94ff834f332130dc26212c4a2b1da2aa86d80f92502ae41a60e3dd28ee0b1a20e65109f19ced66ec879195afd3fb961d4188954359b3ed5bfdf06042c75251cba65dbbfedc163b44c980a8f129acead06b5b39c82c5195a5773f4a5b1962804400d6906d1219debaa3da71b8ad04e6bbc3d857b2926e6319bbfd005e38eacc2d2656dcbd8b2dbe9f856477457d32c2b23431a2ac024456c935c958e0b54243fc7b98d3f67639986251a83aa578d604e74d134b1302ad43304599b71a0c46426fad89f124dd1893261804ac652f292c116782e53f3fab0d1e6821dd2986ed189c29d951be0078ebeeceb96e82328df138c909c7a881675dc115cd9e53a20179ad58ae06e8b4ce1e8d67b9d0ae97cd7370feb8423138364bd511b5965b2d1cf4e088532c9dc5159f3f3cb3152db510228290b59884c6d9deb66d5172e7d56081dcf61215a730a09f295ae716840e9cd93ad27e9386ee8f4abf050836a54056ef634c820386b77232634cbabfda65bf0b5e3b8118a65ea5cc2e888c511b76cc294c582db93efd3e738466baddf892f95f7cc20cb17f59634125e1c1eb75e4137ce1343dbbe6660daf43b478acfcfe608049f9ba18b14d375efb115f3894522095c9c63722f1532ff2d7f9d472d42f9a9892ce51d13c7620a2e57c61a249e29c508c9d10b07d8f9dbfdd8ec46821d2d3a8d7b4515aea9d1d0bf7e486cfdc393e471d8864b1a1c304d84c54d28eb640088d3e12eddc19837a50f181df8c31e2e066572247be67a9f9d59757a25e49aa42f991f64acdef416417171e9a10337a034b201b95d1e14054cd5f734997a5190484c533caa4f1829c3cd4b108260cb156350038c6be947ec6dfde4b333b111bb940a7c7f1cb104377f0a56e54f3d60c983326fb9ac74f1d978582fe66f7fd0e3d907b2a62f9a53055eb50cf0195b62f0e4d74d6596a7e888ce7ba4a141da8f31c668029c36818c6048b2cf363f139487dd93c9c55a92dab100275cfc0bcf551100c2d7d09e04c1d57c6781ddee9d1217d6701ad35e2c6cb883988a339995eeed1f838ff274b5fece8ab33ae3ea9525870c45c5b72b8f68910416bd01d0155e60250ba989373e720e7e9c47849931a234d833ef8e38f862f2f6d095b022dd3d92c6a069b0f9f0ffc38d0414131d8609ff9d2d0a2df94306b09fee25a4e7ae7cae037c69c85a5199355e20ede96faedbeca6e0bf46f4f218c418e6e9a74f9029967dc80b9b1161a7872026a90e4169beeebe350b9af43b0012b65e1ffaa0fa1d1093b194156dcd32faa81a5831e8c4ef331b35a57c1c9d821e1ad567192b43bb207684254a3810f0dc7b5795827d815c833330af538629fc55261e1a69af8586cc94cc96fa779d816d6ce734057197d0e83fb3771ee79c297b3397b2d059119274c86ec277cf4b66ce93535d3c275966e679c88630f217763ff21c7beebee0a43353dd23283daf1796773c22d6bba0d169ce15535ab51ed30578a13e4bc28fbb5a5c793d5495bb1725020cbfe34988d122d098658a33ca0b87fb484c339689fe249e673531c5e63764a09843b8d910da71ad299f2680ee9914de7b5a34825caee6f797230763f8275f0de294b50999b6262aae9de6e37c828131902e6a6e80ef990c34b4786d9b5742515e488fd2eadd25f21c465430c464ed71b0990b849bcb7e8ae27aac9d17789600896a7e812cbf3400cb9a3684a5085595c28df3931b231d25b6f5825b4ba287dc17ae7bd5b84628cfcef1417db25912d98d4a3d642d7434dca20b96cb2c1ccf557d1589a3713d9962246e199ff88d69b5fd6b2d528dde7a708e6a989acf04479d4a70f9a9e4d08f0105bc658257eeeb6decdac0c79d41f6b9508dade427643725c9b0aa21af718dc11909148c266da7834425a6da7d21959b79fcd8a1690e4e14de8d01b4fe816a2c50a894d07f0329128a15038ce4fd6a3314ddfb261d65ad861b53a3170578dc2141f1a56d51dad307c936ecf1238511ce8f4fd2b82905e5a648b33b955d4657cfe645c9c3bf4a6e7374c16430a39a8793710c1e88cd20a52b6bbb7c04f24af826b74b8adbe401108f2eea252d2659f58f5e41fd05d68750c22b5e1624554b61aa8eaa166339015f1fe57c1a7e45117aea9ce0be29df709c15c594950ea5bf02a70638530d3989331efc99389d9a8e5ebab7de8f064f723ad9816fa3dd0f74321b5ae5f88581a2d1f056c352572c8923bac418b7fb389d28ee51cf640241fc98a003330fce357763087c3e425f75dc10ab9fcb9962afe9d67860b3850dd24185e91474c5605aa57335e4386a5d033fbb4eb18e80c78e7ab6f52bf9170c52697008a58e3216ee3f639b2cdd5af54a75ef24de11e61aa3ab516c15a70e259a908fe66982d098777c762644d9a4a217a6f9d1685e9a12c4105ecce2c821e2c920cafb9d1e86ea6f003bc084c0dfb0badcd1f248703318c8d3b7b47cc0cc4bcb14ebba4b900b2ea87a77d6ceef83e99012f8aec5e8fb3f638599d0b1b683f26f77bc0b62a1957cb6622720b51cfce62d94fcbc318ee35f9a6ff3825d7798d86e74c5f2b7af8ac28702fb7dae7b9d754b2724767539a7521be08d1c6e2906438e834cc4c465701201f463be644e221696250b657e93b7033f08422c192421111db72d0a9718a47acc6bcfcf9151ec3ac727607c4bef9e951f0d78c03f456e85f05a46b0eabd0533390653bb5e0fbf5ffc28611bd25539e853258d1c0273b5748926797d776c5906e0dbfa24609b203d7fcfa434d575adf69826c01f3a8ffd39a9e05db44d82caf64187fa42fb8c010434b71ee0379de443b4c376a8b6e677f6e0b9e48d0e5ee5bbc26ca437422f83af83f9400abf6e5a29dd75bee35d82e8679d2da0b2a521b48582b3f33a9c2fdbcb8e665ddaccaa4395f307d170368e5d014f30207aadacc25c2f0ddc6f35e4c55beeea265605ff08959d060cca7dc6f35be6aae7d78ef0cc0aab0db3c2ebc00aba72d7dca4b219124e265b172902bafb6e7f7b783d2703bffe408a52facac5f357246881918c93c27da8bae7a92afed793f61bc61d941a34bedd2638680794e8ce8596cfcd059bf763d010e5848c7755f9bc81d5cdc74643bb7edfeaaa47aea737023a75e0671609f6fc384c12ac1db0915a144f7a027c4f9f2ecef36c01877a45dcd96ed90aafdc4c9c7c0762d59301cc25524cb5051295f9a4311eaeca0a977f7e5ede208372553fb912d000ff59f0d69bf6d03d4d7e2fb3a3355d66043952b0821f26b313ac17e39a7765f22601e5ae351e6d7c93f96ecd0b20eabd46974130655919eb6243665ee1ea573bf5856c229e300951bd9a78f74c06086e4cfd5dcc27c59a1f3cec856524b032f770571b435ed095b99247980bebff83e78ddf5924ce3ed4d97499da29aaea46f68d806f52288678c589a4bdfee710e296b2db05a882ab49f00ae5d35026e229a171e399119c5b79aeeccc4b4b0028b7dd177ef8283b51eb859ef95502d02fc5235654a3685f5f299fddaa7d9204737d211a2ea290b337747cd661e17da3305387d364ccbb544d77542dffe7d20725b4fe241793806744fc305d4b7ce233e303d57b3b75ae6bb9b4b0d2d50336e4669b7890ad9c15aae1bd322c7c</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="penetration" scheme="http://yoursite.com/categories/penetration/"/>
    
    
      <category term="漏洞" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>scrapy 框架学习</title>
    <link href="http://yoursite.com/2020/08/28/%E7%BC%96%E7%A8%8B/python/python%E7%88%AC%E8%99%ABscarpy/"/>
    <id>http://yoursite.com/2020/08/28/编程/python/python爬虫scarpy/</id>
    <published>2020-08-28T08:03:29.000Z</published>
    <updated>2020-08-29T09:37:20.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入坑scrapy"><a href="#入坑scrapy" class="headerlink" title="入坑scrapy"></a>入坑scrapy</h1><p>在自己学习了一段时间爬虫之后（其实也就是了解了下爬虫），我就迫不及待的想学习心得东西了。 今天就入手<code>scrapy</code>框架</p><p><a href="https://doc.scrapy.org/en/latest/intro/install.html" target="_blank" rel="noopener">官方文档</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装上基本没啥大问题，缺啥补啥就行</p><p>这里我选择使用Python虚拟环境virtualenv，大家可以参考: <a href="https://www.jianshu.com/p/a08cc9a398a3" target="_blank" rel="noopener">Python虚拟环境virtualenv使用说明</a>.</p><p>进入虚拟环境<code>workon scrapy</code>,友情提醒先更新pip的命令<code>pip install --upgrade pip</code></p><p>然后安装scrapy <code>pip install scrapy</code></p><p>我自己除了pip的版本问题，其他都没遇到，可能之前已经补完了。继续看官方文档。</p><hr><p>参考链接：</p><p><a href="https://docs.scrapy.org/en/latest/intro/install.html" target="_blank" rel="noopener">https://docs.scrapy.org/en/latest/intro/install.html</a></p><p><a href="https://www.jianshu.com/p/a08cc9a398a3" target="_blank" rel="noopener">Python虚拟环境virtualenv使用说明</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;入坑scrapy&quot;&gt;&lt;a href=&quot;#入坑scrapy&quot; class=&quot;headerlink&quot; title=&quot;入坑scrapy&quot;&gt;&lt;/a&gt;入坑scrapy&lt;/h1&gt;&lt;p&gt;在自己学习了一段时间爬虫之后（其实也就是了解了下爬虫），我就迫不及待的想学习心得东西了。 今
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="破解" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>某app加密算法分析</title>
    <link href="http://yoursite.com/2020/08/28/%E9%80%86%E5%90%91/%E7%A0%B4%E8%A7%A3/%E6%9F%90app%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/08/28/逆向/破解/某app加密算法分析/</id>
    <published>2020-08-28T08:03:29.000Z</published>
    <updated>2020-08-28T08:26:16.364Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="db95302669b75e45c8a71102c2d043818074d0dc07c0f413b67421b96fa8fd2e">a7fbab8565cf6bbb84f5578e356b215e1a835de7a145bd926381e35cc45256f48638ad4efc802a2908feb1ca92a7cd07c51a30d35f83e8bbb8c9dab286498d2310997a0d189404b14814dc03f1a492cf43b07118972283b594bf2346b8449d94f6b6f9ba634439efdf38375f27c80c287c3df5898d3fd58a849d82af3d6d7861e1e7fb4f87a22bb81475a1769acba77e5330c44177a46b415d84a321e5a08fb8455bb89315554283bd887150d48dee313692cde6ee377ed5b5dfb062f1849db4f5c06b15cc2907f2c9c123a34a970e52f1e9ebb81f65ae67366e3a6c5a5249ac6a71c5bafbded552cce36cffb22f28caf5dad3bbd0448262d87cf24a8b3851798870cd13bed089655f011f5019aac6911ba3b996a79e1a0243f1da32321ece4ebe7aa3700bf93e179be5b8eb1f44c40389090c5cea3dff462d4b3d4f9ec94f7da9f4187911864a2b92e90f1b1780ab8d68a66dea1abab53bc0cef810e1f96c8826ce5d18b7340cc8d5066deb927e8b319551faedb767150b0a811c5201e043d08c31cc48322d95880915d460298913173bce5144ab87e65e691fb07447ffd1b0fcb233ab0e2cbb5a5dbe122a989cacbb8f40a90714a879891c5c6e1a6291a8003fc0d946df1e331df23de679aaefcefc95af46bcb74e9eab60bfa7ad0b0b467939019dc692292968db622e0fc558c9605e4c6d0b3772b45574b2f08840e4be6e00118dabf5b4adbf0ce4b72d0940324c60095ab7610c5d7e9006d4561ae046c8b52479ba9f25982babfb25199d3aa717aa7251d1eddeb1e70a7ae47676d13b0e3c32765d185fb9edd440cb69ecd8a78bac7e5bb052bc8afa091b117a3947dc88dc3a4a706b6d79fa8369692451f7024dc466c80826e18f78fc83fe7cc8e0dcd95b9131ea964d598fac48972d1aba6f8b0b23dc5d7a4c6795cc828e1d632c7be564129d76df9f1ab59f2d30ea4f40ff88b7a715b4d4b14db99261404e40345a6782dd840ededbb1c1d777111791f89a170764030a0ed892bd5a8e3ec22defdec46f5318a76d3ed31ebddce6b360149bebd875f18e03d7a698f4a44e4183c78e0712ef0b5b7baf5449560737d5397ece08aeb1a1c24a0188a66a4643ed57e39f45c8b9083a41b0da359fbc5bf5c97d8883658df4b761785630e49af1176601c621f2cc16a72f87a3d77dae7c5d75cfc11b067108661ae56edae9e25c055384cbaf3506553e35518556b976dee08fb8924dc079609b5cbc6ee9070b3775536b2480158afb7e7cb00fc74996a1fd81fe2525794236f055e6fae72f271757695a009bccec43f370bec72c3ded9c4af55ee84cbfaa2042759264efc282c2edd9b019b9c4a7c7c985b58ca8d500889b8a8b9938eee1fdfb0b3fb4e627f6dc7747d01d4290ff52aacb2fce31f27bb314848cb644b2cfaf0379bd74cc19ae6ba4c77e968e42e567fa14b3886a75e8df1016397905b05049b0f718b8818ea7b4245092569f037f1b3c049db034989e7be5e742accc66dde9b4eae7ae7a57b9cf4e17c384ce91527450846ceae5d96cb851aae9d0e7a2b98bff078b3b8e9e9f1fcbb4ad52e03225e9363b83c41a34c07bc631fc13c27a647e8a6e0492f84447ba5d3f085ee0b200019b1154ff0b3e7c7b69bd6396e3e2b0d19b9be577d23500f3a3f9de46c78ff594893106b924ee73055ef74b823897787ccce217070197da9d0abeab3f145868c51fba7eb698a95f451c6aaf8afcd79b4519e9246fee8edd95f17e9d40e08e4ff4efe88dbfb3ef5ea52fe25bf41333abb24f509ed1f8a948b69bf1362bee13dc5550db888f5c97e28a304ddcad8cba65269a16326feee70da62bb7997180b3a3e19f6b244ea671ba0f1ec649606ddf8c319e16357c76a353c449237a708da625e035a00d6f4063e4ec44dacb743f4c1f2e6f5919886031d0648ff0c7989b61383b0a08be7dbc762414bc30cb261da16a42561f0d087a33d0a19f7af8f7c42fba794f84a33389503506f1a81bb702fdea836c81cc11b97552981494a12dcbffdb04f32886375ed6f2c90af5352c7791f6552f136764affac0cdf1ce23240d6c6b7cd4d5fd69a2b525c509ad32813274344dfa330e8cebaf28bbe4572dfba5c730314e8101b11a2f1b3e57522719eb68f67fc74c9cb25d4d909844c91f33b13b87d142dbd1857a75ba63877ab143b06bc6af03d7eb788b502af5684cd161a7c3c294e4228e26382963536099fa49aff6f189a75ba4b42abbb64b88c4c445a692228a2b79132ed34250243cb02955715d70c3b53af19640fb60576532fd4f88a1ef53a700b877c4202eaf25a1fae9e884c94e18689c5ec7f7e526e2599b692bbeb14dff0e9b89b578168121d8db09aee95cf1c495aa5e7048efafbe4ba2ebf90d263fe4bee9aca5535398cb1e7cb4755be69476a6e66378c7cb52e290e1780abaa3b21985a08f566adf7b90034d38a037e4e56d974355365cfd75604196e145cfe978be68078d47bb091c228780a4100db35618986e2c760164fe4ffb65218f178119a01ecd85b7b4e423377d5d84c2e1e0ebc5cc600ecd581ae728051a1615485fd005e846e927a5c970fd516fc56edab147c6187faa20ac919fc0caeea99a52e0bc9aab1ad41c7eae4b676803941a889ae8975ead2b7a5e71c3e887bede022c85bd583234f6883e246bb27999aad74652d7c524ab8c1c898c461a6cab116f54f0366d5ea867c47a9ba21c3d7f0002ae5e4d06c18261b9ca4e74daae4dbe42e179622606e3ae0b6269491a6a3bd90abc293e6bf89d0a5778b7559d36ff0f4a21051968bc53b1a366f1713b1b4ee023df6e52f35b251e93972b272910bfedde62aa09b0cd785217959c29c4d0e1c141bd08d903e57b34f48e98e6342cb10ad93d36de543769433c7463ce36573ed29e8da585a033725291fe4c8cff7c5e71b84a0a79d694c37b48db781dfc86daf245e7a7b75ab8a0fd6372a89c1bbc10ddbeb986bd658af2a3315046158aa8483c50e35c7843f683c3f827310be86c2e866305990851ecce53a5351c689590e21447554285f8ed1af64d9986b8c7df3d84f4546894e108d073887184d5eea83299625e77532b9a91977a75e20708e2f66184ad131308a8a9a00f16f062d2f04c78ed9c6432ca3aba0473f57644fb781def7893614a363390a725d421e7ef32ca315f19f76e95b2da525983a09edc1fec4c01b9f42d9c5613ac1200eca155c4e087f9ba7d1436b39ddcaa46fbf2dceb6ca5efbca3a377ec187b025ecbc689d55d43153460266d1798a419728ca723b54299679752448c0341da36891ddc799798b8d2e9b55ee81197e2f385799c1d7c7d6c5aee6f6bbe28aabfe413c30d62b0c0f38d0f706a18f43c2a4945b3747437fbe0db8f13cc7478375603630aa33e321a9bcd79082290e3ddde9a88c214f0402b1d287ad0d359794113893f88bd2b9a3ba280dbb96e5717662402160f41c1e6b4affc9338654dce055350909430c65d07cd51ae59ff453b0b457083180f7772be76e4f04783a66d1c566acac1fc2518a066e3dcf1e2b7af4fb5135f0ef19c711c4c5825efc7128e1870c91ebac5902d325cce6fce5e5fbc5ddbfe25b714445dfe8e0e86c8a80ccf687448251f7f904510b181170bb6334a9bf0b7186fbf5589958737a7ec18c7aa15e240e87c36bf6b3d6da01d8dd4cbb9b71835051b7b951b2ce2bfe53a92cf6b1f67e01d079de0382896a39f286ac28809e3ec18f5829afa2776031e10662422b89fd5663ce9f972ff40699a5402990c9b174bc8d4716ee6a018eb3cc7c20e4afb44a5daa843c57330f13a0da38919e6ddf39e52f4d7c6bdd43b13d49794819e017c4f1e7da48c5116b02468c555f0ecad81850e19bd2d0fe42b4b7080612cea7ecaeddc10798f96b716065d6454e8dbe6214154d7136bd1f3a50872b102fcf1af050a8cad6bfcfca6bbc3b766009b289586be4627d7bab68a2b6b35dfaa4af668fcc1dd2aa1b7f41ce390120030d3ed31c7d294b720b57ce1a773510354addd7ad7da0f605b171f542bda79fc4efd38546dd9d4381534eb4e993420f067cd8096d14b61ad32d98087ddef9bb38fd6408fcb8af2e7c6aa68c868d23178fd8bf849be0b245691ccb299b23b87399804e425282aca39ec725a0b5ba1da6a8e0ef7014b89209b2a17800862f0b493457c13c3bc26b7a45d6be765a2da4bbef9e869c6de169af99e0baa2e799c7e79dafcfb2f26ba2307962e4d7f98db0f04265a07b5d5ae8a19f8f0956bfeb0296b9192878eac360ab0f069e0c6407ab828508eb5eade1377cb695f4d1f986b061582e4640b5dba317fb263ca4b661febe7d8ea0c4577abde2e799bebc2ac1a8485d628f8fc437b8d269fc704ca4cfd050e5c013375423597477378f20c23383c9813dde5909618d40bb3dad1feb19961447bfe60094fcf012815e77fa68b0cfc96229039f09ff5b1a2818c8757bd6d5537e04a19988d9dd5f280fec6f65519976b35f97b4c05d51ce5f5eebad3640b001df062b0620fc9ece66d173e8559fb072b10db41317aa00bf63a73617b9c33a70c165fa577ef74e8743210875f5d730081e14887cfa0df786bf0ced96d9c42b14b144cd26914f094e364356371db15f65c750cbf4943c14d429f2e3c18aab6faaa71ab97fa2769c38257d3468ef23c45d9b2bf5fdd7489d854548d7fb4a71691114db6453f8032dccf627937943560ea58aa229580a0dadf4db5e4763dc3bf9982bc40fe1d999105407cfe7e512afd4d06a98b4bc31f4caa47f841473f0619f288a7e2f8e2d47d17fe636b6e0d9d1527ad86be6f4fcfa61d192b0b4d4128210e473e4c1ec893845585fe295aebfcb6b78eef5c87d7888430a94704e1477f574d5c2db6fa6841f1cc1cd3951c89a2ffadfbcfac37b2870c669a23de7101fbcf</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="破解" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java学习核心语法基础</title>
    <link href="http://yoursite.com/2020/07/24/%E7%BC%96%E7%A8%8B/Java/Java%E5%AD%A6%E4%B9%A0%E6%A0%B8%E5%BF%83%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2020/07/24/编程/Java/Java学习核心语法基础篇/</id>
    <published>2020-07-24T02:39:06.000Z</published>
    <updated>2020-07-24T03:58:31.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-语法基础"><a href="#java-语法基础" class="headerlink" title="java 语法基础"></a>java 语法基础</h1><h2 id="1数据类型"><a href="#1数据类型" class="headerlink" title="1数据类型"></a>1数据类型</h2><ul><li><p>基本数据类型：八大基本数据类型 4 2 1  1 </p><p>​    4种整数类型：byte（-128 - +127）、short 、 int 、 long</p><p>​    2种浮点类型：float、 double</p><p>​    1种字符类型：char 默认值 “\0”</p><p>​    1种布尔类型： boolean  (false\true)</p></li><li><p>原始数据类型： 基本数据类型+ void</p></li></ul><h2 id="2-1变量定义"><a href="#2-1变量定义" class="headerlink" title="2.1变量定义"></a>2.1变量定义</h2><blockquote><p>数据类型 变量名称 = 值&lt;必须为数据类型可以兼容的&gt;；</p></blockquote><h2 id="2-2-常量定义"><a href="#2-2-常量定义" class="headerlink" title="2.2 常量定义"></a>2.2 常量定义</h2><blockquote><p>添加final 来声明常量 </p><p>final double PI = 3.14 ;  </p></blockquote><h2 id="3标识符命名规范"><a href="#3标识符命名规范" class="headerlink" title="3标识符命名规范"></a>3标识符命名规范</h2><ul><li>在java 中能够自定义的字符串都是标识符。</li><li>以字母、数字、下划线 、$  开头。</li><li>命名采用驼峰命名方式，并且不能使用java中的保留关键字。</li><li>标识符命名有意义，不要使用中文、拼音缩写命名。</li><li>变量和方法名称必须使用小写字母开始；类名必须使用大写字母开头；常量必须全部大写，多个单词使用下划线分割。</li></ul><h2 id="4变量操作"><a href="#4变量操作" class="headerlink" title="4变量操作"></a>4变量操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBase</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 程序入口main Alt+/ enter , 主线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> a = -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">short</span> s = <span class="number">1221</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">4.5f</span>;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">4.3</span>;</span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1连接操作"><a href="#4-1连接操作" class="headerlink" title="4.1连接操作"></a>4.1连接操作</h3><h3 id="4-2运算操作"><a href="#4-2运算操作" class="headerlink" title="4.2运算操作"></a>4.2运算操作</h3><h4 id="4-2-1算术操作"><a href="#4-2-1算术操作" class="headerlink" title="4.2.1算术操作"></a>4.2.1算术操作</h4><h4 id="4-2-2位运算"><a href="#4-2-2位运算" class="headerlink" title="4.2.2位运算"></a>4.2.2位运算</h4><h4 id="4-2-3逻辑运算"><a href="#4-2-3逻辑运算" class="headerlink" title="4.2.3逻辑运算"></a>4.2.3逻辑运算</h4><h4 id="4-2-4三目运算"><a href="#4-2-4三目运算" class="headerlink" title="4.2.4三目运算"></a>4.2.4三目运算</h4><h3 id="4-3转换操作"><a href="#4-3转换操作" class="headerlink" title="4.3转换操作"></a>4.3转换操作</h3><h4 id="4-3-1数据类型的转换"><a href="#4-3-1数据类型的转换" class="headerlink" title="4.3.1数据类型的转换"></a>4.3.1数据类型的转换</h4><h2 id="5-控制流程"><a href="#5-控制流程" class="headerlink" title="5 控制流程"></a>5 控制流程</h2><h3 id="5-1判断"><a href="#5-1判断" class="headerlink" title="5.1判断"></a>5.1判断</h3><h3 id="5-2-选择"><a href="#5-2-选择" class="headerlink" title="5.2 选择"></a>5.2 选择</h3><h3 id="5-3-循环"><a href="#5-3-循环" class="headerlink" title="5.3 循环"></a>5.3 循环</h3><h3 id="5-4-continue，break结束"><a href="#5-4-continue，break结束" class="headerlink" title="5.4 continue，break结束"></a>5.4 continue，break结束</h3><hr><h1 id="科普内容"><a href="#科普内容" class="headerlink" title="科普内容"></a>科普内容</h1><blockquote><p>JDK （java开发工具包） javac.exe</p><p>JVM （java 虚拟机）</p><p>JRE （java运行环境）</p></blockquote><h2 id="windows快捷键"><a href="#windows快捷键" class="headerlink" title="windows快捷键"></a>windows快捷键</h2><p>WIN + E 打开资源管理器</p><p>WIN + E  打开命令运行界面</p><h2 id="DOS-窗口"><a href="#DOS-窗口" class="headerlink" title="DOS 窗口"></a>DOS 窗口</h2><p>dir ： 查看目录</p><p>cd ： 进入某个目录</p><pre><code>.. 上一级目录</code></pre><p>​        . 当前目录</p><p>​        / 根目录</p><p>盘符： c:、 d: 、e:</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>在Java中，一个java文件只能有一个主类，即 只能有一个public 修饰的类。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-语法基础&quot;&gt;&lt;a href=&quot;#java-语法基础&quot; class=&quot;headerlink&quot; title=&quot;java 语法基础&quot;&gt;&lt;/a&gt;java 语法基础&lt;/h1&gt;&lt;h2 id=&quot;1数据类型&quot;&gt;&lt;a href=&quot;#1数据类型&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Code" scheme="http://yoursite.com/categories/Code/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>OWASP API Top 10</title>
    <link href="http://yoursite.com/2020/07/09/%E6%B8%97%E9%80%8F/owasp%20top10/"/>
    <id>http://yoursite.com/2020/07/09/渗透/owasp top10/</id>
    <published>2020-07-09T08:13:41.000Z</published>
    <updated>2020-07-09T08:41:39.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OWASP-API-TOP-10"><a href="#OWASP-API-TOP-10" class="headerlink" title="OWASP API TOP 10"></a>OWASP API TOP 10</h1><p>本文搬运自：<a href="https://apisecurity.io/encyclopedia/content/owasp/owasp-api-security-top-10.htm" target="_blank" rel="noopener">https://apisecurity.io/encyclopedia/content/owasp/owasp-api-security-top-10.htm</a></p><h2 id="TOP1：2019-—破碎的对象级别授权"><a href="#TOP1：2019-—破碎的对象级别授权" class="headerlink" title="TOP1：2019 —破碎的对象级别授权"></a>TOP1：2019 —破碎的对象级别授权</h2><p>没有对请求的id进行适当的检查，导致遍历id即可越权访问其他用户可访问的数据，这种攻击也称为IDOR（不安全的直接对象引用）。</p><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><ul><li>API调用参数使用通过API访问的资源的ID <code>/api/shop1/financial_info</code>。</li><li>攻击者用他们猜测出的另一种ID替换其资源的ID <code>/api/shop2/financial_info</code>。</li><li>该API不检查权限，而是允许请求通过。</li><li>如果ID可以枚举，则会加剧问题<code>/api/123/financial_info</code>。</li></ul><h3 id="如何预防"><a href="#如何预防" class="headerlink" title="如何预防"></a>如何预防</h3><ul><li>使用用户策略和层次结构实施授权检查。</li><li>不要依赖客户端发送的ID。请改用存储在会话对象中的ID。</li><li>检查每个客户端访问数据库请求的授权。</li><li>使用无法猜测的随机ID（UUID）。</li></ul><h2 id="TOP2：2019-—身份验证失败"><a href="#TOP2：2019-—身份验证失败" class="headerlink" title="TOP2：2019 —身份验证失败"></a>TOP2：2019 —身份验证失败</h2><p>API的身份验证可以伪造，token或sign本地生成可以伪造等都可以使得攻击者可以以其他用户的身份。</p><h3 id="用例-1"><a href="#用例-1" class="headerlink" title="用例"></a>用例</h3><ul><li>被视为“内部”的不受保护的API</li><li>不遵循行业最佳实践的弱认证</li><li>不会旋转的弱API密钥 （对称加密）</li><li>弱密码，纯文本密码，加密密码，散列错误密码，共享密码或默认密码</li><li>身份验证容易受到蛮力攻击和凭证填充</li><li>URL中包含的凭证和密钥</li><li>缺少访问令牌验证（包括JWT验证）</li><li>未签名或签名较弱的未到期JWT</li></ul><h3 id="如何预防-1"><a href="#如何预防-1" class="headerlink" title="如何预防"></a>如何预防</h3><ul><li>检查所有可能的方式以对所有API进行身份验证。</li><li>密码重置和一次性链接的API还允许用户进行身份验证，并且应同样严格地加以保护。</li><li>使用标准身份验证，令牌生成，密码存储和多因素身份验证（MFA）。</li><li>使用短期访问令牌。</li><li>对您的应用进行身份验证（以便您知道谁在与您聊天）。</li><li>使用更严格的速率限制进行身份验证，并实施锁定策略和弱密码检查。</li></ul><h2 id="TOP3：2019-—数据暴露过多"><a href="#TOP3：2019-—数据暴露过多" class="headerlink" title="TOP3：2019 —数据暴露过多"></a>TOP3：2019 —数据暴露过多</h2><p>将过多的数据返回给用户，比如请求用户名的API接口返回了 这个用户在数据库中的所有信息，这将使得你了解所有，这取决于客户端进行筛选。如果攻击者直接使用该API，他们将拥有全部。</p><h3 id="用例-2"><a href="#用例-2" class="headerlink" title="用例"></a>用例</h3><ul><li>该API返回完整的数据对象，因为它们存储在后端数据库中。</li><li>客户端应用程序过滤响应，仅显示用户真正需要查看的数据。</li><li>攻击者直接调用API，并获取UI会过滤掉的敏感数据。</li></ul><h3 id="如何预防-2"><a href="#如何预防-2" class="headerlink" title="如何预防"></a>如何预防</h3><ul><li>永远不要依赖客户端来过滤数据！</li><li>查看所有API响应，并使其适应API使用者的实际需求。</li><li>仔细定义所有API响应的架构。</li><li>不要忘记错误响应，也要定义正确的架构。</li><li>识别所有敏感数据或个人身份信息（PII），并证明其使用合理性。</li><li>强制执行响应检查以防止数据意外泄漏或异常。</li></ul><h2 id="TOP4：2019-—缺乏资源和速率限制"><a href="#TOP4：2019-—缺乏资源和速率限制" class="headerlink" title="TOP4：2019 —缺乏资源和速率限制"></a>TOP4：2019 —缺乏资源和速率限制</h2><p>没有针对过多的调用或有效载荷大小保护API。攻击者可以将其用于拒绝服务（DoS）和诸如蛮力攻击之类的身份验证缺陷。</p><h3 id="用例-3"><a href="#用例-3" class="headerlink" title="用例"></a>用例</h3><ul><li>攻击者通过发送超出其处理能力的请求使API过载。</li><li>攻击者以超过API处理速度的速度发送请求，从而阻塞了请求。</li><li>请求的大小或其中的某些字段超出了API可以处理的大小。</li><li>“ Zip炸弹”是指经过设计的存档文件，因此，解压缩这些文件会占用大量资源，并使API过载。</li></ul><h3 id="如何预防-3"><a href="#如何预防-3" class="headerlink" title="如何预防"></a>如何预防</h3><ul><li>定义适当的速率限制。</li><li>限制有效负载大小。</li><li>调整速率限制以匹配需要或应允许获得的API方法，客户端或地址。</li><li>添加压缩率检查。</li><li>定义容器资源的限制。</li></ul><h2 id="Top5：2019-—功能级别授权已损坏"><a href="#Top5：2019-—功能级别授权已损坏" class="headerlink" title="Top5：2019 —功能级别授权已损坏"></a>Top5：2019 —功能级别授权已损坏</h2><p>该API依赖于客户端以适当地使用用户级别或管理员级别的API。攻击者找出“隐藏的”管理API方法并直接调用它们。（可以在app反编译后寻找）</p><h3 id="用例-4"><a href="#用例-4" class="headerlink" title="用例"></a>用例</h3><ul><li>一些管理功能公开为API。</li><li>普通用户如果知道如何可以未经授权访问这些功能。</li><li>可以是知道URL的问题，或使用其他动词或参数的问题：<ul><li><code>/api/users/v1/user/myinfo</code></li><li><code>/api/admins/v1/users/all</code></li></ul></li></ul><h3 id="如何预防-4"><a href="#如何预防-4" class="headerlink" title="如何预防"></a>如何预防</h3><ul><li>不要依赖客户端来强制管理员访问。</li><li>默认情况下拒绝所有访问。</li><li>仅允许对属于适当组或角色的用户进行操作。</li><li>正确设计和测试授权。</li></ul><h2 id="TOP6：2019-—批量分配"><a href="#TOP6：2019-—批量分配" class="headerlink" title="TOP6：2019 —批量分配"></a>TOP6：2019 —批量分配</h2><p>该API会获取客户端提供的数据并将其存储，而不会对列入白名单的属性进行适当的过滤。攻击者可以尝试猜测对象属性或在其请求中提供其他对象属性，阅读文档，或查看API端点以获取在何处找到开口以修改其不应在后端存储的数据对象上使用的属性的线索。（对请求的数据未进行检测就保存）</p><h3 id="用例-5"><a href="#用例-5" class="headerlink" title="用例"></a>用例</h3><ul><li>该API无需正确过滤即可与数据结构一起使用。</li><li>接收到的有效负载被盲目转换为对象并存储。<ul><li>NodeJS：<br><code>var user = new User(req.body);</code><br><code>user.save();</code></li><li>滑轨：<br><code>@user = User.new(params[:user])</code></li></ul></li><li>攻击者可以通过查看<code>GET</code>请求数据来猜测字段。</li></ul><h3 id="如何预防-5"><a href="#如何预防-5" class="headerlink" title="如何预防"></a>如何预防</h3><ul><li>不要自动绑定传入的数据和内部对象。</li><li>明确定义您期望的所有参数和有效负载。</li><li>在对象架构中使用可以将<code>readOnly</code>属性集设置为<code>true</code>可通过API检索但绝不能修改的所有属性。</li><li>准确定义在设计时将在请求中接受的模式，类型和模式，并在运行时强制执行它们。</li></ul><h2 id="TOP7：2019-—安全配置错误"><a href="#TOP7：2019-—安全配置错误" class="headerlink" title="TOP7：2019 —安全配置错误"></a>TOP7：2019 —安全配置错误</h2><p>API服务器的配置不当使攻击者可以利用它们。</p><h3 id="用例-6"><a href="#用例-6" class="headerlink" title="用例"></a>用例</h3><ul><li>未修补的系统</li><li>未受保护的文件和目录</li><li>未硬化的图像</li><li>缺少，过时或配置错误的TLS</li><li>公开的存储或服务器管理面板</li><li>缺少CORS策略或安全标头</li><li>带堆栈跟踪的错误消息</li><li>启用了不必要的功能</li></ul><h3 id="如何预防-6"><a href="#如何预防-6" class="headerlink" title="如何预防"></a>如何预防</h3><ul><li>建立可重复的强化和修补过程。</li><li>自动发现配置缺陷。</li><li>禁用不必要的功能。</li><li>限制管理访问。</li><li>定义并执行所有输出，包括错误。</li></ul><h2 id="TOP8：2019-—注射"><a href="#TOP8：2019-—注射" class="headerlink" title="TOP8：2019 —注射"></a>TOP8：2019 —注射</h2><p>攻击者构造的API调用包括SQL，NoSQL，LDAP，OS或该API或背后的后端盲目执行的其他命令。</p><h3 id="用例-7"><a href="#用例-7" class="headerlink" title="用例"></a>用例</h3><ul><li>攻击者发送恶意输入以转发给内部解释器：<ul><li>的SQL</li><li>NoSQL</li><li>LDAP</li><li>操作系统命令</li><li>XML解析器</li><li>对象关系映射（ORM）</li></ul></li></ul><h3 id="如何预防-7"><a href="#如何预防-7" class="headerlink" title="如何预防"></a>如何预防</h3><ul><li>切勿信任您的API使用者，即使他们是内部使用者也是如此。</li><li>严格定义所有输入数据，例如模式，类型和字符串模式，并在运行时实施它们。</li><li>验证，过滤和清理所有传入的数据。</li><li>定义，限制和执行API输出，以防止数据泄漏。</li></ul><h2 id="TOP9：2019-—资产管理不当"><a href="#TOP9：2019-—资产管理不当" class="headerlink" title="TOP9：2019 —资产管理不当"></a>TOP9：2019 —资产管理不当</h2><p>攻击者发现未受到生产API良好保护的非生产API版本（例如，登台，测试，测试版或早期版本），然后使用这些版本来发起攻击。</p><h3 id="用例-8"><a href="#用例-8" class="headerlink" title="用例"></a>用例</h3><ul><li>DevOps，云，容器和Kubernetes使多个部署变得容易（例如，开发，测试，分支，暂存，旧版本）。</li><li>希望保持向后兼容性，以迫使旧的API继续运行。</li><li>旧版本或非生产版本均未正确维护，但是这些端点仍可以访问生产数据。</li><li>一旦通过一个端点进行了身份验证，攻击者就可以切换到另一个生产端点。</li></ul><h3 id="如何预防-8"><a href="#如何预防-8" class="headerlink" title="如何预防"></a>如何预防</h3><ul><li>保持所有API主机的最新清单。</li><li>限制访问任何不应该公开的内容。</li><li>限制对生产数据的访问，并将对生产和非生产数据的访问分开。</li><li>实施其他外部控件，例如API防火墙。</li><li>正确淘汰旧版本的API或对其进行反向移植安全修复。</li><li>实现严格的身份验证，重定向，CORS等。</li></ul><h3 id="TOP10：2019-—日志和监视不足"><a href="#TOP10：2019-—日志和监视不足" class="headerlink" title="TOP10：2019 —日志和监视不足"></a>TOP10：2019 —日志和监视不足</h3><p>缺乏适当的日志记录，监视和警报功能，攻击者和攻击者都不会被察觉。</p><h3 id="用例-9"><a href="#用例-9" class="headerlink" title="用例"></a>用例</h3><ul><li>日志不受完整性保护。</li><li>日志未集成到安全信息和事件管理（SIEM）系统中。</li><li>日志和警报设计不当。</li><li>公司依靠手动而不是自动化系统。</li></ul><h3 id="如何预防-9"><a href="#如何预防-9" class="headerlink" title="如何预防"></a>如何预防</h3><ul><li>记录失败尝试，拒绝访问，输入验证失败或安全策略检查中的任何失败。</li><li>确保日志已格式化，以便其他工具也可以使用它们。</li><li>保护日志，例如高度敏感的信息。</li><li>包括足够的详细信息以识别攻击者。</li><li>避免在日志中包含敏感数据-如果您需要信息以进行调试，请对其进行部分编辑。</li><li>与SIEM和其他仪表板，监视和警报工具集成。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OWASP-API-TOP-10&quot;&gt;&lt;a href=&quot;#OWASP-API-TOP-10&quot; class=&quot;headerlink&quot; title=&quot;OWASP API TOP 10&quot;&gt;&lt;/a&gt;OWASP API TOP 10&lt;/h1&gt;&lt;p&gt;本文搬运自：&lt;a href=
      
    
    </summary>
    
    
      <category term="APP" scheme="http://yoursite.com/categories/APP/"/>
    
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>jni函数hook</title>
    <link href="http://yoursite.com/2020/06/18/%E9%80%86%E5%90%91/XposedFridaHook%E7%B3%BB%E5%88%97/jni%E5%87%BD%E6%95%B0hook%E8%AE%A1%E7%AE%97%E5%9C%B0%E5%9D%80%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/06/18/逆向/XposedFridaHook系列/jni函数hook计算地址方式/</id>
    <published>2020-06-18T08:09:27.000Z</published>
    <updated>2020-06-18T10:50:43.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jni函数hook（计算-地址方式）"><a href="#jni函数hook（计算-地址方式）" class="headerlink" title="jni函数hook（计算 地址方式）"></a>jni函数hook（计算 地址方式）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">function hookTest9() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var env = Java.vm.tryGetEnv();</span><br><span class="line">        console.log(JSON.stringify(env));</span><br><span class="line">        var newStringUtfAddr = ptr(env.handle).readPointer().add(0x29C).readPointer();</span><br><span class="line">        console.log(newStringUtfAddr);</span><br><span class="line">        if (newStringUtfAddr != null) &#123;</span><br><span class="line">            Interceptor.attach(newStringUtfAddr, &#123;</span><br><span class="line">                onEnter: function (args) &#123;</span><br><span class="line"></span><br><span class="line">                    //console.log(hexdump(args[1]));</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                onLeave: function (retval) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        var registerNativesAddr = ptr(env.handle).readPointer().add(0x35C).readPointer();</span><br><span class="line">        console.log(registerNativesAddr);</span><br><span class="line">        if (registerNativesAddr != null) &#123;</span><br><span class="line">            Interceptor.attach(registerNativesAddr, &#123;</span><br><span class="line">                onEnter: function (args) &#123;</span><br><span class="line">                    console.log(args[2].readPointer().readCString())</span><br><span class="line">                    console.log((args[2]).add(Process.pointerSize).readPointer().readCString()); // 这个是结构体 process.pointerSize() 移动一个位置签名</span><br><span class="line"></span><br><span class="line">                    console.log(args[2].add(Process.pointerSize *2).readPointer())</span><br><span class="line">                    console.log(hexdump(args[2]));</span><br><span class="line">                    console.log(Module.findBaseAddress(&quot;libxiaojianbang.so&quot;).add(0x22F0))</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                onLeave: function (retval) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200618134812.png" alt></p><h1 id="hook-libart-so"><a href="#hook-libart-so" class="headerlink" title="hook libart.so"></a>hook libart.so</h1><p>jni 在编译后在libart.so 里</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jni函数hook（计算-地址方式）&quot;&gt;&lt;a href=&quot;#jni函数hook（计算-地址方式）&quot; class=&quot;headerlink&quot; title=&quot;jni函数hook（计算 地址方式）&quot;&gt;&lt;/a&gt;jni函数hook（计算 地址方式）&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Hook jni 主动调用</title>
    <link href="http://yoursite.com/2020/06/18/%E9%80%86%E5%90%91/XposedFridaHook%E7%B3%BB%E5%88%97/jni%20%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8/"/>
    <id>http://yoursite.com/2020/06/18/逆向/XposedFridaHook系列/jni 主动调用/</id>
    <published>2020-06-18T08:09:27.000Z</published>
    <updated>2020-06-18T04:43:54.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hook-jni-主动调用"><a href="#Hook-jni-主动调用" class="headerlink" title="Hook jni 主动调用"></a>Hook jni 主动调用</h1><p>要对hellofromc 进行主动调用，修改返回值，但是这里不能直接通过replace去修改返回值，而是要通过newstringutf 去修改返回值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function hookTest8()&#123;</span><br><span class="line">    var funcAddr = Module.findExportByName(&quot;libxiaojianbang.so&quot;, &quot;Java_com_xiaojianbang_app_NativeHelper_helloFromC&quot;);</span><br><span class="line">    console.log(&quot;hellofromC \r\n&quot;,funcAddr);</span><br><span class="line">    if(funcAddr != null)&#123;</span><br><span class="line">        Interceptor.attach(funcAddr,&#123;</span><br><span class="line">            onEnter: function(args)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: function(retval)&#123;</span><br><span class="line">                var env = Java.vm.tryGetEnv();</span><br><span class="line">                var jstr = env.newStringUtf(&quot;www.zygx8.com&quot;);  // 小驼峰写法 C++ 方式 主动调用jni函数 cstr转jstr</span><br><span class="line">                retval.replace(jstr);</span><br><span class="line">                var cstr = env.getStringUtfChars(jstr); //主动调用 jstr转cstr</span><br><span class="line">                console.log(cstr.readCString());</span><br><span class="line">                console.log(hexdump(cstr));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200618123658.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hook-jni-主动调用&quot;&gt;&lt;a href=&quot;#Hook-jni-主动调用&quot; class=&quot;headerlink&quot; title=&quot;Hook jni 主动调用&quot;&gt;&lt;/a&gt;Hook jni 主动调用&lt;/h1&gt;&lt;p&gt;要对hellofromc 进行主动调用，修改返回值，
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Hook 计算非导出函数地址</title>
    <link href="http://yoursite.com/2020/06/18/%E9%80%86%E5%90%91/XposedFridaHook%E7%B3%BB%E5%88%97/hook%20%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2020/06/18/逆向/XposedFridaHook系列/hook 读写内存数据/</id>
    <published>2020-06-18T01:46:58.000Z</published>
    <updated>2020-06-18T04:28:25.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hook-读写内存数据"><a href="#hook-读写内存数据" class="headerlink" title="hook 读写内存数据"></a>hook 读写内存数据</h1><p>对string字符串，可能是加密的，可以通过直接hook 加载的内存数据来读取解密状态的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">读取内存字符串数据</span><br><span class="line"></span><br><span class="line">function hookTest7() &#123;</span><br><span class="line">    var soAddr = Module.findBaseAddress(&quot;libxiaojianbang.so&quot;);</span><br><span class="line">    console.log(soAddr);</span><br><span class="line">    if(soAddr != NULL)&#123;</span><br><span class="line">        console.log(soAddr.add(0x2764).readCString())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200618115949.png" alt></p><p>写内存出现了报错，还未解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">function hexToBytes(str) &#123;</span><br><span class="line">    var pos = 0;</span><br><span class="line">    var len = str.length;</span><br><span class="line">    if (len % 2 != 0) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    len /= 2;</span><br><span class="line">    var hexA = new Array();</span><br><span class="line">    for (var i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        var s = str.substr(pos, 2);</span><br><span class="line">        var v = parseInt(s, 16);</span><br><span class="line">        hexA.push(v);</span><br><span class="line">        pos += 2;</span><br><span class="line">    &#125;</span><br><span class="line">    return hexA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stringToBytes(str) &#123;</span><br><span class="line">    var ch, st, re = [];</span><br><span class="line">    for (var i = 0; i &lt; str.length; i++ ) &#123;</span><br><span class="line">        ch = str.charCodeAt(i);</span><br><span class="line">        st = [];</span><br><span class="line">        do &#123;</span><br><span class="line">            st.push( ch &amp; 0xFF );</span><br><span class="line">            ch = ch &gt;&gt; 8;</span><br><span class="line">        &#125;</span><br><span class="line">        while ( ch );</span><br><span class="line">        re = re.concat( st.reverse() );</span><br><span class="line">    &#125;</span><br><span class="line">    return re;</span><br><span class="line">&#125;</span><br><span class="line">function hookTest7()&#123;</span><br><span class="line">    var soAddr = Module.findBaseAddress(&quot;libxiaojianbang.so&quot;);</span><br><span class="line">    console.log(soAddr);</span><br><span class="line">    if(soAddr != null)&#123;</span><br><span class="line">        //console.log(soAddr.add(0x2C00).readCString());</span><br><span class="line">        //console.log(hexdump(soAddr.add(0x2C00)));  //读取指定地址的字符串</span><br><span class="line"></span><br><span class="line">        //var strByte = soAddr.add(0x2C00).readByteArray(16); //读内存</span><br><span class="line">        //console.log(strByte);</span><br><span class="line">        </span><br><span class="line">        //soAddr.add(0x2C00).writeByteArray(stringToBytes(&quot;xiaojianbang&quot;)); //写内存</span><br><span class="line">        //console.log(hexdump(soAddr.add(0x2C00)));  //dump指定内存</span><br><span class="line"></span><br><span class="line">        //var bytes = Module.readByteArray(soAddr.add(0x2C00), 16);</span><br><span class="line">        //console.log(bytes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hook-读写内存数据&quot;&gt;&lt;a href=&quot;#hook-读写内存数据&quot; class=&quot;headerlink&quot; title=&quot;hook 读写内存数据&quot;&gt;&lt;/a&gt;hook 读写内存数据&lt;/h1&gt;&lt;p&gt;对string字符串，可能是加密的，可以通过直接hook 加载的内存
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Hook 导出函数和修改函数参数返回值</title>
    <link href="http://yoursite.com/2020/06/15/%E9%80%86%E5%90%91/XposedFridaHook%E7%B3%BB%E5%88%97/Hook%20%E5%AF%BC%E5%87%BA%E5%87%BD%E6%95%B0%E5%92%8C%E4%BF%AE%E6%94%B9%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    <id>http://yoursite.com/2020/06/15/逆向/XposedFridaHook系列/Hook 导出函数和修改函数参数返回值/</id>
    <published>2020-06-15T01:46:58.000Z</published>
    <updated>2020-06-15T02:57:00.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hook-导出函数"><a href="#Hook-导出函数" class="headerlink" title="Hook 导出函数"></a>Hook 导出函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// hook 导出函数</span><br><span class="line">function hookTest1() &#123;</span><br><span class="line">     var addAddr = Module.findExportByName(&quot;libxiaojianbang.so&quot;, &quot;Java_com_xiaojianbang_app_NativeHelper_add&quot;);</span><br><span class="line">     console.log(addAddr);</span><br><span class="line"></span><br><span class="line">     if (addAddr != NULL)&#123;</span><br><span class="line">         Interceptor.attach(addAddr,&#123;</span><br><span class="line">             onEnter:function (args) &#123;</span><br><span class="line">                console.log(args[0]);</span><br><span class="line">                console.log(args[1]);</span><br><span class="line">                args[2] = ptr(1000);</span><br><span class="line">                console.log(args[2]);</span><br><span class="line">                console.log(args[3]);</span><br><span class="line">                console.log(args[4]);</span><br><span class="line"></span><br><span class="line">             &#125;,</span><br><span class="line">             onLeave:function (retval) &#123;</span><br><span class="line">                console.log(retval);</span><br><span class="line">                console.log(retval.toInt32());</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">     hookTest1();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200615100331.png" alt></p><h2 id="hook-修改函数参数返回值"><a href="#hook-修改函数参数返回值" class="headerlink" title="hook 修改函数参数返回值"></a>hook 修改函数参数返回值</h2><p>修改<code>onEnter</code> 参数的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function hookTest1() &#123;</span><br><span class="line">     var addAddr = Module.findExportByName(&quot;libxiaojianbang.so&quot;, &quot;Java_com_xiaojianbang_app_NativeHelper_add&quot;);</span><br><span class="line">     console.log(addAddr);</span><br><span class="line"></span><br><span class="line">     if (addAddr != NULL)&#123;</span><br><span class="line">         Interceptor.attach(addAddr,&#123;</span><br><span class="line">             onEnter:function (args) &#123;</span><br><span class="line">                console.log(args[0]);</span><br><span class="line">                console.log(args[1]);</span><br><span class="line">                args[2] = ptr(1000);  // 这里这个可以修改参数的值，ptr是 new Nativepointer 的简写</span><br><span class="line">                console.log(args[2]);</span><br><span class="line">                console.log(args[3]);</span><br><span class="line">                console.log(args[4]);</span><br><span class="line"></span><br><span class="line">             &#125;,</span><br><span class="line">             onLeave:function (retval) &#123;</span><br><span class="line">                console.log(retval);</span><br><span class="line">                console.log(retval.toInt32());</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>onLeave</code>的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function hookTest1() &#123;</span><br><span class="line">    var addAddr = Module.findExportByName(&quot;libxiaojianbang.so&quot;, &quot;Java_com_xiaojianbang_app_NativeHelper_add&quot;);</span><br><span class="line">    console.log(addAddr);</span><br><span class="line"></span><br><span class="line">    if (addAddr != NULL) &#123;</span><br><span class="line">        Interceptor.attach(addAddr, &#123;</span><br><span class="line">            onEnter: function (args) &#123;</span><br><span class="line">                console.log(args[0]);</span><br><span class="line">                console.log(args[1]);</span><br><span class="line">                args[2] = ptr(1000);</span><br><span class="line">                console.log(args[2]);</span><br><span class="line">                console.log(args[3]);</span><br><span class="line">                console.log(args[4]);</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: function (retval) &#123;</span><br><span class="line">                retval.replace(123999) // 通过replace 去修改返回值参数</span><br><span class="line">                console.log(retval);</span><br><span class="line">                console.log(retval.toInt32());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hook-导出函数&quot;&gt;&lt;a href=&quot;#Hook-导出函数&quot; class=&quot;headerlink&quot; title=&quot;Hook 导出函数&quot;&gt;&lt;/a&gt;Hook 导出函数&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Hook 计算非导出函数地址</title>
    <link href="http://yoursite.com/2020/06/15/%E9%80%86%E5%90%91/XposedFridaHook%E7%B3%BB%E5%88%97/Hook%20%E9%9D%9E%E5%AF%BC%E5%87%BA%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80/"/>
    <id>http://yoursite.com/2020/06/15/逆向/XposedFridaHook系列/Hook 非导出函数地址/</id>
    <published>2020-06-15T01:46:58.000Z</published>
    <updated>2020-06-15T03:38:22.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hook-计算非导出函数地址"><a href="#Hook-计算非导出函数地址" class="headerlink" title="Hook 计算非导出函数地址"></a>Hook 计算非导出函数地址</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">计算公式：</span><br><span class="line">基址 + 函数偏移地址 + 1 thumb指令集 2 或4</span><br><span class="line">基址 + 函数偏移地址  arm 指令集 4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function hookTest2() &#123;</span><br><span class="line">    var soAddr = Module.findBaseAddress(&quot;libxiaojianbang.so&quot;);</span><br><span class="line">    console.log(soAddr);</span><br><span class="line">    var funcAddr = soAddr.add(0x1848 + 1); // 基址加上偏移地址</span><br><span class="line">    console.log(funcAddr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过proc-文件系统获取地址"><a href="#通过proc-文件系统获取地址" class="headerlink" title="通过proc 文件系统获取地址"></a>通过proc 文件系统获取地址</h2><p>在 <code>proc/当前进程id/</code> 下存在很多文件</p><p>在<code>proc/当前id/net/tcp</code> 记录开放端口  69A2 对应 27042</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200615113508.png" alt></p><p>在<code>proc/当前id/maps</code> 记录加载的依赖库，可以找到so文件的基址</p><p> <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200615113638.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hook-计算非导出函数地址&quot;&gt;&lt;a href=&quot;#Hook-计算非导出函数地址&quot; class=&quot;headerlink&quot; title=&quot;Hook 计算非导出函数地址&quot;&gt;&lt;/a&gt;Hook 计算非导出函数地址&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Hook dlopen</title>
    <link href="http://yoursite.com/2020/06/15/%E9%80%86%E5%90%91/XposedFridaHook%E7%B3%BB%E5%88%97/hook%20dlopen/"/>
    <id>http://yoursite.com/2020/06/15/逆向/XposedFridaHook系列/hook dlopen/</id>
    <published>2020-06-15T01:46:58.000Z</published>
    <updated>2020-06-18T03:53:43.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hook-dlopen"><a href="#hook-dlopen" class="headerlink" title="hook dlopen"></a>hook dlopen</h1><p>在刚开始hook 我们必须使得app加载so 才能hook， 我们可以hook<code>dlopen</code> 获取到so在那加载，在高版本中有一些so会走<code>android_dlopen_ext</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">function hookTest6()&#123;</span><br><span class="line">    var dlopen = Module.findExportByName(null, &quot;dlopen&quot;);</span><br><span class="line">    console.log(dlopen);</span><br><span class="line">    if(dlopen != null)&#123;</span><br><span class="line">        Interceptor.attach(dlopen,&#123;</span><br><span class="line">            onEnter: function(args)&#123;</span><br><span class="line">                var soName = args[0].readCString();</span><br><span class="line">                console.log(soName);</span><br><span class="line">                if(soName.indexOf(&quot;libxiaojianbang.so&quot;) != -1)&#123;</span><br><span class="line">                    this.hook = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: function(retval)&#123;</span><br><span class="line">                //if(this.hook) &#123; hookTest5() &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var android_dlopen_ext = Module.findExportByName(null, &quot;android_dlopen_ext&quot;);</span><br><span class="line">    console.log(android_dlopen_ext);</span><br><span class="line">    if(android_dlopen_ext != null)&#123;</span><br><span class="line">        Interceptor.attach(android_dlopen_ext,&#123;</span><br><span class="line">            onEnter: function(args)&#123;</span><br><span class="line">                var soName = args[0].readCString();</span><br><span class="line">                console.log(soName);</span><br><span class="line">                if(soName.indexOf(&quot;libxiaojianbang.so&quot;) != -1)&#123;</span><br><span class="line">                    this.hook = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: function(retval)&#123;</span><br><span class="line">                //if(this.hook) &#123; hookTest5() &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我在点击<code>cmd5</code>的时候 就会爆出调用的so</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200618114840.png" alt></p><p>然后在调用dlopen之后我们点击cmd5 看看是否能加载成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function hookTest6()&#123;</span><br><span class="line">    var dlopen = Module.findExportByName(null, &quot;dlopen&quot;);</span><br><span class="line">    console.log(&quot;dloopen \r\n&quot;,dlopen);</span><br><span class="line">    if(dlopen != null)&#123;</span><br><span class="line">        Interceptor.attach(dlopen,&#123;</span><br><span class="line">            onEnter: function(args)&#123;</span><br><span class="line">                var soName = args[0].readCString();</span><br><span class="line">                console.log(soName);</span><br><span class="line">                if(soName.indexOf(&quot;libxiaojianbang.so&quot;) != -1)&#123;</span><br><span class="line">                    this.hook = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: function(retval)&#123;</span><br><span class="line">                if(this.hook) &#123; hookTest5() &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    var android_dlopen_ext = Module.findExportByName(null, &quot;android_dlopen_ext&quot;);</span><br><span class="line">    console.log(android_dlopen_ext);</span><br><span class="line">    if(android_dlopen_ext != null)&#123;</span><br><span class="line">        Interceptor.attach(android_dlopen_ext,&#123;</span><br><span class="line">            onEnter: function(args)&#123;</span><br><span class="line">                var soName = args[0].readCString();</span><br><span class="line">                console.log(soName);</span><br><span class="line">                if(soName.indexOf(&quot;libxiaojianbang.so&quot;) != -1)&#123;</span><br><span class="line">                    this.hook = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: function(retval)&#123;</span><br><span class="line">                if(this.hook) &#123; hookTest5() &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200618115153.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hook-dlopen&quot;&gt;&lt;a href=&quot;#hook-dlopen&quot; class=&quot;headerlink&quot; title=&quot;hook dlopen&quot;&gt;&lt;/a&gt;hook dlopen&lt;/h1&gt;&lt;p&gt;在刚开始hook 我们必须使得app加载so 才能hook， 我们可
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Hook 获取指针参数的返回值</title>
    <link href="http://yoursite.com/2020/06/15/%E9%80%86%E5%90%91/XposedFridaHook%E7%B3%BB%E5%88%97/%E8%8E%B7%E5%8F%96%E6%8C%87%E9%92%88%E5%8F%82%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    <id>http://yoursite.com/2020/06/15/逆向/XposedFridaHook系列/获取指针参数的返回值/</id>
    <published>2020-06-15T01:46:58.000Z</published>
    <updated>2020-06-18T03:31:55.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hook-获取指针参数的返回值"><a href="#Hook-获取指针参数的返回值" class="headerlink" title="Hook 获取指针参数的返回值"></a>Hook 获取指针参数的返回值</h1><p>在c语言中，一般都会以指针传递返回的值 ，没有return 或者return为true</p><p>hook sub_750 打印参数和输出</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200618112010.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function hookTest5()&#123;</span><br><span class="line">    var soAddr = Module.findBaseAddress(&quot;libxiaojianbang.so&quot;);</span><br><span class="line">    //console.log(&quot;soAddr --&gt;&quot;+ soAddr);</span><br><span class="line">    var sub_750 = soAddr.add(0x750); //函数地址计算 thumb+1 ARM不加</span><br><span class="line">    //console.log(&quot;sub_750--&gt;&quot;+sub_750);</span><br><span class="line"></span><br><span class="line">     if(sub_750 != null)&#123;</span><br><span class="line">        Interceptor.attach(sub_750,&#123;</span><br><span class="line">            onEnter: function(args)&#123;</span><br><span class="line">                console.log(&quot;args[0]:\r\n&quot;,hexdump(args[0]));</span><br><span class="line">                console.log(&quot;args[1]:\r\n&quot;,args[1].readCString())</span><br><span class="line">                console.log(&quot;args[2]:\r\n&quot;,args[2].toInt32());</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: function(retval)&#123;</span><br><span class="line">                console.log(&quot;retval:\r\n&quot;,hexdump(retval));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200618112949.png" alt></p><blockquote><p>在打印sub_1AA0的时候发现，单纯打印v10的输入是没有用的，结果也不对应，这时候可能是函数内部对v10进行了某种操作，对于这种情况可以将v10的地址给一个变量，在函数运行结束后打印v10</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function hookTest5()&#123;</span><br><span class="line">    var soAddr = Module.findBaseAddress(&quot;libxiaojianbang.so&quot;);</span><br><span class="line">   </span><br><span class="line">     var sub_1AA0= soAddr.add(0x1AA0); //函数地址计算 thumb+1 ARM不加</span><br><span class="line">    //console.log(&quot;sub_750--&gt;&quot;+sub_750);</span><br><span class="line">     if(sub_1AA0 != null)&#123;</span><br><span class="line">        Interceptor.attach(sub_1AA0,&#123;</span><br><span class="line">            onEnter: function(args)&#123;</span><br><span class="line">                this.args1 = args[1];</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: function(retval)&#123;</span><br><span class="line">                console.log(hexdump(this.args1));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200618112726.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hook-获取指针参数的返回值&quot;&gt;&lt;a href=&quot;#Hook-获取指针参数的返回值&quot; class=&quot;headerlink&quot; title=&quot;Hook 获取指针参数的返回值&quot;&gt;&lt;/a&gt;Hook 获取指针参数的返回值&lt;/h1&gt;&lt;p&gt;在c语言中，一般都会以指针传递返回的
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Hook so 导入导出表</title>
    <link href="http://yoursite.com/2020/06/11/%E9%80%86%E5%90%91/XposedFridaHook%E7%B3%BB%E5%88%97/hook%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/06/11/逆向/XposedFridaHook系列/hook导入导出表/</id>
    <published>2020-06-11T08:09:27.000Z</published>
    <updated>2020-06-15T01:46:46.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hook-so-导入导出表"><a href="#hook-so-导入导出表" class="headerlink" title="hook so 导入导出表"></a>hook so 导入导出表</h1><h2 id="启动frida"><a href="#启动frida" class="headerlink" title="启动frida"></a>启动frida</h2><p>打开两个cmd 窗口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一个cmd窗口</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd /data/local/tmp</span><br><span class="line">./fx  // 这个是frida-server-12.8.14-android-x86的缩写</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第二个cmd窗口</span><br><span class="line">adb froward tcp:27042 tcp:27042</span><br><span class="line">frida -U com.xiaojianbang.app -l hookso.js</span><br></pre></td></tr></table></figure><h2 id="编写frida-脚本"><a href="#编写frida-脚本" class="headerlink" title="编写frida 脚本"></a>编写frida 脚本</h2><h3 id="获取导入函数信息"><a href="#获取导入函数信息" class="headerlink" title="获取导入函数信息"></a>获取导入函数信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">先打印一下导入函数名</span><br><span class="line">function hookso()&#123;</span><br><span class="line">    var imports = Module.enumerateImports(&quot;libxiaojianbang.so&quot;)</span><br><span class="line">    for(var i = 0; i &lt; imports.length; i++)&#123;</span><br><span class="line">        console.log(JSON.stringify(imports[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">    hookso();</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p>可以看到导入的函数、模块、地址</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200611162048.png" alt></p><h3 id="获取某导入函数的信息"><a href="#获取某导入函数的信息" class="headerlink" title="获取某导入函数的信息"></a>获取某导入函数的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function hookso()&#123;</span><br><span class="line">    var imports = Module.enumerateImports(&quot;libxiaojianbang.so&quot;)</span><br><span class="line">    for(var i = 0; i &lt; imports.length; i++)&#123;</span><br><span class="line">        //console.log(JSON.stringify(imports[i]));</span><br><span class="line">        if (imports[i].name == &quot;strncat&quot;)</span><br><span class="line">            console.log(JSON.stringify(imports[i]));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">    hookso();</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200611162805.png" alt></p><h3 id="获取导出函数信息"><a href="#获取导出函数信息" class="headerlink" title="获取导出函数信息"></a>获取导出函数信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function hookso()&#123;</span><br><span class="line">    var exports = Module.enumerateExports(&quot;libxiaojianbang.so&quot;)</span><br><span class="line">    for(var i = 0; i &lt; exports.length; i++)&#123;</span><br><span class="line">    console.log(JSON.stringify(exports[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">    hookso();</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/6/20200611163353.png" alt></p><h3 id="获取导出函数地址"><a href="#获取导出函数地址" class="headerlink" title="获取导出函数地址"></a>获取导出函数地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">function hookso()&#123;</span><br><span class="line">    // 获取导出函数地址</span><br><span class="line">    var addr = Module.findExportByName(&quot;libxiaojianbang.so&quot;,&quot;Java_com_xiaojianbang_app_NativeHelper_add&quot;)</span><br><span class="line">    console.log(addr)</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">    hookso();</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hook-so-导入导出表&quot;&gt;&lt;a href=&quot;#hook-so-导入导出表&quot; class=&quot;headerlink&quot; title=&quot;hook so 导入导出表&quot;&gt;&lt;/a&gt;hook so 导入导出表&lt;/h1&gt;&lt;h2 id=&quot;启动frida&quot;&gt;&lt;a href=&quot;#启动
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Hook Java层通杀</title>
    <link href="http://yoursite.com/2020/06/11/%E9%80%86%E5%90%91/XposedFridaHook%E7%B3%BB%E5%88%97/Hook%E5%BC%80%E5%A7%8B/"/>
    <id>http://yoursite.com/2020/06/11/逆向/XposedFridaHook系列/Hook开始/</id>
    <published>2020-06-11T08:09:27.000Z</published>
    <updated>2020-06-11T08:09:38.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hook-通杀"><a href="#Hook-通杀" class="headerlink" title="Hook 通杀"></a>Hook 通杀</h1><h2 id="Hook-普通方法和修改函数参数返回值"><a href="#Hook-普通方法和修改函数参数返回值" class="headerlink" title="Hook 普通方法和修改函数参数返回值"></a>Hook 普通方法和修改函数参数返回值</h2><p>fradaserver 是手机端的，</p><ol><li>android低版本 frida 尽量低版本</li><li>fridaserver版本要与frida库版本一致</li><li>不同平台用不同fridaserver</li><li>不要和xposed装一起，新疆模拟器，刷机</li></ol><p>设备要求:</p><p>​    root</p><pre><code>调试</code></pre><p>下载frida-server push到手机中 (注意查看手机是86的还是64的)</p><p><code>adb push .\frida-server-12.8.14-android-x86 /data/local/tmp/fsx86</code></p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200319214805400.png" alt="image-20200319214805400"></p><p>之后cd到tmp目录下</p><p>先给fsx86 赋权  <code>chmod 777 fsx86</code></p><p>之后执行即可。 <code>./fsx86</code></p><p>执行后有一个报错，这里是版本出现的问题，会有一些小bug ，不影响使用，最好还是在真机中调试</p><p><code>WARNING: linker: ./fsx86: unused DT entry: type 0x6ffffef5 arg 0x1c24</code></p><h2 id="插入一个学习"><a href="#插入一个学习" class="headerlink" title="插入一个学习"></a>插入一个学习</h2><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200320103048870.png" alt="image-20200320103048870"></p><p>Hook 构造方法</p><p>​    绕过一些验证</p><p>​    构造方法</p><p>​    <code>money.$init.implementation = function(){}</code></p><p>Hook 重载方法</p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200320105658343.png" alt="image-20200320105658343"></p><p>Hook 重载方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function hooktest2() &#123;</span><br><span class="line">    //Error: test(): has more than one overload, use .overload(&lt;signature&gt;)</span><br><span class="line">    var utils = Java.use(&quot;com.xiaojianbang.app.Utils&quot;);</span><br><span class="line">    utils.test.overload(&apos;int&apos;).implementation = function (a) &#123;</span><br><span class="line">        a = 888;</span><br><span class="line">        var retval = this.test();</span><br><span class="line">        console.log(a, retval);</span><br><span class="line">        return retval;</span><br><span class="line">    &#125;;</span><br><span class="line">    utils.test.overload().implementation = function () &#123;</span><br><span class="line">        var retval = this.test();</span><br><span class="line">        console.log(retval);</span><br><span class="line">        return retval;</span><br><span class="line">    &#125;;</span><br><span class="line">    utils.test.overload(&apos;com.xiaojianbang.app.Money&apos;).implementation = function (a) &#123;</span><br><span class="line">        var retval = this.test(a);</span><br><span class="line">        console.log(retval);</span><br><span class="line">        return retval;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hook 所有重载方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function hookTest3() &#123;</span><br><span class="line">    // hook 方法的所有重载</span><br><span class="line">    var utils = Java.use(&quot;com.xiaojianbang.app.Utils&quot;);</span><br><span class="line">    console.log(utils.test.overloads.length);</span><br><span class="line">    for (var i = 0; i &lt; utils.test.overloads.length; i++) &#123;</span><br><span class="line">        utils.test.overloads[i].implementation = function () &#123;</span><br><span class="line">            // console.log(JSON.stringify(arguments));</span><br><span class="line"></span><br><span class="line">            if (arguments.length == 0) &#123;</span><br><span class="line">                return &quot;调用没有参数的&quot;;</span><br><span class="line">            &#125; else if (arguments.length == 1)&#123;</span><br><span class="line">                if (JSON.stringify(arguments).indexOf(&quot;Money&quot;) != -1)&#123;</span><br><span class="line">                    return &quot;调用了Money参数的&quot;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    return &quot;调用了Int 类型的&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">                arguments[0] = 1000;</span><br><span class="line">            // console.log(arguments.length);</span><br><span class="line">            // apply 改变所属</span><br><span class="line">            return this.test.apply(this, arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hook 构造参数与对象实例化</p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200321172539738.png" alt="image-20200321172539738"></p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200321173626852.png" alt="image-20200321173626852"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function hooktest2() &#123;</span><br><span class="line">    //Error: test(): has more than one overload, use .overload(&lt;signature&gt;)</span><br><span class="line">    var utils = Java.use(&quot;com.xiaojianbang.app.Utils&quot;);</span><br><span class="line">    var money = Java.use(&quot;com.xiaojianbang.app.Money&quot;);</span><br><span class="line"></span><br><span class="line">    utils.test.overload(&apos;int&apos;).implementation = function (a) &#123;</span><br><span class="line">        a = 888;</span><br><span class="line">        var retval = this.test(money.$new(&quot;日元&quot;, 1000000)); // 对象实例化</span><br><span class="line">        console.log(a, retval);</span><br><span class="line">        return retval;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>hook 实例化</p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200321174929718.png" alt="image-20200321174929718"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function hookTest5() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        //静态字段的修改</span><br><span class="line">        var money = Java.use(&quot;com.xiaojianbang.app.Money&quot;);</span><br><span class="line">        //send(JSON.stringify(money.flag));</span><br><span class="line">        money.flag.value = &quot;ceshi&quot;;</span><br><span class="line">        console.log(&apos;log&apos;, money.flag.value);</span><br><span class="line">        // 非静态字段的修改</span><br><span class="line">        Java.choose(&quot;com.xiaojianbang.app.Money&quot;, &#123;</span><br><span class="line">            onMatch: function (obj) &#123;</span><br><span class="line">                obj._name.value = &quot;ouyuan&quot;; // 字段与函数名相同， 前面加下划线</span><br><span class="line">                obj.num.value = 15254131;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 获取所有的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function hookTest7() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch:function (name,handle) &#123;</span><br><span class="line">                if (name.indexOf(&quot;com.xiaojianbang.app&quot;) != -1)&#123;</span><br><span class="line">                    console.log(name);</span><br><span class="line">                    var clazz = Java.use(name);</span><br><span class="line">                    var methods = clazz.class.getDeclaredMethods();</span><br><span class="line">                    console.log(methods)</span><br><span class="line">                    for (var i = 0 ; i&lt; methods.length;i++)&#123;</span><br><span class="line">                        console.log(methods[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete:function () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var classes = Java.enumerateLoadedClassesSync();</span><br><span class="line">for (var i = 0 ; i &lt; classes.length ; i++)&#123;</span><br><span class="line">    if (classes[i].indexOf(&quot;com.xiaojianbang.app&quot;) != -1)&#123;</span><br><span class="line">        console.log(classes[i]);</span><br><span class="line">        var clazz = Java.use(classes[i]);</span><br><span class="line">        var methods = clazz.class.getDeclaredMethods();</span><br><span class="line">        for (var j = 0 ;j &lt; methods.length ;j++)&#123;</span><br><span class="line">            console.log(methods[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-回笼重造"><a href="#Hook-回笼重造" class="headerlink" title="Hook 回笼重造"></a>Hook 回笼重造</h1><img src="E:\博客\andorid逆向\Frida学习\Hook开始.assets\image-20200324171350015.png" alt="image-20200324171350015" style="zoom:50%;"><blockquote><p>xposed 框架替换了很多文件，如果要从xposed转frida 需要刷机</p></blockquote><p>修改debuggable 参考：<a href="https://www.bodkin.ren/index.php/archives/533/" target="_blank" rel="noopener">https://www.bodkin.ren/index.php/archives/533/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[Go0s]: ~/Security/_Tools/Android/mprop/armeabi-v7a ✗ master*</span><br><span class="line">➜  adb push mprop /data/local/tmp              </span><br><span class="line">mprop: 1 file pushed. 1.6 MB/s (17712 bytes in 0.011s)</span><br><span class="line">[Go0s]: ~ </span><br><span class="line">➜  adb shell</span><br><span class="line">shell@hammerhead:/ $ cat default.prop | grep debug                             </span><br><span class="line">ro.debuggable=0</span><br><span class="line">shell@hammerhead:/ $ getprop ro.debuggable</span><br><span class="line">0</span><br><span class="line">shell@hammerhead:/ $ cd /data/local/tmp</span><br><span class="line">shell@hammerhead:/data/local/tmp $ su</span><br><span class="line">root@hammerhead:/data/local/tmp # ./mprop ro.debuggable 1   </span><br><span class="line">properties map area: b6f7a000-b6f9a000</span><br><span class="line">00000000  08 8d 00 00 19 01 00 00 50 52 4f 50 ab d0 6e fc  ........PROP??n?</span><br><span class="line">00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">……</span><br><span class="line">root@hammerhead:/ # cat default.prop | grep debug                              </span><br><span class="line">ro.debuggable=0</span><br><span class="line">root@hammerhead:/ # getprop ro.debuggable                                      </span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>版本太高导致的问题，问题不会大</p><p><img src="E:%5C%E5%8D%9A%E5%AE%A2%5Candorid%E9%80%86%E5%90%91%5CFrida%E5%AD%A6%E4%B9%A0%5CHook%E5%BC%80%E5%A7%8B.assets%5Cimage-20200324192712444.png" alt="image-20200324192712444"></p><p>配置代码提示</p><figure class="highlight plain"><figcaption><span>i @types/frida-gum```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook步骤</span><br><span class="line"></span><br><span class="line">1. 进入手机终端 启动 fsx86</span><br><span class="line">2. 端口转发</span><br><span class="line">3. 使用命令开始hook吧 `frida -U 包名 -l hook代码`</span><br><span class="line"></span><br><span class="line">### 逻辑分析</span><br><span class="line"></span><br><span class="line">要hook getCalc 方法，定位到函数声明</span><br><span class="line"></span><br><span class="line">![image-20200324201846328](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324201846328.png)</span><br><span class="line"></span><br><span class="line">定位到getCalc  方法有两个参数 a,b </span><br><span class="line"></span><br><span class="line">![image-20200324201919870](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324201919870.png)</span><br><span class="line"></span><br><span class="line">### Hook普通方法</span><br><span class="line"></span><br><span class="line">接下来根据这个函数开始hook</span><br><span class="line"></span><br><span class="line">​`var utils = Java.use(&quot;com.xiaojianbang.app.Utils&quot;);` 定位函数</span><br><span class="line"></span><br><span class="line">​重写方法 implementation</span><br></pre></td></tr></table></figure><p>var utils = Java.use(“com.xiaojianbang.app.Utils”);<br>utils.getCalc.implementation = function (a,b) { // implementation 是重写方法， js中不需要函数类型<br>    // 先打印一下a,b 参数和返回的参数<br>    var retval = this.getCalc(a,b); </p><pre><code>console.log(a,b,retval);return retval;</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​点击普通方法，即可在frida中看到获取的参数</span><br><span class="line"></span><br><span class="line">![image-20200324202244461](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324202244461.png)</span><br><span class="line"></span><br><span class="line">之后修改a ，b 参数</span><br></pre></td></tr></table></figure><p>var utils = Java.use(“com.xiaojianbang.app.Utils”);<br>utils.getCalc.implementation = function (a,b) { // implementation 是重写方法， js中不需要函数类型<br>    a = 123;<br>    b = 345;</p><pre><code>var retval = this.getCalc(a,b);console.log(a,b,retval);return retval;</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20200324203353529](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324203353529.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Hook 重载方法和重载方法的Hook</span><br><span class="line"></span><br><span class="line">重载方法和一般普通方法区别不大</span><br><span class="line"></span><br><span class="line">![image-20200324205305292](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324205305292.png)</span><br><span class="line"></span><br><span class="line">当使用之前的方法 去hook重载方法</span><br><span class="line"></span><br><span class="line">![image-20200324205229878](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324205229878.png)</span><br><span class="line"></span><br><span class="line">需要使用overload 去指定参数</span><br></pre></td></tr></table></figure><pre><code>utils.test.overload(&apos;int&apos;).implementation = function (a, b) { // implementation 是重写方法， js中不需要函数类型</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">最后hook所有的重载方法</span><br><span class="line"></span><br><span class="line">只要符合返回值，可以随意改的，即使调用其他的重载函数也是可以执行</span><br></pre></td></tr></table></figure><p>utils.test.overload(‘int’).implementation = function (a) { // implementation 是重写方法， js中不需要函数类型<br>    a = 888888888;<br>    var retval = this.test(a);<br>    console.log(a, retval);<br>    return retval;<br>};<br>utils.test.overload().implementation = function () {<br>    var retval = this.test();<br>    console.log(“无参：”,retval);<br>    return retval;<br>};<br>utils.test.overload(“com.xiaojianbang.app.Money”).implementation = function (a) {<br>    var retval = this.test(a);<br>    console.log(a,retval);<br>    return retval;<br>};</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Hook所有重载函数</span><br></pre></td></tr></table></figure><p>for (var i = 0 ;i &lt; utils.test.overloads.length;i++){ // 通过for 循环去获取每一个<br>    utils.test.overloads[i].implementation = function () {<br>        console.log(arguments); // arguments 是一个数组<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通过apply 可以避免每次返回需要改变返回参数的问题</span><br></pre></td></tr></table></figure><p>this.test.apply(this,arguments) // apply 是改变函数所属</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;  在frida 中，在同位置下多个钩子 最后一个会生效，因为他的代码会覆盖之前的代码。</span><br><span class="line"></span><br><span class="line">返回hook每个重载函数 参数长度</span><br></pre></td></tr></table></figure><p>function hookTest3() {<br>    // hook方法的所有重载<br>    var utils = Java.use(“com.xiaojianbang.app.Utils”);<br>    console.log(utils.test.overloads.length)<br>    // 之后遍历参数<br>    for (var i = 0 ;i &lt; utils.test.overloads.length;i++){<br>        utils.test.overloads[i].implementation = function () {<br>            //console.log(arguments);</p><pre><code>        return this.test.apply(this,arguments) // apply 是改变函数所属    }}</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">返回结果</span><br><span class="line"></span><br><span class="line">![](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324213234513.png)</span><br><span class="line"></span><br><span class="line">如果需要修改其中的某个重载函数 则需要在这里做一个判断</span><br></pre></td></tr></table></figure><p>if (arguments.length == 0){<br>    return “xiaojianbang”;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook 完整代码</span><br></pre></td></tr></table></figure><p>function hookTest3() {<br>    // hook方法的所有重载<br>    var utils = Java.use(“com.xiaojianbang.app.Utils”);<br>    console.log(utils.test.overloads.length)<br>    // 之后遍历参数<br>    for (var i = 0 ;i &lt; utils.test.overloads.length;i++){<br>        utils.test.overloads[i].implementation = function () {<br>            //console.log(arguments);<br>            if (arguments.length == 0){<br>                return “xiaojianbang”;<br>            }else if (arguments.length ==  1){<br>                if (JSON.stringify(arguments).indexOf(“Money”) != -1 ){<br>                    return “调用了Money参数”;<br>                } else{<br>                    return “ 调用了int参数的”;<br>                }<br>            }<br>            return this.test.apply(this,arguments) // apply 是改变函数所属<br>        }<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Hook 构造函数与对象实例化</span><br><span class="line"></span><br><span class="line">这里的`Money` 是我们的构造函数 函数与类型一致 </span><br><span class="line"></span><br><span class="line">![image-20200324215249350](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324215249350.png)</span><br><span class="line"></span><br><span class="line">也需要指明</span><br><span class="line"></span><br><span class="line">![image-20200324215639928](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324215639928.png)</span><br><span class="line"></span><br><span class="line">构造函数和重载只是多了个 $init</span><br></pre></td></tr></table></figure><p>function hookTest4() {<br>    var money = Java.use(“com.xiaojianbang.app.Money”);<br>    // 函数名与方法名一致<br>    money.$init.overload(‘java.lang.String’,’int’).implementation = function (str,num) {<br>        console.log(str,num);<br>        this.$init(str,num);<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在上一节重载函数，我们调用了money ，但是当我们要修改其中的值时 需要调用money的包</span><br><span class="line"></span><br><span class="line">![image-20200324220110549](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324220110549.png)</span><br><span class="line"></span><br><span class="line">在函数开始位置添加</span><br><span class="line"></span><br><span class="line">![image-20200324220151168](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324220151168.png)</span><br><span class="line"></span><br><span class="line">这就完成了一个实例化</span><br><span class="line"></span><br><span class="line">![image-20200324220241983](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324220241983.png)</span><br><span class="line"></span><br><span class="line">## 修改类的字段</span><br><span class="line"></span><br><span class="line">先尝试hook一下静态资源</span><br></pre></td></tr></table></figure><p>var money = Java.use(“com.xiaojianbang.app.Money”);<br>//send(money.flag)<br>console.log(JSON.stringify(money.flag.value));</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 多个对象就会有多个字段，所以要修改 必须找到对应的字段</span><br><span class="line"></span><br><span class="line">修改字段</span><br></pre></td></tr></table></figure><p>// 静态字段<br>var money = Java.use(“com.xiaojianbang.app.Money”);<br>//send(money.flag)<br>money.flag.value = “xiaojianbang”;</p><p>console.log(JSON.stringify(money.flag.value));</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hook 修改非静态字段</span><br><span class="line"></span><br><span class="line">&gt; 正常的每次修改都会new一个对象，所以看不到返回的值</span><br><span class="line"></span><br><span class="line">![image-20200324222948009](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324222948009.png)</span><br></pre></td></tr></table></figure><p>Java.choose(“com.xiaojianbang.app.Money”, {<br>    onMatch: function (obj) { // 每次遍历对象都会调用一次onMatch<br>        // 修改对象参数，如果修改单个 价格判断即可<br>        obj._name.value = “ouyuan”; // 这块注意字段名与函数名是否相同<br>        obj.num.value = 15000000;<br>    },<br>    onComplete: function () {</p><pre><code>}</code></pre><p>});  // cakkbacks指的是对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 这块注意 当字段名与函数名相同 要加`_`来区分</span><br><span class="line"></span><br><span class="line">## hook 内部类和匿名类</span><br><span class="line"></span><br><span class="line">当hook 类下的类 hook方法</span><br><span class="line"></span><br><span class="line">可以通过jeb smail 去看 </span><br><span class="line"></span><br><span class="line">![image-20200324230631123](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324230631123.png)</span><br><span class="line"></span><br><span class="line">money 只是一个父类，匿名类是getInfo 这里实现了一次， 匿名类一般都是$1 这种形式</span><br><span class="line"></span><br><span class="line">![image-20200324231541211](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200324231541211.png)</span><br><span class="line"></span><br><span class="line">## 枚举所有的类和所有的方法</span><br></pre></td></tr></table></figure><p>Java.enumerateLoadedClasses() //枚举类 只能加载 已经被加载的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java反射获取方法</span><br></pre></td></tr></table></figure><p>var methods = clazz.class.getDeclaredMethods();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">获取所有的类</span><br></pre></td></tr></table></figure><p>Java.enumerateLoadedClasses({<br>    onMatch:function (name,handle) { // 代码都是写在这里的<br>        if (name.indexOf(“com.xiaojianbang.app”) != -1){<br>            console.log(name)<br>        }<br>    },<br>    onComplete:function () { // 这里只会使用一次</p><pre><code>}</code></pre><p>})</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">获取类下的方法</span><br></pre></td></tr></table></figure><p> Java.enumerateLoadedClasses({<br>            onMatch:function (name,handle) { // 代码都是写在这里的<br>                if (name.indexOf(“com.xiaojianbang.app”) != -1){<br>                    console.log(name) // 类和地址  打印好多系统类，这里就要做个过滤<br>                    // 遍历类下的所有的方法 java 反射 有个getDeclaredMethods<br>                    var clazz = Java.use(name);<br>                    console.log(clazz);<br>                    var methods = clazz.class.getDeclaredMethods(); // 得到的是一个对象，这里要通过class转<br>                    //console.log(methods);  // 直接打印输出较乱 做一个整理</p><pre><code>            if (var i = 0; i &lt; methods[i].length;i++){                console.log(methods[i]);            }            console.log()        }    },    onComplete:function () { // 这里只会使用一次    }})</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">异步方式获取类和类的方法</span><br></pre></td></tr></table></figure><p>var classes = Java.enumerateLoadedClassesSync();<br>for (var i = 0; i &lt; classes.length; i++) {<br>    if (classes[i].indexOf(“com.xiaojianbang.app”) != -1) {<br>        console.log(classes[i]);<br>        var clazz = Java.use(classes[i]);<br>        var methods = clazz.class.getDeclaredMethods();<br>        for (var j = 0; j &lt; methods.length; j++) {<br>            console.log(methods[j]);<br>        }<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## hook类的所有方法</span><br><span class="line"></span><br><span class="line">首先确定hook那个类， 比如md5，之后通过java反射 获取类下的方法</span><br></pre></td></tr></table></figure><p>var md5 = Java.use(“com.xiaojianbang.app.MD5”);<br>var methods= md5.class.getDeclaredMethods();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">之后通过循环返回打印</span><br></pre></td></tr></table></figure><p>function hookTest8() {<br>    Java.perform(function () {<br>        var md5 = Java.use(“com.xiaojianbang.app.MD5”);<br>        var methods = md5.class.getDeclaredMethods();<br>        for (var i = 0; i &lt; methods.length; i++) {<br>            var methodName = methods[i].getName();<br>            console.log(methodName);<br>            for (var k = 0; k &lt; md5[methodName].overloads.length; k++) {<br>                md5[methodName].overloads[k].implementation = function () {<br>                    for (var j = 0; j &lt; arguments.length; j++) {<br>                        console.log(arguments[j]);<br>                    }<br>                    return this[methodName].apply(this, arguments) // 不知道返回的对象<br>                }<br>            }</p><pre><code>    }})</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 动态加载dex</span><br><span class="line"></span><br><span class="line">遇到问题： 在调用函数后，有些dex 是通过动态加载调用的，反编译并不会反编译到所有的dex</span><br><span class="line"></span><br><span class="line">一般可以通过DexClassLoader动态加载，或者通过so层 或者内存中去加载</span><br><span class="line"></span><br><span class="line">这里通过DexClassLoader去加载，文件放在apk的目录中</span><br><span class="line"></span><br><span class="line">![image-20200325214341078](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200325214341078.png)</span><br><span class="line"></span><br><span class="line">当直接调用就会报错</span><br></pre></td></tr></table></figure><p>function hookTest9() {<br>    Java.perform(function () {<br>        var dynamic = Java.use(“com.xiaojianbang.app.Dynamic”);<br>        console.log(dynamic);<br>    })<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20200325214906826](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200325214906826.png)</span><br><span class="line"></span><br><span class="line">这里就要找到对应的classloader  </span><br><span class="line"></span><br><span class="line">&gt; 注意：这个api是要在7版本以上使用，用android5 可能会报错</span><br></pre></td></tr></table></figure><p>function hookTest9(){<br>    Java.perform(function(){</p><pre><code>    Java.enumerateClassLoaders({        onMatch: function(loader){            try {                if(loader.loadClass(&quot;com.xiaojianbang.app.Dynamic&quot;)){                    Java.classFactory.loader = loader;                    var Dynamic = Java.use(&quot;com.xiaojianbang.app.Dynamic&quot;);                    console.log(Dynamic);                    Dynamic.sayHello.implementation = function(){                        return &quot;xiaojianbang&quot;;                    }                }            } catch (error) {            }        }        ,        onComplete: function(){        }    });});</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20200326091943750](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200326091943750.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; Java.classFactory.loader = loader; 这里的loader 可能会报错 不影响正确性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Java 里特殊类型的遍历与修改</span><br><span class="line"></span><br><span class="line">Hook map 或者修改其中的某些值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20200329001310423](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200329001310423.png)</span><br><span class="line"></span><br><span class="line">![image-20200329001325832](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200329001325832.png)</span><br><span class="line"></span><br><span class="line">这块可以使用show（java的代码） 去hook</span><br><span class="line"></span><br><span class="line">可以将show方法 直接copy过去，但是要注意里面的函数要遵守js的语法</span><br><span class="line"></span><br><span class="line">这块要使用迭代器去获取map</span><br></pre></td></tr></table></figure><p>不要调用伪代码的方法，而是去自写<br>function hookTest10(){<br>    Java.perform(function () {<br>        var ShufferMap = Java.use(“com.xiaojianbang.app.ShufferMap”)<br>        console.log(ShufferMap);<br>        ShufferMap.show.implementation = function (map) {<br>            console.log(JSON.stringify(map));</p><pre><code>        var key = map.keySet();        var it = key.iterator();        var result = &quot;&quot;;        while (it.hasNext()) {            var keystr = it.next();            var valuestr = map.get(keystr);            result += valuestr;        }    console.log(result);    return result;    }})</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">之后是java 特殊类型的修改</span><br></pre></td></tr></table></figure><p>function hookTest10(){<br>    Java.perform(function () {<br>        var ShufferMap = Java.use(“com.xiaojianbang.app.ShufferMap”)<br>        console.log(ShufferMap);<br>        ShufferMap.show.implementation = function (map) {<br>            console.log(JSON.stringify(map));<br>        // 2 修改特殊方法<br>            map.put(“pass”,”zygx8”);<br>            map.put(“xxxx”,”<a href="http://www.zygx8.com&quot;" target="_blank" rel="noopener">www.zygx8.com&quot;</a>);<br>            var retval = this.show(map);<br>            console.log(retval);<br>            return retval;</p><pre><code>    }})</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Java 层主动调用函数</span><br><span class="line"></span><br><span class="line">只有当函数被触发才会被执行，那么当我们需要解密一个比较复杂的算法，是可以通过主动调用函数去获取的</span><br><span class="line"></span><br><span class="line">静态主动调用</span><br></pre></td></tr></table></figure><p>调用rsa方法<br>function hookTest11() {<br>    Java.perform(function () {<br>        var rsa = Java.use(“com.xiaojianbang.app.RSA”);<br>        var str = Java.use(“java.lang.String”);<br>        var base64 = Java.use(“android.util.Base64”);<br>        var bytes = str.$new(“xioajianbang”).getBytes();<br>        console.log(bytes);<br>        var retval = rsa.encrypt(bytes);<br>        console.log(retval);<br>        var result = base64.encodeToString(retval,0);<br>        console.log(result);<br>    })<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">非静态方法的主动调用 调用getinfo</span><br></pre></td></tr></table></figure><p> Java.use(“com.xiaojianbang.Money”).$new(“欧元”,3000000).getInfo();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Java 打印函数堆栈</span><br><span class="line"></span><br><span class="line">之前使用Log.d 来打印信息</span><br><span class="line"></span><br><span class="line">![image-20200330115446399](D:\Blog\ST0new.github.io\source\_posts\逆向\XposedFridaHook系列\Hook开始.assets\image-20200330115446399.png)</span><br><span class="line"></span><br><span class="line">推荐： 使用`Log.getStack.TrachString(new Throwable())` 或``Log.getStack.TrachString(new exception())``</span><br></pre></td></tr></table></figure><p>function hookTest12() {<br>    // 写一个函数堆栈<br>    function showStacks(){<br>        console.log(Java.use(“android.util.Log”).getStackTraceString(Java.use(“java.lang.Exception”).$new()));<br>        //console.log(Java.use(“android.util.Log”).getStackTraceString(Java.use(“java.lang.Exception”).$new()));<br>    }<br>    Java.perform(function () {<br>        //Java.cast();<br>        //Java.openClassFile();<br>        var MessageDigest =  Java.use(“java.security.MessageDigest”);<br>        MessageDigest.digest.overload().implementation = function () {<br>            showStacks();<br>            return this.digest();</p><pre><code>    }})</code></pre><p>}<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hook-通杀&quot;&gt;&lt;a href=&quot;#Hook-通杀&quot; class=&quot;headerlink&quot; title=&quot;Hook 通杀&quot;&gt;&lt;/a&gt;Hook 通杀&lt;/h1&gt;&lt;h2 id=&quot;Hook-普通方法和修改函数参数返回值&quot;&gt;&lt;a href=&quot;#Hook-普通方法和修改函数
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>最右登录协议分析</title>
    <link href="http://yoursite.com/2020/06/08/%E9%80%86%E5%90%91/%E7%A0%B4%E8%A7%A3/%E6%9F%90%E5%8F%B3%E7%99%BB%E5%BD%95%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/06/08/逆向/破解/某右登录协议分析/</id>
    <published>2020-06-08T02:10:33.000Z</published>
    <updated>2020-06-12T14:58:13.662Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0130395c592797412d70237fa15dfcc5df17bc82a42e6d4efc6c3a8bc36e7ce3"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="破解" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-RememberOther</title>
    <link href="http://yoursite.com/2020/05/30/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/RememberOther/"/>
    <id>http://yoursite.com/2020/05/30/CTF/攻防世界/RememberOther/</id>
    <published>2020-05-30T03:26:48.000Z</published>
    <updated>2020-05-30T04:08:44.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RememberOther"><a href="#RememberOther" class="headerlink" title="RememberOther"></a>RememberOther</h1><h2 id="附件下载"><a href="#附件下载" class="headerlink" title="附件下载"></a>附件下载</h2><p><a href="https://adworld.xctf.org.cn/media/task/attachments/476d9022bb0449c09c0b1e24f0686b66.zip" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/476d9022bb0449c09c0b1e24f0686b66.zip</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先安装 然后看看逻辑</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530112854.png" alt></p><p>额 这个不就是注册机吗，这个做过，方法比较多， 直接看jadx 反编译出的代码，看看flag在哪</p><p>看到有个判断，应该是需要注册成功后返回</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530114236.png" alt></p><p>那么打开Androidkiller 修改if 判断处的逻辑，然而 我没找到if 判断，那就只能改checkSN方法了</p><p><img src="D:%5CBlog%5CST0new.github.io%5Csource_posts%5CCTF%5C%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%5Cphoto%5C20200530115843.png" alt></p><p>然后安装 点击注册</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530115913.png" alt></p><p>直接输出flag</p><p>同样 ，在返回值中，返回的是R.string.unsuccessed ，这是一个静态的字符串，strings.xml 中可以找到具体的值</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530120407.png" alt></p><p>md5:b3241668ecbeb19921fdac5ac1aafa69</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530120448.png" alt></p><p>解出 md5 值</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530120600.png" alt></p><p>然后 这个是个半段，还有半段在word文档中，这是个坑，看了wp后才知道</p><p>所以最后的flag ： YOU_KNOW_ANDROID</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RememberOther&quot;&gt;&lt;a href=&quot;#RememberOther&quot; class=&quot;headerlink&quot; title=&quot;RememberOther&quot;&gt;&lt;/a&gt;RememberOther&lt;/h1&gt;&lt;h2 id=&quot;附件下载&quot;&gt;&lt;a href=&quot;#附件下载&quot;
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-Ph0en1x-100</title>
    <link href="http://yoursite.com/2020/05/29/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/Ph0nen1x-100/"/>
    <id>http://yoursite.com/2020/05/29/CTF/攻防世界/Ph0nen1x-100/</id>
    <published>2020-05-29T08:11:37.000Z</published>
    <updated>2020-05-30T03:24:23.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ph0en1x-100"><a href="#Ph0en1x-100" class="headerlink" title="Ph0en1x-100"></a>Ph0en1x-100</h1><h2 id="附件下载"><a href="#附件下载" class="headerlink" title="附件下载"></a>附件下载</h2><p><a href="https://adworld.xctf.org.cn/media/task/attachments/f6adc401d0eb472892a4ac4481f76a85.apk" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/f6adc401d0eb472892a4ac4481f76a85.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>上手第一步还是看app逻辑， 可以看的出来 输入flag 判断正确与否，又是一个算法题。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529162137.png" alt></p><p>打开<code>jadx</code> 找到<code>MainActivity</code>,很明显就可以看到<code>Success</code>，</p><p>目标：输入正确的flag 让if 判断成立 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先对输入的字符串进行了一次encrypt， 之后在进行一次getSecret ，然后和getFlag() 做了一次判断是否相等</span><br><span class="line">getSecret(getFlag()).equals(getSecret(encrypt(this.etFlag.getText().toString())))</span><br></pre></td></tr></table></figure><h3 id="分析encrypt-函数"><a href="#分析encrypt-函数" class="headerlink" title="分析encrypt 函数"></a>分析encrypt 函数</h3><p>在jadx中查看函数声明，居然是so里面的，分析吧 </p><p>搜索字符串 关键字<code>Java_</code> 直接找到加密方法，进去看看调用逻辑，并不是很难。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529163739.png" alt></p><p>然后看看伪代码</p><p>a1 是传入进去的字符串，然后 i 是v2的第一个字符，对i的值进行减一   那他这里就是一个位移加密了。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529164307.png" alt></p><h3 id="分析getFlag"><a href="#分析getFlag" class="headerlink" title="分析getFlag()"></a>分析getFlag()</h3><p>分析了半天，感觉静态分析很难，然后看了下别人的思路，我是着实没想到，把这个方法运行一下就得到了flag</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529171947.png" alt></p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529172050.png" alt></p><p>得到字符串后编写脚本拿到flag</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag = &quot;ek`fz@q2^x/t^fn0mF^6/^rb`qanqntfg^E`hq|&quot;</span><br><span class="line">result = &quot;&quot;</span><br><span class="line"></span><br><span class="line">for i in flag:</span><br><span class="line">    result += chr((ord(i)+1))</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>result:flag{Ar3_y0u_go1nG_70_scarborough_Fair}</p><h2 id="其他解"><a href="#其他解" class="headerlink" title="其他解"></a>其他解</h2><p>之后我看了下网上的解法，很多，这里用一个frida hook 拿到getflag 和动态调试拿到flag来演示</p><h3 id="frida-hook-getFlag"><a href="#frida-hook-getFlag" class="headerlink" title="frida hook getFlag"></a>frida hook getFlag</h3><p>编写脚本 hook代码</p><p>命令： <code>frida -U com.ph0en1x.android_crackme -l Hook.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function hookphone100() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var getFlag = Module.findExportByName(&quot;libphcm.so&quot;,&quot;Java_com_ph0en1x_android_1crackme_MainActivity_getFlag&quot;);</span><br><span class="line">        console.log(getFlag);</span><br><span class="line">        if (getFlag != NULL)&#123;</span><br><span class="line">            Interceptor.attach(getFlag,&#123;</span><br><span class="line">                onEnter:function (args) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                onLeave:function (retval) &#123;</span><br><span class="line">                    var String_java = Java.use(&apos;java.lang.String&apos;);</span><br><span class="line">                    var args_4 = Java.cast(retval, String_java)</span><br><span class="line">                    console.log(retval);</span><br><span class="line">                    console.log(retval.toInt32());</span><br><span class="line">                    console.log(&quot;getFlag()==&gt;&quot;+args_4)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function main() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        hookphone100();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529180529.png" alt></p><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>动态调试 看了西米露表姐的wp ，我也尝试使用jeb 进行动态调试。</p><p>先以调试模式启动待调试apk，多下点准没错 然后在如图位置 得到了getFlag（）的值。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530112352.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ph0en1x-100&quot;&gt;&lt;a href=&quot;#Ph0en1x-100&quot; class=&quot;headerlink&quot; title=&quot;Ph0en1x-100&quot;&gt;&lt;/a&gt;Ph0en1x-100&lt;/h1&gt;&lt;h2 id=&quot;附件下载&quot;&gt;&lt;a href=&quot;#附件下载&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>新氧xx登录协议分析</title>
    <link href="http://yoursite.com/2020/05/29/%E9%80%86%E5%90%91/%E7%A0%B4%E8%A7%A3/%E6%96%B0%E6%B0%A7xx%E7%99%BB%E5%BD%95%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/05/29/逆向/破解/新氧xx登录协议分析/</id>
    <published>2020-05-29T08:02:00.000Z</published>
    <updated>2020-06-10T03:00:12.997Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="49879301d652bba907e3ce1c3eda99a3f2725219455e22fc1527a882bb8b671a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="破解" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-app2</title>
    <link href="http://yoursite.com/2020/05/28/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/app2/"/>
    <id>http://yoursite.com/2020/05/28/CTF/攻防世界/app2/</id>
    <published>2020-05-28T09:23:50.000Z</published>
    <updated>2020-05-29T02:08:56.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="app2"><a href="#app2" class="headerlink" title="app2"></a>app2</h1><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>附件地址：<a href="https://adworld.xctf.org.cn/media/task/attachments/2554cf208cfb4cdf9218a840fa9bf237.apk" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/2554cf208cfb4cdf9218a840fa9bf237.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先看逻辑，打开app 是一个登录界面，难道是sql注入，</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200528172841.png" alt></p><p>点击登录后返回<code>Waiting fot you</code></p><p>打开jadx看看， 先搜索一下点击登录返回的字符串，没有找到结果</p><p>打开ddms 看看，在log输出了用户名和密码，然后追踪到具体的log位置</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200528173942.png" alt></p><p>之后<code>Intent intent = new Intent(this, SecondActivity.class);</code>,看看<code>SecondActivity</code>这个方法干了什么</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200528174644.png" alt></p><p>看起来 判断了用户名+密码加密后的值</p><p>那么进doRawData 看看</p><p> <img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200528174928.png" alt></p><p>打开ida 找到doRawData 方法， 可以判断出 这里做了一个AES_128_ECB_PKCS5Padding_Encrypt的加密。 这里注意，我当时打开x86 文件夹下的so分析时 没有提示key，而amei-v7a下面的分析时，key是提示出来的 不需要在动态调试。</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529094907.png" alt></p><p>放到在线的aes 解密工具中解密</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200528181035.png" alt></p><p>将拿到的字符串分隔成两 去尝试登录 用户名：tencent 密码 aimage ，输入后直接闪退。看看源码做做了什么（ps 啥都没找到）</p><p>到这里 基本已经做完了，没有头绪，去看了下wp 发现flag 在<code>FileDataActivity</code>下</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200529100134.png" alt></p><p>然后 解密 得到flag：Cas3_0f_A_CAK3</p><p>在看 wp时发现还有另一种做法</p><p>因为<code>FileDataActivity</code> 属于界面 可以通过 <code>adb shell am start com.tencent.testvuln/.FileDataActivity</code> 这种方式直接调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;app2&quot;&gt;&lt;a href=&quot;#app2&quot; class=&quot;headerlink&quot; title=&quot;app2&quot;&gt;&lt;/a&gt;app2&lt;/h1&gt;&lt;h2 id=&quot;附件&quot;&gt;&lt;a href=&quot;#附件&quot; class=&quot;headerlink&quot; title=&quot;附件&quot;&gt;&lt;/a&gt;附件&lt;/h
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-app1</title>
    <link href="http://yoursite.com/2020/05/28/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/app1/"/>
    <id>http://yoursite.com/2020/05/28/CTF/攻防世界/app1/</id>
    <published>2020-05-28T09:23:50.000Z</published>
    <updated>2020-05-30T05:38:30.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="App1"><a href="#App1" class="headerlink" title="App1"></a>App1</h1><h2 id="附件下载"><a href="#附件下载" class="headerlink" title="附件下载"></a>附件下载</h2><p><a href="https://adworld.xctf.org.cn/media/task/attachments/b9af8dfef6b749d2819ef5be16c26a0d.apk" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/b9af8dfef6b749d2819ef5be16c26a0d.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看看逻辑 输入字符串判断</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530121617.png" alt></p><p>打开jadx 查看代码</p><p>输入字符串应该为versionCode.charAt(i) ^ versionName ，</p><p>看来要满足的条件是：</p><p>​    str = versionCode.charAt(i) ^ versionName</p><p>​    str.length = versionCode.length</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530122044.png" alt></p><p>动态调试一下，拿到这两个值<code>versionCode</code> 和 <code>versionName</code> 在操作中用jeb 一直附加失败（之后发现是自己的ddms 开着。）</p><p>附上一张jeb 动态调试拿到的结果</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530133755.png" alt></p><p>后来找到了定义 原来这里不是获取的系统内容</p><p><img src="https://raw.githubusercontent.com/ST0new/picture/master/2020/5/20200530132107.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">versionCode = 15</span><br><span class="line">versionName = X&lt;cP[?PHNB&lt;P?aj</span><br></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>之前浪费了点时间在无意义的地方，最后发现都是一些简单的逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">versionCode = 15</span><br><span class="line">versionName = &quot;X&lt;cP[?PHNB&lt;P?aj&quot;</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line"></span><br><span class="line">for i in range(0,versionCode):</span><br><span class="line">    flag += chr(ord(versionName[i]) ^versionCode)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>flag: W3l_T0_GAM3_0ne</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;App1&quot;&gt;&lt;a href=&quot;#App1&quot; class=&quot;headerlink&quot; title=&quot;App1&quot;&gt;&lt;/a&gt;App1&lt;/h1&gt;&lt;h2 id=&quot;附件下载&quot;&gt;&lt;a href=&quot;#附件下载&quot; class=&quot;headerlink&quot; title=&quot;附件下载&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
</feed>
