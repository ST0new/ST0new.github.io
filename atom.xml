<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ST0new Blog</title>
  
  <subtitle>博观而约取，厚积而薄发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-27T03:23:35.972Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ST0new</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python第一课 数据结构和算法</title>
    <link href="http://yoursite.com/2020/02/27/%E7%BC%96%E7%A8%8B/python/python%E7%AC%AC%E4%B8%80%E8%AF%BE%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/02/27/编程/python/python第一课 数据结构和算法/</id>
    <published>2020-02-27T03:23:31.000Z</published>
    <updated>2020-02-27T03:23:35.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python第一课-数据结构和算法"><a href="#python第一课-数据结构和算法" class="headerlink" title="python第一课 数据结构和算法"></a>python第一课 数据结构和算法</h1><blockquote><p>注： 本文是对照<a href="https://python3-cookbook.readthedocs.io/" target="_blank" rel="noopener">https://python3-cookbook.readthedocs.io/</a> 学习 总结笔记 </p></blockquote><h2 id="1-1-解压序列复制给多个变量"><a href="#1-1-解压序列复制给多个变量" class="headerlink" title="1.1  解压序列复制给多个变量"></a>1.1  解压序列复制给多个变量</h2><p><strong>问题</strong></p><p>现在有一个包含 N 个元素的元组或者是序列，怎样将它里面的值解压后同时赋值给 N 个变量？</p><p><strong>解决方案</strong></p><p><strong>元组</strong>：元组使用小括号与列表非常相似，创建元组只需要 <code>tup = (1,2,3,4,5,6)</code>,通过逗隔开即可；查看当前变量是否属于元组可以通过<code>type(tup)</code> 来获取变量类型；并且 元组也可以通过 tup = “a”,”b”,”c” 这样来实现；元组只包含一个元素，需要在元素后面添加逗号，否则会被当做运算符使用。</p><p><strong>序列</strong>：python中的序列一般指 字符串，列表，元组。python在序列中可以进行索引、切片、加、乘、检查成员、确定最大最小元素，</p><p><strong>字符串</strong>： python的字符串我在介绍中也说了， 通过 变量 等于 用引号包括的值即可，例如：</p><p>var = “St0n5”</p><p><strong>列表</strong>： 和元组类似，千万不要混淆了， 通过 list = [‘ceshi1’,’ceshi2’] 来创建</p><p>接下来开始解决问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 将p赋值给变量，注意变量的数量要和序列的数量相同</span><br><span class="line"># python 可以通过多变量赋值实现 同时对多个变量的赋值</span><br><span class="line">&gt;&gt;&gt; p =(4,5)</span><br><span class="line">&gt;&gt;&gt; x,y=p</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; y</span><br><span class="line">5</span><br><span class="line"># 接下来 放一个列表试试</span><br><span class="line">&gt;&gt;&gt; data = [&apos;python&apos;,&apos;C&apos;,&apos;中国加油&apos;,52.0,(2020,2,26)]    </span><br><span class="line">&gt;&gt;&gt; code1,code2,num1,num2,data1=data    </span><br><span class="line">&gt;&gt;&gt; code1    </span><br><span class="line">&apos;python&apos;</span><br><span class="line">&gt;&gt;&gt; code2    </span><br><span class="line">&apos;C&apos;</span><br><span class="line">&gt;&gt;&gt; num1    </span><br><span class="line">&apos;中国加油&apos;</span><br><span class="line">&gt;&gt;&gt; num2    </span><br><span class="line">52.0</span><br><span class="line">&gt;&gt;&gt; data1    </span><br><span class="line">(2020, 2, 26)</span><br></pre></td></tr></table></figure><p><strong>讨论</strong></p><p>上面展示了都是序列元素和元素一样的情况，那如果只需要其中的一部分元素 应该怎么去做，</p><p>文章中提供了一种方法是使用任意变量名占位，之后丢掉就好，</p><p>还可以通过下标来输入某个元素 也可以达到解压一部分的目的。</p><h2 id="1-2-解压可迭代对象赋值给多个变量"><a href="#1-2-解压可迭代对象赋值给多个变量" class="headerlink" title="1.2 解压可迭代对象赋值给多个变量"></a>1.2 解压可迭代对象赋值给多个变量</h2><p><strong>问题</strong></p><p>如果一个可迭代对象的元素个数超过变量个数时，会抛出一个 <code>ValueError</code> 。 那么怎样才能从这个可迭代对象中解压出 N 个元素出来？</p><p><strong>解决方案</strong></p><p><strong>容器</strong>: 把多个元素组织在一起的数据结构，当它可以用来询问某个元素是否包含在其中时，就可以理解为这是一个容器</p><p><strong>迭代对象</strong>：很多容器都是可迭代对象，但凡是可以返回一个迭代器的对象都可称之为可迭代对象</p><p><strong>迭代器</strong>： 它是一种带状态的对象，通过<code>next()</code>方法调用返回容器的下一个值，迭代器就是工厂模式的对象。</p><p><strong>生成器</strong>： 生成器是一种特殊的迭代器，生成器可以用更少的中间变量些流式代码，此外，相比于其他容器，它能更节省内存和<code>cpu</code>，没有返回值，通过<code>yield</code>来返回</p><p>解决问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 解决可迭代对象的元素超过变量个数 ，可以用 * 来解决问题</span><br><span class="line">&gt;&gt;&gt; record = (&apos;xss&apos;,&apos;sql&apos;,&apos;upload&apos;,&apos;xxe&apos;,&apos;download&apos;)      </span><br><span class="line">&gt;&gt;&gt; first,*middle,last = record      </span><br><span class="line">&gt;&gt;&gt; first      </span><br><span class="line">&apos;xss&apos;</span><br><span class="line">&gt;&gt;&gt; middle      </span><br><span class="line">[&apos;sql&apos;, &apos;upload&apos;, &apos;xxe&apos;]</span><br><span class="line">&gt;&gt;&gt; last      </span><br><span class="line">&apos;download&apos;</span><br><span class="line"># middle 永远都是列表类型，元素为空也是如此， 并且 * 表达式 可以用在任何位置。</span><br></pre></td></tr></table></figure><p>扩展的迭代语法是为了解压不确定个数或者任意个数的元素的可迭代对象设计的，通常可迭代对象都是有一定规律的， 有时 <code>*</code>表达式也可以用来做字符串的分割，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; line = &apos;nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false&apos;</span><br><span class="line">&gt;&gt;&gt; uname, *fields, homedir, sh = line.split(&apos;:&apos;)</span><br><span class="line">&gt;&gt;&gt; uname</span><br><span class="line">&apos;nobody&apos;</span><br><span class="line">&gt;&gt;&gt; homedir</span><br><span class="line">&apos;/var/empty&apos;</span><br><span class="line">&gt;&gt;&gt; sh</span><br><span class="line">&apos;/usr/bin/false&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>当然，如果你想要的解压一些元素并丢弃他们，你可以用<code>*_</code>这样来表示废弃</p><p>未完待续 …</p><hr><p>参考链接：</p><p><a href="https://foofish.net/iterators-vs-generators.html" target="_blank" rel="noopener">https://foofish.net/iterators-vs-generators.html</a></p><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p02_unpack_elements_from_iterables.html" target="_blank" rel="noopener">https://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p02_unpack_elements_from_iterables.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python第一课-数据结构和算法&quot;&gt;&lt;a href=&quot;#python第一课-数据结构和算法&quot; class=&quot;headerlink&quot; title=&quot;python第一课 数据结构和算法&quot;&gt;&lt;/a&gt;python第一课 数据结构和算法&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
      <category term="Code" scheme="http://yoursite.com/categories/Code/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 入门简介</title>
    <link href="http://yoursite.com/2020/02/26/%E7%BC%96%E7%A8%8B/python/python%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2020/02/26/编程/python/python介绍/</id>
    <published>2020-02-26T11:21:55.000Z</published>
    <updated>2020-02-26T11:21:57.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-简介"><a href="#python-简介" class="headerlink" title="python 简介"></a>python 简介</h1><p>为了完成毕设 努力学习python</p><ul><li>python 是一种解释型语言</li><li>pyhton 是交互式语言</li><li>python是面向对象语言</li><li>python是初学者语言 很简单</li></ul><h2 id="0x01-python区分"><a href="#0x01-python区分" class="headerlink" title="0x01 python区分"></a>0x01 python区分</h2><p>只要有python2 和python3 之分</p><h2 id="0x02-python的特点"><a href="#0x02-python的特点" class="headerlink" title="0x02 python的特点"></a>0x02 python的特点</h2><p>这就不提了 全是优点</p><p>python大法好</p><h2 id="0x03-python-变量类型"><a href="#0x03-python-变量类型" class="headerlink" title="0x03 python 变量类型"></a>0x03 python 变量类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>一般由数字、字母、下划线组成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = &apos;xxxx&apos;</span><br></pre></td></tr></table></figure><p><strong>方法</strong></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>支持字符、数字、字符串 甚至可以包含列表（嵌套）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [ &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 ]</span><br><span class="line">tinylist = [123, &apos;john&apos;]</span><br></pre></td></tr></table></figure><p>python中支持数据类型和类型的<code>连接</code>和<code>重复</code>操作</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组用<code>()</code>标识，内部元素用逗号隔开。但是元组不能二次赋值，</p><p>元组不能通过修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple = ( &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 )</span><br><span class="line">tinytuple = (123, &apos;john&apos;)</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典也是经常要使用的数据类型之一，和列表相比，列表是有序的对象集合，字典是无需的对象集合，列表是通过偏移存取，而字典是通过键来存取的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[&apos;one&apos;] = &quot;This is one&quot;</span><br><span class="line">dict[2] = &quot;This is two&quot;</span><br><span class="line"> </span><br><span class="line">tinydict = &#123;&apos;name&apos;: &apos;john&apos;,&apos;code&apos;:6734, &apos;dept&apos;: &apos;sales&apos;&#125;</span><br></pre></td></tr></table></figure><h1 id="PythonTip"><a href="#PythonTip" class="headerlink" title="PythonTip"></a>PythonTip</h1><h2 id="每日一练"><a href="#每日一练" class="headerlink" title="每日一练"></a>每日一练</h2><p><strong>结尾为0的个数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给你一个正整数列表 L, 输出L内所有数字的乘积末尾0的个数。(提示:不要直接相乘,数字很多,相乘得到的结果可能会很大)。例如： L=[2,8,3,50],则输出：2</span><br></pre></td></tr></table></figure><p>我拿到题第以想法就是乘，但无疑会增加算法的时间复杂度，所以，接下来就是分析如何更加简洁的利用</p><p>需要的是末尾0的个数，而数字中任何可以得到末尾为0的个数的值都可以化为2x5x某个值</p><p>所以接下来只要对每一位数字化一下是否可以通过2或者 5 得到</p><p>最后求一下2和5分别有多少个，取最小的那个就可以了 因为2和5都是素数，所以不存在取得的数重复现象</p><p>总结一下：求每一个数可以得到几个2和几个5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">L =[2,8,3,50]</span><br><span class="line"></span><br><span class="line">count_2 ,count_5= 0,0</span><br><span class="line"></span><br><span class="line">def count_2_5(i,n):</span><br><span class="line">    num = 0</span><br><span class="line">    while i % n == 0:</span><br><span class="line">        i  = i / 2</span><br><span class="line">        num += 1</span><br><span class="line">    return num</span><br><span class="line"></span><br><span class="line">for i in L:</span><br><span class="line">    count_2 += count_2_5(i,2)</span><br><span class="line">    count_5 += count_2_5(i,5)</span><br><span class="line"></span><br><span class="line">print(min(count_2,count_5))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-简介&quot;&gt;&lt;a href=&quot;#python-简介&quot; class=&quot;headerlink&quot; title=&quot;python 简介&quot;&gt;&lt;/a&gt;python 简介&lt;/h1&gt;&lt;p&gt;为了完成毕设 努力学习python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python 是一种解
      
    
    </summary>
    
    
      <category term="Code" scheme="http://yoursite.com/categories/Code/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>android 安全之环境搭建（一）</title>
    <link href="http://yoursite.com/2020/02/05/%E9%80%86%E5%90%91/android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/02/05/逆向/android学习之环境搭建/</id>
    <published>2020-02-05T12:49:39.000Z</published>
    <updated>2020-02-05T12:50:02.059Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="android-安全（一）"><a href="#android-安全（一）" class="headerlink" title="android 安全（一）"></a>android 安全（一）</h1><p>简单的学习做笔记</p><p>android 现在基本都是以逆向脱壳为主，为了能够更加了解渗透测试，特地学习了一下逆向的基础知识。</p><h1 id="0x00-环境搭建"><a href="#0x00-环境搭建" class="headerlink" title="0x00 环境搭建"></a>0x00 环境搭建</h1><p>不论从事那一方面的研究，第一件事都是搭建一个满意的环境，不然满是bug的环境会让你望而却步。</p><p><strong>硬件要求</strong></p><p>逆向需要的环境对系统要求不高，我自己是个游戏本，完全满足要求，就不需要在硬件上破费了。你只需要一个功能齐全的电脑都可以满足基本的学习要求。</p><h2 id="必备的一些软件安装"><a href="#必备的一些软件安装" class="headerlink" title="必备的一些软件安装"></a>必备的一些软件安装</h2><p>推荐一个android下载站： <a href="https://www.androiddevtools.cn/#" target="_blank" rel="noopener">https://www.androiddevtools.cn/#</a></p><ol><li><p><code>jdk</code> ：这是android开发必备环境之一，由于一些软件限制，我准备的是<code>jdk-8u121-windows-x64</code>和<code>jdk-8u121-windows-i586</code>,当然也可以下载最新的，但有时会在安装某个软件的时候出现莫名其妙的问题。</p></li><li><p><code>android sdk</code>: （由于已经没有了单独的下载包，所以可以通过下载包含有android sdk 的android studio: 另一种是网上提供下载的链接，这个倒是蛮多的  下载链接：<a href="https://developer.android.com/studio" target="_blank" rel="noopener">android studio</a>）</p></li></ol><blockquote><p>这里说一下android sdk 和android studio的区别</p><p>Android SDK 是一个开发包。类似于JAVA SDK。里面包含了Android开发的各式各样的库文件。<br>Android studio是一个IDE（可视化开发工具）跟eclipse一样的东西。用来开发Android的工具。(studio 包含有sdk)</p></blockquote><ol start="3"><li><p><code>android NDK</code>:<code>Android NDK</code> 是一个工具集，可让您使用 C 和 C++ 等语言以原生代码实现应用的各个部分。对于特定类型的应用，这可以帮助您重复使用以这些语言编写的代码库<a href="https://developer.android.com/ndk/downloads" target="_blank" rel="noopener">NDK</a>   之后将ndk 安装的路径添加到<code>path</code> 环境变量中即可</p></li><li><p>开发环境安装 ，这里我安装的是<code>android studio</code> 因为<code>eclipse for Android Developers</code> 已经不在维护了。</p></li></ol><hr><p>刚开始学逆向，好多东西都是一知半解，如果有什么问题或者错误， 还望各位大佬狠狠的批评。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;android-安全（一）&quot;&gt;&lt;a href=&quot;#android-安全（一）&quot; class=&quot;headerlink&quot; title=&quot;android 安全（一）&quot;&gt;&lt;/a&gt;android 安全（一）&lt;/h1&gt;&lt;p&gt;简单的学习做笔记&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Reverse" scheme="http://yoursite.com/categories/Reverse/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
</feed>
